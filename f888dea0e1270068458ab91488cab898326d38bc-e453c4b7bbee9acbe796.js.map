{"version":3,"file":"f888dea0e1270068458ab91488cab898326d38bc-e453c4b7bbee9acbe796.js","mappings":";sGAEA,IAAIA,EAASC,OAAOC,UAAUC,eAC1BC,EAAQH,OAAOC,UAAUG,SACzBC,EAAiBL,OAAOK,eACxBC,EAAON,OAAOO,yBAEdC,EAAU,SAAiBC,GAC9B,MAA6B,mBAAlBC,MAAMF,QACTE,MAAMF,QAAQC,GAGK,mBAApBN,EAAMQ,KAAKF,EACnB,EAEIG,EAAgB,SAAuBC,GAC1C,IAAKA,GAA2B,oBAApBV,EAAMQ,KAAKE,GACtB,OAAO,EAGR,IASIC,EATAC,EAAoBhB,EAAOY,KAAKE,EAAK,eACrCG,EAAmBH,EAAII,aAAeJ,EAAII,YAAYhB,WAAaF,EAAOY,KAAKE,EAAII,YAAYhB,UAAW,iBAE9G,GAAIY,EAAII,cAAgBF,IAAsBC,EAC7C,OAAO,EAMR,IAAKF,KAAOD,GAEZ,YAAsB,IAARC,GAAuBf,EAAOY,KAAKE,EAAKC,EACvD,EAGII,EAAc,SAAqBC,EAAQC,GAC1Cf,GAAmC,cAAjBe,EAAQC,KAC7BhB,EAAec,EAAQC,EAAQC,KAAM,CACpCC,YAAY,EACZC,cAAc,EACdC,MAAOJ,EAAQK,SACfC,UAAU,IAGXP,EAAOC,EAAQC,MAAQD,EAAQK,QAEjC,EAGIE,EAAc,SAAqBd,EAAKQ,GAC3C,GAAa,cAATA,EAAsB,CACzB,IAAKtB,EAAOY,KAAKE,EAAKQ,GACrB,OACM,GAAIf,EAGV,OAAOA,EAAKO,EAAKQ,GAAMG,KAEzB,CAEA,OAAOX,EAAIQ,EACZ,EAEAO,EAAOC,QAAU,SAASC,IACzB,IAAIV,EAASC,EAAMU,EAAKC,EAAMC,EAAaC,EACvCf,EAASgB,UAAU,GACnBC,EAAI,EACJC,EAASF,UAAUE,OACnBC,GAAO,EAaX,IAVsB,kBAAXnB,IACVmB,EAAOnB,EACPA,EAASgB,UAAU,IAAM,CAAC,EAE1BC,EAAI,IAES,MAAVjB,GAAqC,iBAAXA,GAAyC,mBAAXA,KAC3DA,EAAS,CAAC,GAGJiB,EAAIC,IAAUD,EAGpB,GAAe,OAFfhB,EAAUe,UAAUC,IAInB,IAAKf,KAAQD,EACZW,EAAMJ,EAAYR,EAAQE,GAItBF,KAHJa,EAAOL,EAAYP,EAASC,MAKvBiB,GAAQN,IAASpB,EAAcoB,KAAUC,EAAczB,EAAQwB,MAC9DC,GACHA,GAAc,EACdC,EAAQH,GAAOvB,EAAQuB,GAAOA,EAAM,IAEpCG,EAAQH,GAAOnB,EAAcmB,GAAOA,EAAM,CAAC,EAI5Cb,EAAYC,EAAQ,CAAEE,KAAMA,EAAMI,SAAUK,EAAOQ,EAAMJ,EAAOF,WAGtC,IAATA,GACjBd,EAAYC,EAAQ,CAAEE,KAAMA,EAAMI,SAAUO,KAQjD,OAAOb,CACR,4qBChFO,SAASoB,EAAkBf,GAEhC,OAAKA,GAA0B,iBAAVA,EAKjB,aAAcA,GAAS,SAAUA,EAC5BgB,EAAShB,EAAMgB,UAIpB,UAAWhB,GAAS,QAASA,EACxBgB,EAAShB,GAId,SAAUA,GAAS,WAAYA,EAC1BiB,EAAMjB,GAIR,GAnBE,EAoBX,CAMA,SAASiB,EAAMA,GACb,OAAOC,EAAMD,GAASA,EAAME,MAAQ,IAAMD,EAAMD,GAASA,EAAMG,OACjE,CAMA,SAASJ,EAASK,GAChB,OAAOJ,EAAMI,GAAOA,EAAIC,OAAS,IAAML,EAAMI,GAAOA,EAAIE,IAC1D,CAMA,SAASL,EAAMlB,GACb,OAAOA,GAA0B,iBAAVA,EAAqBA,EAAQ,CACtD,CCvEO,MAAMwB,UAAqBC,MAmBhC,WAAAhC,CAAYiC,EAAQC,EAAOC,GAEzB,MAAMC,EAAQ,CAAC,KAAM,MAErB,IAAIb,EAAW,CAEbM,MAAO,CAACH,KAAM,KAAMC,OAAQ,MAE5BG,IAAK,CAACJ,KAAM,KAAMC,OAAQ,OAU5B,GAPAU,QAEqB,iBAAVH,IACTC,EAASD,EACTA,OAAQI,GAGY,iBAAXH,EAAqB,CAC9B,MAAMV,EAAQU,EAAOI,QAAQ,MAEd,IAAXd,EACFW,EAAM,GAAKD,GAEXC,EAAM,GAAKD,EAAOK,MAAM,EAAGf,GAC3BW,EAAM,GAAKD,EAAOK,MAAMf,EAAQ,GAEpC,CAEIS,IAEE,SAAUA,GAAS,aAAcA,EAC/BA,EAAMX,WAGRA,EAAWW,EAAMX,UAIZ,UAAWW,GAAS,QAASA,EAGpCX,EAAWW,GAGJ,SAAUA,GAAS,WAAYA,KAEtCX,EAASM,MAAQK,IAWrBO,KAAKrC,KAAOkB,EAAkBY,IAAU,MAOxCO,KAAKC,QAA4B,iBAAXT,EAAsBA,EAAOS,QAAUT,EAU7DQ,KAAKE,MAAQ,GAES,iBAAXV,GAAuBA,EAAOU,QACvCF,KAAKE,MAAQV,EAAOU,OAUtBF,KAAKR,OAASQ,KAAKC,QAYnBD,KAAKG,MAOLH,KAAKf,KAAOH,EAASM,MAAMH,KAO3Be,KAAKd,OAASJ,EAASM,MAAMF,OAO7Bc,KAAKlB,SAAWA,EAOhBkB,KAAKI,OAAST,EAAM,GAOpBK,KAAKK,OAASV,EAAM,GAOpBK,KAAKM,KAYLN,KAAKO,OAOLP,KAAKQ,SAULR,KAAKS,IAOLT,KAAKU,IAEP,EAGFpB,EAAa/C,UAAU+D,KAAO,GAC9BhB,EAAa/C,UAAUoB,KAAO,GAC9B2B,EAAa/C,UAAUiD,OAAS,GAChCF,EAAa/C,UAAU0D,QAAU,GACjCX,EAAa/C,UAAU2D,MAAQ,GAC/BZ,EAAa/C,UAAU4D,MAAQ,KAC/Bb,EAAa/C,UAAU2C,OAAS,KAChCI,EAAa/C,UAAU0C,KAAO,KAC9BK,EAAa/C,UAAU6D,OAAS,KAChCd,EAAa/C,UAAU8D,OAAS,KAChCf,EAAa/C,UAAUuC,SAAW,KC7K3B,MAAM6B,EAAO,CAACC,SAcrB,SAAkBD,EAAME,GACtB,QAAYhB,IAARgB,GAAoC,iBAARA,EAC9B,MAAM,IAAIC,UAAU,mCAGtBC,EAAWJ,GACX,IAIIK,EAJA5B,EAAQ,EACRC,GAAO,EACPL,EAAQ2B,EAAKhC,OAIjB,QAAYkB,IAARgB,GAAoC,IAAfA,EAAIlC,QAAgBkC,EAAIlC,OAASgC,EAAKhC,OAAQ,CACrE,KAAOK,KACL,GAA+B,KAA3B2B,EAAKM,WAAWjC,IAGlB,GAAIgC,EAAc,CAChB5B,EAAQJ,EAAQ,EAChB,KACF,OACSK,EAAM,IAGf2B,GAAe,EACf3B,EAAML,EAAQ,GAIlB,OAAOK,EAAM,EAAI,GAAKsB,EAAKZ,MAAMX,EAAOC,EAC1C,CAEA,GAAIwB,IAAQF,EACV,MAAO,GAGT,IAAIO,GAAoB,EACpBC,EAAWN,EAAIlC,OAAS,EAE5B,KAAOK,KACL,GAA+B,KAA3B2B,EAAKM,WAAWjC,IAGlB,GAAIgC,EAAc,CAChB5B,EAAQJ,EAAQ,EAChB,KACF,OAEIkC,EAAmB,IAGrBF,GAAe,EACfE,EAAmBlC,EAAQ,GAGzBmC,GAAY,IAEVR,EAAKM,WAAWjC,KAAW6B,EAAII,WAAWE,KACxCA,EAAW,IAGb9B,EAAML,IAKRmC,GAAY,EACZ9B,EAAM6B,IAMV9B,IAAUC,EACZA,EAAM6B,EACG7B,EAAM,IACfA,EAAMsB,EAAKhC,QAGb,OAAOgC,EAAKZ,MAAMX,EAAOC,EAC3B,EA9F+B+B,QAwG/B,SAAiBT,GAGf,GAFAI,EAAWJ,GAES,IAAhBA,EAAKhC,OACP,MAAO,IAGT,IAGI0C,EAHAhC,GAAO,EACPL,EAAQ2B,EAAKhC,OAKjB,OAASK,GACP,GAA+B,KAA3B2B,EAAKM,WAAWjC,IAClB,GAAIqC,EAAgB,CAClBhC,EAAML,EACN,KACF,OACUqC,IAEVA,GAAiB,GAIrB,OAAOhC,EAAM,EACc,KAAvBsB,EAAKM,WAAW,GACd,IACA,IACM,IAAR5B,GAAoC,KAAvBsB,EAAKM,WAAW,GAC7B,KACAN,EAAKZ,MAAM,EAAGV,EACpB,EAxIwCiC,QAkJxC,SAAiBX,GACfI,EAAWJ,GAEX,IASIU,EATArC,EAAQ2B,EAAKhC,OAEbU,GAAO,EACPkC,EAAY,EACZC,GAAY,EAGZC,EAAc,EAIlB,KAAOzC,KAAS,CACd,MAAM0C,EAAOf,EAAKM,WAAWjC,GAE7B,GAAa,KAAT0C,EAWArC,EAAM,IAGRgC,GAAiB,EACjBhC,EAAML,EAAQ,GAGH,KAAT0C,EAEEF,EAAW,EACbA,EAAWxC,EACc,IAAhByC,IACTA,EAAc,GAEPD,GAAY,IAGrBC,GAAe,QAzBf,GAAIJ,EAAgB,CAClBE,EAAYvC,EAAQ,EACpB,KACF,CAwBJ,CAEA,GACEwC,EAAW,GACXnC,EAAM,GAEU,IAAhBoC,GAEiB,IAAhBA,GAAqBD,IAAanC,EAAM,GAAKmC,IAAaD,EAAY,EAEvE,MAAO,GAGT,OAAOZ,EAAKZ,MAAMyB,EAAUnC,EAC9B,EA/MiDsC,KAyNjD,YAAiBC,GACf,IAEIC,EAFA7C,GAAS,EAIb,OAASA,EAAQ4C,EAASjD,QACxBoC,EAAWa,EAAS5C,IAEhB4C,EAAS5C,KACX6C,OACahC,IAAXgC,EAAuBD,EAAS5C,GAAS6C,EAAS,IAAMD,EAAS5C,IAIvE,YAAkBa,IAAXgC,EAAuB,IAahC,SAAmBlB,GACjBI,EAAWJ,GAEX,MAAMmB,EAAkC,KAAvBnB,EAAKM,WAAW,GAGjC,IAAInD,EAuBN,SAAyB6C,EAAMoB,GAC7B,IAMIL,EAEAM,EARAC,EAAS,GACTC,EAAoB,EACpBC,GAAa,EACbC,EAAO,EACPpD,GAAS,EAMb,OAASA,GAAS2B,EAAKhC,QAAQ,CAC7B,GAAIK,EAAQ2B,EAAKhC,OACf+C,EAAOf,EAAKM,WAAWjC,OAClB,IAAa,KAAT0C,EACT,MAEAA,EAAO,EACT,CAEA,GAAa,KAATA,EAAuB,CACzB,GAAIS,IAAcnD,EAAQ,GAAc,IAAToD,QAExB,GAAID,IAAcnD,EAAQ,GAAc,IAAToD,EAAY,CAChD,GACEH,EAAOtD,OAAS,GACM,IAAtBuD,GACyC,KAAzCD,EAAOhB,WAAWgB,EAAOtD,OAAS,IACO,KAAzCsD,EAAOhB,WAAWgB,EAAOtD,OAAS,GAElC,GAAIsD,EAAOtD,OAAS,GAGlB,GAFAqD,EAAiBC,EAAOI,YAAY,KAEhCL,IAAmBC,EAAOtD,OAAS,EAAG,CACpCqD,EAAiB,GACnBC,EAAS,GACTC,EAAoB,IAEpBD,EAASA,EAAOlC,MAAM,EAAGiC,GACzBE,EAAoBD,EAAOtD,OAAS,EAAIsD,EAAOI,YAAY,MAG7DF,EAAYnD,EACZoD,EAAO,EACP,QACF,OACK,GAAIH,EAAOtD,OAAS,EAAG,CAC5BsD,EAAS,GACTC,EAAoB,EACpBC,EAAYnD,EACZoD,EAAO,EACP,QACF,CAGEL,IACFE,EAASA,EAAOtD,OAAS,EAAIsD,EAAS,MAAQ,KAC9CC,EAAoB,EAExB,MACMD,EAAOtD,OAAS,EAClBsD,GAAU,IAAMtB,EAAKZ,MAAMoC,EAAY,EAAGnD,GAE1CiD,EAAStB,EAAKZ,MAAMoC,EAAY,EAAGnD,GAGrCkD,EAAoBlD,EAAQmD,EAAY,EAG1CA,EAAYnD,EACZoD,EAAO,CACT,MAAoB,KAATV,GAAyBU,GAAQ,EAC1CA,IAEAA,GAAQ,CAEZ,CAEA,OAAOH,CACT,CAtGcK,CAAgB3B,GAAOmB,GAEd,IAAjBhE,EAAMa,QAAiBmD,IACzBhE,EAAQ,KAGNA,EAAMa,OAAS,GAA0C,KAArCgC,EAAKM,WAAWN,EAAKhC,OAAS,KACpDb,GAAS,KAGX,OAAOgE,EAAW,IAAMhE,EAAQA,CAClC,CA9BsCyE,CAAUV,EAChD,EAxOuDW,IAAK,KA0W5D,SAASzB,EAAWJ,GAClB,GAAoB,iBAATA,EACT,MAAM,IAAIG,UACR,mCAAqC2B,KAAKC,UAAU/B,GAG1D,CChaO,MAAMgC,EAAO,CAACC,IAErB,WACE,MAAO,GACT,GCoBO,SAASC,EAAMC,GACpB,OACoB,OAAlBA,GACyB,iBAAlBA,GAEPA,EAAcC,MAEdD,EAAcpD,MAElB,CCxBO,SAASsD,EAAUrC,GACxB,GAAoB,iBAATA,EACTA,EAAO,IAAIsC,IAAItC,QACV,IAAKkC,EAAMlC,GAAO,CAEvB,MAAMuC,EAAQ,IAAIpC,UAChB,+EACEH,EACA,KAGJ,MADAuC,EAAMxB,KAAO,uBACPwB,CACR,CAEA,GAAsB,UAAlBvC,EAAKwC,SAAsB,CAE7B,MAAMD,EAAQ,IAAIpC,UAAU,kCAE5B,MADAoC,EAAMxB,KAAO,yBACPwB,CACR,CAEA,OAWF,SAA6BzC,GAC3B,GAAqB,KAAjBA,EAAI2C,SAAiB,CAEvB,MAAMF,EAAQ,IAAIpC,UAChB,wDAGF,MADAoC,EAAMxB,KAAO,4BACPwB,CACR,CAEA,MAAMG,EAAW5C,EAAI4C,SACrB,IAAIrE,GAAS,EAEb,OAASA,EAAQqE,EAAS1E,QACxB,GACiC,KAA/B0E,EAASpC,WAAWjC,IACe,KAAnCqE,EAASpC,WAAWjC,EAAQ,GAC5B,CACA,MAAMsE,EAAQD,EAASpC,WAAWjC,EAAQ,GAC1C,GAAc,KAAVsE,GAAoC,MAAVA,EAAyB,CAErD,MAAMJ,EAAQ,IAAIpC,UAChB,uDAGF,MADAoC,EAAMxB,KAAO,4BACPwB,CACR,CACF,CAGF,OAAOK,mBAAmBF,EAC5B,CA1CSG,CAAoB7C,EAC7B,CCgEA,MAAM8C,EAAQ,CAAC,UAAW,OAAQ,WAAY,OAAQ,UAAW,WAE1D,MAAMC,EAuBX,WAAAnG,CAAYO,GAEV,IAAIJ,EAKFA,EAHGI,EAEuB,iBAAVA,GAoYtB,SAAgBA,GACd,OAAO,EAAWA,EACpB,CAtY4C6F,CAAO7F,GACnC,CAACA,SACF+E,EAAM/E,GACL,CAAC6C,KAAM7C,GAEPA,EANA,CAAC,EAiBbkC,KAAK4D,KAAO,CAAC,EAOb5D,KAAK6D,SAAW,GAShB7D,KAAK8D,QAAU,GAOf9D,KAAK4C,IAAMD,EAAKC,MAQhB5C,KAAKlC,MAYLkC,KAAK+D,OAUL/D,KAAKiC,OAULjC,KAAKgE,IAIL,IAkBIC,EAlBAjF,GAAS,EAEb,OAASA,EAAQyE,EAAM9E,QAAQ,CAC7B,MAAMsF,EAAOR,EAAMzE,GAKjBiF,KAAQvG,QACUmC,IAAlBnC,EAAQuG,IACU,OAAlBvG,EAAQuG,KAGRjE,KAAKiE,GAAiB,YAATA,EAAqB,IAAIvG,EAAQuG,IAASvG,EAAQuG,GAEnE,CAMA,IAAKA,KAAQvG,EAEN+F,EAAMS,SAASD,KAElBjE,KAAKiE,GAAQvG,EAAQuG,GAG3B,CAOA,QAAItD,GACF,OAAOX,KAAK8D,QAAQ9D,KAAK8D,QAAQnF,OAAS,EAC5C,CAWA,QAAIgC,CAAKA,GACHkC,EAAMlC,KACRA,EAAOqC,EAAUrC,IAGnBwD,EAAexD,EAAM,QAEjBX,KAAKW,OAASA,GAChBX,KAAK8D,QAAQM,KAAKzD,EAEtB,CAKA,WAAIS,GACF,MAA4B,iBAAdpB,KAAKW,KAAoBA,EAAKS,QAAQpB,KAAKW,WAAQd,CACnE,CAOA,WAAIuB,CAAQA,GACV,EAAWpB,KAAKY,SAAU,WAC1BZ,KAAKW,KAAOA,EAAKgB,KAAKP,GAAW,GAAIpB,KAAKY,SAC5C,CAKA,YAAIA,GACF,MAA4B,iBAAdZ,KAAKW,KAAoBA,EAAKC,SAASZ,KAAKW,WAAQd,CACpE,CASA,YAAIe,CAASA,GACXuD,EAAevD,EAAU,YACzByD,EAAWzD,EAAU,YACrBZ,KAAKW,KAAOA,EAAKgB,KAAK3B,KAAKoB,SAAW,GAAIR,EAC5C,CAKA,WAAIU,GACF,MAA4B,iBAAdtB,KAAKW,KAAoBA,EAAKW,QAAQtB,KAAKW,WAAQd,CACnE,CASA,WAAIyB,CAAQA,GAIV,GAHA+C,EAAW/C,EAAS,WACpB,EAAWtB,KAAKoB,QAAS,WAErBE,EAAS,CACX,GAA8B,KAA1BA,EAAQL,WAAW,GACrB,MAAM,IAAI1B,MAAM,iCAGlB,GAAI+B,EAAQ4C,SAAS,IAAK,GACxB,MAAM,IAAI3E,MAAM,yCAEpB,CAEAS,KAAKW,KAAOA,EAAKgB,KAAK3B,KAAKoB,QAASpB,KAAKsE,MAAQhD,GAAW,IAC9D,CAKA,QAAIgD,GACF,MAA4B,iBAAdtE,KAAKW,KACfA,EAAKC,SAASZ,KAAKW,KAAMX,KAAKsB,cAC9BzB,CACN,CASA,QAAIyE,CAAKA,GACPH,EAAeG,EAAM,QACrBD,EAAWC,EAAM,QACjBtE,KAAKW,KAAOA,EAAKgB,KAAK3B,KAAKoB,SAAW,GAAIkD,GAAQtE,KAAKsB,SAAW,IACpE,CAWA,QAAA5E,CAAS6H,GACP,OAAQvE,KAAKlC,OAAS,IAAIpB,SAAS6H,QAAY1E,EACjD,CAkBA,OAAAI,CAAQT,EAAQC,EAAOC,GACrB,MAAMO,EAAU,IAAIX,EAAaE,EAAQC,EAAOC,GAWhD,OATIM,KAAKW,OACPV,EAAQtC,KAAOqC,KAAKW,KAAO,IAAMV,EAAQtC,KACzCsC,EAAQK,KAAON,KAAKW,MAGtBV,EAAQE,OAAQ,EAEhBH,KAAK6D,SAASO,KAAKnE,GAEZA,CACT,CAkBA,IAAAuE,CAAKhF,EAAQC,EAAOC,GAClB,MAAMO,EAAUD,KAAKC,QAAQT,EAAQC,EAAOC,GAI5C,OAFAO,EAAQE,MAAQ,KAETF,CACT,CAsBA,IAAAwE,CAAKjF,EAAQC,EAAOC,GAClB,MAAMO,EAAUD,KAAKC,QAAQT,EAAQC,EAAOC,GAI5C,MAFAO,EAAQE,OAAQ,EAEVF,CACR,EAaF,SAASoE,EAAWK,EAAM/G,GACxB,GAAI+G,GAAQA,EAAKR,SAASvD,EAAK6B,KAC7B,MAAM,IAAIjD,MACR,IAAM5B,EAAO,uCAAyCgD,EAAK6B,IAAM,IAGvE,CAYA,SAAS2B,EAAeO,EAAM/G,GAC5B,IAAK+G,EACH,MAAM,IAAInF,MAAM,IAAM5B,EAAO,oBAEjC,CAYA,SAAS,EAAWgD,EAAMhD,GACxB,IAAKgD,EACH,MAAM,IAAIpB,MAAM,YAAc5B,EAAO,kCAEzC,CCpfO,SAASgH,EAAKzB,GACnB,GAAIA,EACF,MAAMA,CAEV,gBCXe,SAAShG,EAAcY,GACrC,GAAqB,iBAAVA,GAAgC,OAAVA,EAChC,OAAO,EAGR,MAAMvB,EAAYD,OAAOsI,eAAe9G,GACxC,QAAsB,OAAdvB,GAAsBA,IAAcD,OAAOC,WAAkD,OAArCD,OAAOsI,eAAerI,IAA0BsI,OAAOC,eAAehH,GAAY+G,OAAOE,YAAYjH,EACtK,CCUO,SAASkH,IAEd,MAAMC,EAAM,GAENC,EAAW,CAACC,IAKlB,YAAgBC,GACd,IAAIC,GAAmB,EAEvB,MAAMC,EAAWF,EAAOG,MAExB,GAAwB,mBAAbD,EACT,MAAM,IAAIxE,UAAU,2CAA6CwE,IAWnE,SAASE,EAAKtC,KAAUuC,GACtB,MAAMC,EAAKT,IAAMI,GACjB,IAAIrG,GAAS,EAEb,GAAIkE,EACFoC,EAASpC,OADX,CAMA,OAASlE,EAAQoG,EAAOzG,QACA,OAAlB8G,EAAOzG,SAAqCa,IAAlB4F,EAAOzG,KACnCyG,EAAOzG,GAASoG,EAAOpG,IAK3BoG,EAASK,EAGLC,EA6BH,SAAcC,EAAYL,GAE/B,IAAIM,EAEJ,OAAOC,EAQP,SAASA,KAAWC,GAClB,MAAMC,EAAoBJ,EAAWhH,OAASmH,EAAWnH,OAEzD,IAAIsD,EAEA8D,GACFD,EAAW1B,KAAK4B,GAGlB,IACE/D,EAAS0D,EAAWM,MAAMjG,KAAM8F,EAClC,CAAE,MAAO5C,GAOP,GAAI6C,GAAqBH,EACvB,MAPqC,EAUvC,OAAOI,EAVgC,EAWzC,CAEKD,IACC9D,aAAkBiE,QACpBjE,EAAOkE,KAAKA,EAAMH,GACT/D,aAAkB1C,MAC3ByG,EAAK/D,GAELkE,EAAKlE,GAGX,CAMA,SAAS+D,EAAK9C,KAAUuC,GACjBG,IACHA,GAAS,EACTN,EAASpC,KAAUuC,GAEvB,CAOA,SAASU,EAAKrI,GACZkI,EAAK,KAAMlI,EACb,CACF,CA/FQsI,CAAKV,EAAIF,EAATY,IAAkBX,GAElBH,EAAS,QAASG,EAhBpB,CAkBF,CAjCAD,CAAK,QAASJ,EAkChB,EAhDuBiB,IAmDvB,SAAaC,GACX,GAA0B,mBAAfA,EACT,MAAM,IAAIxF,UACR,+CAAiDwF,GAKrD,OADArB,EAAIb,KAAKkC,GACFpB,CACT,GA1DA,OAAOA,CA2DT,CCjBA,SAAS,EAAMnG,GACb,OAAO,EAAMA,GAASA,EAAME,MAAQ,IAAM,EAAMF,GAASA,EAAMG,OACjE,CAMA,SAAS,EAASC,GAChB,OAAO,EAAMA,GAAOA,EAAIC,OAAS,IAAM,EAAMD,GAAOA,EAAIE,IAC1D,CAMA,SAAS,EAAMvB,GACb,OAAOA,GAA0B,iBAAVA,EAAqBA,EAAQ,CACtD,CCvEO,MAAM,UAAqByB,MAmBhC,WAAAhC,CAAYiC,EAAQC,EAAOC,GAEzB,MAAMC,EAAQ,CAAC,KAAM,MAErB,IAAIb,EAAW,CAEbM,MAAO,CAACH,KAAM,KAAMC,OAAQ,MAE5BG,IAAK,CAACJ,KAAM,KAAMC,OAAQ,OAU5B,GAPAU,QAEqB,iBAAVH,IACTC,EAASD,EACTA,OAAQI,GAGY,iBAAXH,EAAqB,CAC9B,MAAMV,EAAQU,EAAOI,QAAQ,MAEd,IAAXd,EACFW,EAAM,GAAKD,GAEXC,EAAM,GAAKD,EAAOK,MAAM,EAAGf,GAC3BW,EAAM,GAAKD,EAAOK,MAAMf,EAAQ,GAEpC,CDtBG,IAA2BlB,ECwB1B2B,IAEE,SAAUA,GAAS,aAAcA,EAC/BA,EAAMX,WAGRA,EAAWW,EAAMX,UAIZ,UAAWW,GAAS,QAASA,EAGpCX,EAAWW,GAGJ,SAAUA,GAAS,WAAYA,KAEtCX,EAASM,MAAQK,IAWrBO,KAAKrC,ODrDyBG,ECqDA2B,IDnDD,iBAAV3B,EAKjB,aAAcA,GAAS,SAAUA,EAC5B,EAASA,EAAMgB,UAIpB,UAAWhB,GAAS,QAASA,EACxB,EAASA,GAId,SAAUA,GAAS,WAAYA,EAC1B,EAAMA,GAIR,GAnBE,KCkDiC,MAOxCkC,KAAKC,QAA4B,iBAAXT,EAAsBA,EAAOS,QAAUT,EAU7DQ,KAAKE,MAAQ,GAES,iBAAXV,GAAuBA,EAAOU,QACvCF,KAAKE,MAAQV,EAAOU,OAUtBF,KAAKR,OAASQ,KAAKC,QAYnBD,KAAKG,MAOLH,KAAKf,KAAOH,EAASM,MAAMH,KAO3Be,KAAKd,OAASJ,EAASM,MAAMF,OAO7Bc,KAAKlB,SAAWA,EAOhBkB,KAAKI,OAAST,EAAM,GAOpBK,KAAKK,OAASV,EAAM,GAOpBK,KAAKM,KAYLN,KAAKO,OAOLP,KAAKQ,SAULR,KAAKS,IAOLT,KAAKU,IAEP,EAGF,EAAanE,UAAU+D,KAAO,GAC9B,EAAa/D,UAAUoB,KAAO,GAC9B,EAAapB,UAAUiD,OAAS,GAChC,EAAajD,UAAU0D,QAAU,GACjC,EAAa1D,UAAU2D,MAAQ,GAC/B,EAAa3D,UAAU4D,MAAQ,KAC/B,EAAa5D,UAAU2C,OAAS,KAChC,EAAa3C,UAAU0C,KAAO,KAC9B,EAAa1C,UAAU6D,OAAS,KAChC,EAAa7D,UAAU8D,OAAS,KAChC,EAAa9D,UAAUuC,SAAW,KC7K3B,MAAM,EAAO,CAAC8B,SAcrB,SAAkBD,EAAME,GACtB,QAAYhB,IAARgB,GAAoC,iBAARA,EAC9B,MAAM,IAAIC,UAAU,mCAGtB,EAAWH,GACX,IAIIK,EAJA5B,EAAQ,EACRC,GAAO,EACPL,EAAQ2B,EAAKhC,OAIjB,QAAYkB,IAARgB,GAAoC,IAAfA,EAAIlC,QAAgBkC,EAAIlC,OAASgC,EAAKhC,OAAQ,CACrE,KAAOK,KACL,GAA+B,KAA3B2B,EAAKM,WAAWjC,IAGlB,GAAIgC,EAAc,CAChB5B,EAAQJ,EAAQ,EAChB,KACF,OACSK,EAAM,IAGf2B,GAAe,EACf3B,EAAML,EAAQ,GAIlB,OAAOK,EAAM,EAAI,GAAKsB,EAAKZ,MAAMX,EAAOC,EAC1C,CAEA,GAAIwB,IAAQF,EACV,MAAO,GAGT,IAAIO,GAAoB,EACpBC,EAAWN,EAAIlC,OAAS,EAE5B,KAAOK,KACL,GAA+B,KAA3B2B,EAAKM,WAAWjC,IAGlB,GAAIgC,EAAc,CAChB5B,EAAQJ,EAAQ,EAChB,KACF,OAEIkC,EAAmB,IAGrBF,GAAe,EACfE,EAAmBlC,EAAQ,GAGzBmC,GAAY,IAEVR,EAAKM,WAAWjC,KAAW6B,EAAII,WAAWE,KACxCA,EAAW,IAGb9B,EAAML,IAKRmC,GAAY,EACZ9B,EAAM6B,IAMV9B,IAAUC,EACZA,EAAM6B,EACG7B,EAAM,IACfA,EAAMsB,EAAKhC,QAGb,OAAOgC,EAAKZ,MAAMX,EAAOC,EAC3B,EA9F6B,QAwG7B,SAAiBsB,GAGf,GAFA,EAAWA,GAES,IAAhBA,EAAKhC,OACP,MAAO,IAGT,IAGI0C,EAHAhC,GAAO,EACPL,EAAQ2B,EAAKhC,OAKjB,OAASK,GACP,GAA+B,KAA3B2B,EAAKM,WAAWjC,IAClB,GAAIqC,EAAgB,CAClBhC,EAAML,EACN,KACF,OACUqC,IAEVA,GAAiB,GAIrB,OAAOhC,EAAM,EACc,KAAvBsB,EAAKM,WAAW,GACd,IACA,IACM,IAAR5B,GAAoC,KAAvBsB,EAAKM,WAAW,GAC7B,KACAN,EAAKZ,MAAM,EAAGV,EACpB,EAxIsC,QAkJtC,SAAiBsB,GACf,EAAWA,GAEX,IASIU,EATArC,EAAQ2B,EAAKhC,OAEbU,GAAO,EACPkC,EAAY,EACZC,GAAY,EAGZC,EAAc,EAIlB,KAAOzC,KAAS,CACd,MAAM0C,EAAOf,EAAKM,WAAWjC,GAE7B,GAAa,KAAT0C,EAWArC,EAAM,IAGRgC,GAAiB,EACjBhC,EAAML,EAAQ,GAGH,KAAT0C,EAEEF,EAAW,EACbA,EAAWxC,EACc,IAAhByC,IACTA,EAAc,GAEPD,GAAY,IAGrBC,GAAe,QAzBf,GAAIJ,EAAgB,CAClBE,EAAYvC,EAAQ,EACpB,KACF,CAwBJ,CAEA,GACEwC,EAAW,GACXnC,EAAM,GAEU,IAAhBoC,GAEiB,IAAhBA,GAAqBD,IAAanC,EAAM,GAAKmC,IAAaD,EAAY,EAEvE,MAAO,GAGT,OAAOZ,EAAKZ,MAAMyB,EAAUnC,EAC9B,EA/M+C,KAyN/C,YAAiBuC,GACf,IAEIC,EAFA7C,GAAS,EAIb,OAASA,EAAQ4C,EAASjD,QACxB,EAAWiD,EAAS5C,IAEhB4C,EAAS5C,KACX6C,OACahC,IAAXgC,EAAuBD,EAAS5C,GAAS6C,EAAS,IAAMD,EAAS5C,IAIvE,YAAkBa,IAAXgC,EAAuB,IAahC,SAAmBlB,GACjB,EAAWA,GAEX,MAAMmB,EAAkC,KAAvBnB,EAAKM,WAAW,GAGjC,IAAInD,EAuBN,SAAyB6C,EAAMoB,GAC7B,IAMIL,EAEAM,EARAC,EAAS,GACTC,EAAoB,EACpBC,GAAa,EACbC,EAAO,EACPpD,GAAS,EAMb,OAASA,GAAS2B,EAAKhC,QAAQ,CAC7B,GAAIK,EAAQ2B,EAAKhC,OACf+C,EAAOf,EAAKM,WAAWjC,OAClB,IAAa,KAAT0C,EACT,MAEAA,EAAO,EACT,CAEA,GAAa,KAATA,EAAuB,CACzB,GAAIS,IAAcnD,EAAQ,GAAc,IAAToD,QAExB,GAAID,IAAcnD,EAAQ,GAAc,IAAToD,EAAY,CAChD,GACEH,EAAOtD,OAAS,GACM,IAAtBuD,GACyC,KAAzCD,EAAOhB,WAAWgB,EAAOtD,OAAS,IACO,KAAzCsD,EAAOhB,WAAWgB,EAAOtD,OAAS,GAElC,GAAIsD,EAAOtD,OAAS,GAGlB,GAFAqD,EAAiBC,EAAOI,YAAY,KAEhCL,IAAmBC,EAAOtD,OAAS,EAAG,CACpCqD,EAAiB,GACnBC,EAAS,GACTC,EAAoB,IAEpBD,EAASA,EAAOlC,MAAM,EAAGiC,GACzBE,EAAoBD,EAAOtD,OAAS,EAAIsD,EAAOI,YAAY,MAG7DF,EAAYnD,EACZoD,EAAO,EACP,QACF,OACK,GAAIH,EAAOtD,OAAS,EAAG,CAC5BsD,EAAS,GACTC,EAAoB,EACpBC,EAAYnD,EACZoD,EAAO,EACP,QACF,CAGEL,IACFE,EAASA,EAAOtD,OAAS,EAAIsD,EAAS,MAAQ,KAC9CC,EAAoB,EAExB,MACMD,EAAOtD,OAAS,EAClBsD,GAAU,IAAMtB,EAAKZ,MAAMoC,EAAY,EAAGnD,GAE1CiD,EAAStB,EAAKZ,MAAMoC,EAAY,EAAGnD,GAGrCkD,EAAoBlD,EAAQmD,EAAY,EAG1CA,EAAYnD,EACZoD,EAAO,CACT,MAAoB,KAATV,GAAyBU,GAAQ,EAC1CA,IAEAA,GAAQ,CAEZ,CAEA,OAAOH,CACT,CAtGc,CAAgBtB,GAAOmB,GAEd,IAAjBhE,EAAMa,QAAiBmD,IACzBhE,EAAQ,KAGNA,EAAMa,OAAS,GAA0C,KAArCgC,EAAKM,WAAWN,EAAKhC,OAAS,KACpDb,GAAS,KAGX,OAAOgE,EAAW,IAAMhE,EAAQA,CAClC,CA9BsC,CAAU+D,EAChD,EAxOqD,SA0WrD,SAAS,EAAWlB,GAClB,GAAoB,iBAATA,EACT,MAAM,IAAIG,UACR,mCAAqC2B,KAAKC,UAAU/B,GAG1D,CChaO,MAAM,EAAO,CAACiC,IAErB,WACE,MAAO,GACT,GCoBO,SAAS,EAAME,GACpB,OACoB,OAAlBA,GACyB,iBAAlBA,GAEPA,EAAcC,MAEdD,EAAcpD,MAElB,CCxBO,SAAS,EAAUiB,GACxB,GAAoB,iBAATA,EACTA,EAAO,IAAIsC,IAAItC,QACV,IAAK,EAAMA,GAAO,CAEvB,MAAMuC,EAAQ,IAAIpC,UAChB,+EACEH,EACA,KAGJ,MADAuC,EAAMxB,KAAO,uBACPwB,CACR,CAEA,GAAsB,UAAlBvC,EAAKwC,SAAsB,CAE7B,MAAMD,EAAQ,IAAIpC,UAAU,kCAE5B,MADAoC,EAAMxB,KAAO,yBACPwB,CACR,CAEA,OAWF,SAA6BzC,GAC3B,GAAqB,KAAjBA,EAAI2C,SAAiB,CAEvB,MAAMF,EAAQ,IAAIpC,UAChB,wDAGF,MADAoC,EAAMxB,KAAO,4BACPwB,CACR,CAEA,MAAMG,EAAW5C,EAAI4C,SACrB,IAAIrE,GAAS,EAEb,OAASA,EAAQqE,EAAS1E,QACxB,GACiC,KAA/B0E,EAASpC,WAAWjC,IACe,KAAnCqE,EAASpC,WAAWjC,EAAQ,GAC5B,CACA,MAAMsE,EAAQD,EAASpC,WAAWjC,EAAQ,GAC1C,GAAc,KAAVsE,GAAoC,MAAVA,EAAyB,CAErD,MAAMJ,EAAQ,IAAIpC,UAChB,uDAGF,MADAoC,EAAMxB,KAAO,4BACPwB,CACR,CACF,CAGF,OAAOK,mBAAmBF,EAC5B,CA1CS,CAAoB1C,EAC7B,CCgEA,MAAM,EAAQ,CAAC,UAAW,OAAQ,WAAY,OAAQ,UAAW,WAE1D,MAAM,EAuBX,WAAApD,CAAYO,GAEV,IAAIJ,EAKFA,EAHGI,EAEuB,iBAAVA,GAoYtB,SAAgBA,GACd,OAAO,EAAWA,EACpB,CAtY4C,CAAOA,GACnC,CAACA,SACF,EAAMA,GACL,CAAC6C,KAAM7C,GAEPA,EANA,CAAC,EAiBbkC,KAAK4D,KAAO,CAAC,EAOb5D,KAAK6D,SAAW,GAShB7D,KAAK8D,QAAU,GAOf9D,KAAK4C,IAAM,EAAKA,MAQhB5C,KAAKlC,MAYLkC,KAAK+D,OAUL/D,KAAKiC,OAULjC,KAAKgE,IAIL,IAkBIC,EAlBAjF,GAAS,EAEb,OAASA,EAAQ,EAAML,QAAQ,CAC7B,MAAMsF,EAAO,EAAMjF,GAKjBiF,KAAQvG,QACUmC,IAAlBnC,EAAQuG,IACU,OAAlBvG,EAAQuG,KAGRjE,KAAKiE,GAAiB,YAATA,EAAqB,IAAIvG,EAAQuG,IAASvG,EAAQuG,GAEnE,CAMA,IAAKA,KAAQvG,EAEN,EAAMwG,SAASD,KAElBjE,KAAKiE,GAAQvG,EAAQuG,GAG3B,CAOA,QAAItD,GACF,OAAOX,KAAK8D,QAAQ9D,KAAK8D,QAAQnF,OAAS,EAC5C,CAWA,QAAIgC,CAAKA,GACH,EAAMA,KACRA,EAAO,EAAUA,IAGnB,EAAeA,EAAM,QAEjBX,KAAKW,OAASA,GAChBX,KAAK8D,QAAQM,KAAKzD,EAEtB,CAKA,WAAIS,GACF,MAA4B,iBAAdpB,KAAKW,KAAoB,EAAKS,QAAQpB,KAAKW,WAAQd,CACnE,CAOA,WAAIuB,CAAQA,GACV,EAAWpB,KAAKY,SAAU,WAC1BZ,KAAKW,KAAO,EAAKgB,KAAKP,GAAW,GAAIpB,KAAKY,SAC5C,CAKA,YAAIA,GACF,MAA4B,iBAAdZ,KAAKW,KAAoB,EAAKC,SAASZ,KAAKW,WAAQd,CACpE,CASA,YAAIe,CAASA,GACX,EAAeA,EAAU,YACzB,EAAWA,EAAU,YACrBZ,KAAKW,KAAO,EAAKgB,KAAK3B,KAAKoB,SAAW,GAAIR,EAC5C,CAKA,WAAIU,GACF,MAA4B,iBAAdtB,KAAKW,KAAoB,EAAKW,QAAQtB,KAAKW,WAAQd,CACnE,CASA,WAAIyB,CAAQA,GAIV,GAHA,EAAWA,EAAS,WACpB,EAAWtB,KAAKoB,QAAS,WAErBE,EAAS,CACX,GAA8B,KAA1BA,EAAQL,WAAW,GACrB,MAAM,IAAI1B,MAAM,iCAGlB,GAAI+B,EAAQ4C,SAAS,IAAK,GACxB,MAAM,IAAI3E,MAAM,yCAEpB,CAEAS,KAAKW,KAAO,EAAKgB,KAAK3B,KAAKoB,QAASpB,KAAKsE,MAAQhD,GAAW,IAC9D,CAKA,QAAIgD,GACF,MAA4B,iBAAdtE,KAAKW,KACf,EAAKC,SAASZ,KAAKW,KAAMX,KAAKsB,cAC9BzB,CACN,CASA,QAAIyE,CAAKA,GACP,EAAeA,EAAM,QACrB,EAAWA,EAAM,QACjBtE,KAAKW,KAAO,EAAKgB,KAAK3B,KAAKoB,SAAW,GAAIkD,GAAQtE,KAAKsB,SAAW,IACpE,CAWA,QAAA5E,CAAS6H,GACP,OAAQvE,KAAKlC,OAAS,IAAIpB,SAAS6H,QAAY1E,EACjD,CAkBA,OAAAI,CAAQT,EAAQC,EAAOC,GACrB,MAAMO,EAAU,IAAI,EAAaT,EAAQC,EAAOC,GAWhD,OATIM,KAAKW,OACPV,EAAQtC,KAAOqC,KAAKW,KAAO,IAAMV,EAAQtC,KACzCsC,EAAQK,KAAON,KAAKW,MAGtBV,EAAQE,OAAQ,EAEhBH,KAAK6D,SAASO,KAAKnE,GAEZA,CACT,CAkBA,IAAAuE,CAAKhF,EAAQC,EAAOC,GAClB,MAAMO,EAAUD,KAAKC,QAAQT,EAAQC,EAAOC,GAI5C,OAFAO,EAAQE,MAAQ,KAETF,CACT,CAsBA,IAAAwE,CAAKjF,EAAQC,EAAOC,GAClB,MAAMO,EAAUD,KAAKC,QAAQT,EAAQC,EAAOC,GAI5C,MAFAO,EAAQE,OAAQ,EAEVF,CACR,EAaF,SAAS,EAAWyE,EAAM/G,GACxB,GAAI+G,GAAQA,EAAKR,SAAS,EAAK1B,KAC7B,MAAM,IAAIjD,MACR,IAAM5B,EAAO,uCAAyC,EAAK6E,IAAM,IAGvE,CAYA,SAAS,EAAekC,EAAM/G,GAC5B,IAAK+G,EACH,MAAM,IAAInF,MAAM,IAAM5B,EAAO,oBAEjC,CAYA,SAAS,EAAWgD,EAAMhD,GACxB,IAAKgD,EACH,MAAM,IAAIpB,MAAM,YAAc5B,EAAO,kCAEzC,CC/dO,MAAM4I,EAQb,SAASC,IACP,MAAMC,EAAezB,IAEf0B,EAAY,GAElB,IAEIC,EAFAC,EAAY,CAAC,EAGbC,GAAe,EA2BnB,OAvBAC,EAAUlD,KA6CV,SAAcxG,EAAKU,GACjB,GAAmB,iBAARV,EAET,OAAyB,IAArBqB,UAAUE,QACZoI,EAAe,OAAQJ,GACvBC,EAAUxJ,GAAOU,EACVgJ,GAIDE,EAAI/J,KAAK2J,EAAWxJ,IAAQwJ,EAAUxJ,IAAS,KAIzD,GAAIA,EAGF,OAFA2J,EAAe,OAAQJ,GACvBC,EAAYxJ,EACL0J,EAIT,OAAOF,CACT,EAlEAE,EAAUG,YAASpH,EACnBiH,EAAUI,cAAWrH,EAGrBiH,EAAUK,OAiEV,WACE,GAAIR,EACF,OAAOG,EAGT,OAASD,EAAcH,EAAU/H,QAAQ,CACvC,MAAOyI,KAAa1J,GAAWgJ,EAAUG,GAEzC,IAAmB,IAAfnJ,EAAQ,GACV,UAGiB,IAAfA,EAAQ,KACVA,EAAQ,QAAKmC,GAIf,MAAMwH,EAAcD,EAASnK,KAAK6J,KAAcpJ,GAErB,mBAAhB2J,GACTZ,EAAaJ,IAAIgB,EAErB,CAKA,OAHAV,GAAS,EACTE,EAAcS,OAAOC,kBAEdT,CACT,EA1FAA,EAAUJ,UAAYA,EAEtBI,EAAUT,IA+FV,SAAavI,KAAUJ,GAErB,IAAI8J,EAIJ,GAFAT,EAAe,MAAOJ,GAElB7I,cAEG,GAAqB,mBAAVA,EAChB2J,EAAU3J,KAAUJ,OACf,IAAqB,iBAAVI,EAOhB,MAAM,IAAIgD,UAAU,+BAAiChD,EAAQ,KANzDd,MAAMF,QAAQgB,GAChB4J,EAAQ5J,GAER6J,EAAU7J,EAId,CAEI0J,IACFZ,EAAUY,SAAWlL,OAAOsL,OAAOhB,EAAUY,UAAY,CAAC,EAAGA,IAG/D,OAAOV,EAMP,SAASe,EAAI/J,GACX,GAAqB,mBAAVA,EACT2J,EAAU3J,OACL,IAAqB,iBAAVA,EAQhB,MAAM,IAAIgD,UAAU,+BAAiChD,EAAQ,KAP7D,GAAId,MAAMF,QAAQgB,GAAQ,CACxB,MAAOgK,KAAWpK,GAAWI,EAC7B2J,EAAUK,KAAWpK,EACvB,MACEiK,EAAU7J,EAId,CACF,CAMA,SAAS6J,EAAU1F,GACjByF,EAAQzF,EAAO8F,SAEX9F,EAAOuF,WACTA,EAAWlL,OAAOsL,OAAOJ,GAAY,CAAC,EAAGvF,EAAOuF,UAEpD,CAMA,SAASE,EAAQK,GACf,IAAI/I,GAAS,EAEb,GAAI+I,aAEG,KAAI/K,MAAMF,QAAQiL,GAMvB,MAAM,IAAIjH,UAAU,oCAAsCiH,EAAU,KALpE,OAAS/I,EAAQ+I,EAAQpJ,QAAQ,CAE/BkJ,EADcE,EAAQ/I,GAExB,CAGF,CACF,CAOA,SAASyI,EAAUK,EAAQhK,GACzB,IAEIkK,EAFAhJ,GAAS,EAIb,OAASA,EAAQ0H,EAAU/H,QACzB,GAAI+H,EAAU1H,GAAO,KAAO8I,EAAQ,CAClCE,EAAQtB,EAAU1H,GAClB,KACF,CAGEgJ,GACE,EAAWA,EAAM,KAAO,EAAWlK,KACrCA,EAAQM,GAAO,EAAM4J,EAAM,GAAIlK,IAGjCkK,EAAM,GAAKlK,GAGX4I,EAAUtC,KAAK,IAAI3F,WAEvB,CACF,EApMAqI,EAAUmB,MAuMV,SAAeC,GACbpB,EAAUK,SACV,MAAM7G,EAAO6H,EAAMD,GACbjB,EAASH,EAAUG,OAGzB,GAFAmB,EAAa,QAASnB,GAElBoB,EAAQpB,EAAQ,SAElB,OAAO,IAAIA,EAAOqB,OAAOhI,GAAOA,GAAM2H,QAIxC,OAAOhB,EAAOqB,OAAOhI,GAAOA,EAC9B,EAnNAwG,EAAUpE,UAsNV,SAAmB6F,EAAML,GACvBpB,EAAUK,SACV,MAAM7G,EAAO6H,EAAMD,GACbhB,EAAWJ,EAAUI,SAI3B,GAHAsB,EAAe,YAAatB,GAC5BuB,EAAWF,GAEPF,EAAQnB,EAAU,WAEpB,OAAO,IAAIA,EAASqB,EAAMjI,GAAMoI,UAIlC,OAAOxB,EAASqB,EAAMjI,EACxB,EAlOAwG,EAAU3B,IA0OV,SAAaoD,EAAML,EAAK5C,GACtBmD,EAAWF,GACXzB,EAAUK,SAEL7B,GAA2B,mBAAR4C,IACtB5C,EAAW4C,EACXA,OAAMrI,GAGR,IAAKyF,EACH,OAAO,IAAIY,QAAQyC,GAUrB,SAASA,EAASC,EAASC,GAUzB,SAAS7C,EAAK9C,EAAO4F,EAAMxI,GACzBwI,EAAOA,GAAQP,EACXrF,EACF2F,EAAO3F,GACE0F,EACTA,EAAQE,GAGRxD,EAAS,KAAMwD,EAAMxI,EAEzB,CAlBAmG,EAAatB,IAAIoD,EAAMJ,EAAMD,GAAMlC,EAmBrC,CA5BA2C,EAAS,KAAMrD,EA6BjB,EAnRAwB,EAAUiC,QAsRV,SAAiBR,EAAMjI,GAErB,IAAI2B,EAEA+G,EAOJ,OALAlC,EAAU3B,IAAIoD,EAAMjI,EAAM0F,GAE1BiD,EAAW,UAAW,MAAOD,GAGtB/G,EAOP,SAAS+D,EAAK9C,EAAO4F,GACnBnE,EAAKzB,GACLjB,EAAS6G,EACTE,GAAW,CACb,CACF,EA3SAlC,EAAUoC,QAkTV,SAAiBhB,EAAK5C,GAKpB,GAJAwB,EAAUK,SACViB,EAAa,UAAWtB,EAAUG,QAClCuB,EAAe,UAAW1B,EAAUI,WAE/B5B,EACH,OAAO,IAAIY,QAAQyC,GAUrB,SAASA,EAASC,EAASC,GACzB,MAAMvI,EAAO6H,EAAMD,GA0BnB,SAASlC,EAAK9C,EAAO5C,GACf4C,IAAU5C,EACZuI,EAAO3F,GACE0F,EACTA,EAAQtI,GAGRgF,EAAS,KAAMhF,EAEnB,CAjCAwG,EAAU3B,IAAI2B,EAAUmB,MAAM3H,GAAOA,GAAM,CAAC4C,EAAO4F,EAAMxI,KACvD,IAAI4C,GAAU4F,GAASxI,EAEhB,CAEL,MAAM2B,EAAS6E,EAAUpE,UAAUoG,EAAMxI,GAErC2B,UAsMY,iBADInE,EAnMYmE,IAoMJ,EAASnE,GAnMnCwC,EAAKxC,MAAQmE,EAEb3B,EAAK2B,OAASA,GAGhB+D,EAAK9C,EAAO5C,EACd,MAdE0F,EAAK9C,GA0Mf,IAA8BpF,CA5LtB,GAkBJ,CA5CA6K,EAAS,KAAMrD,EA6CjB,EAvWAwB,EAAUqC,YA0WV,SAAqBjB,GAEnB,IAAIc,EAEJlC,EAAUK,SACViB,EAAa,cAAetB,EAAUG,QACtCuB,EAAe,cAAe1B,EAAUI,UAExC,MAAM5G,EAAO6H,EAAMD,GAMnB,OAJApB,EAAUoC,QAAQ5I,EAAM0F,GAExBiD,EAAW,cAAe,UAAWD,GAE9B1I,EAMP,SAAS0F,EAAK9C,GACZ8F,GAAW,EACXrE,EAAKzB,EACP,CACF,EA/XO4D,EAIP,SAASA,IACP,MAAMsC,EAAc5C,IACpB,IAAIxH,GAAS,EAEb,OAASA,EAAQ0H,EAAU/H,QACzByK,EAAY/C,OAAOK,EAAU1H,IAK/B,OAFAoK,EAAYxF,KAAKxF,GAAO,EAAM,CAAC,EAAGwI,IAE3BwC,CACT,CAiXF,CA3auB5C,GAAOW,SAExBH,EAAM,CAAC,EAAExK,eAkbf,SAAS6L,EAAQvK,EAAOH,GACtB,MACmB,mBAAVG,GAGPA,EAAMvB,YAeV,SAAcuB,GAEZ,IAAIV,EAEJ,IAAKA,KAAOU,EACV,GAAIkJ,EAAI/J,KAAKa,EAAOV,GAClB,OAAO,EAIX,OAAO,CACT,CArBKiM,CAAKvL,EAAMvB,YAAcoB,KAAQG,EAAMvB,UAE5C,CA4BA,SAAS6L,EAAazK,EAAMG,GAC1B,GAAqB,mBAAVA,EACT,MAAM,IAAIgD,UAAU,WAAanD,EAAO,qBAE5C,CASA,SAAS6K,EAAe7K,EAAMG,GAC5B,GAAqB,mBAAVA,EACT,MAAM,IAAIgD,UAAU,WAAanD,EAAO,uBAE5C,CASA,SAASoJ,EAAepJ,EAAMgJ,GAC5B,GAAIA,EACF,MAAM,IAAIpH,MACR,gBACE5B,EACA,mHAGR,CAQA,SAAS8K,EAAWF,GAGlB,IAAK,EAAWA,IAA8B,iBAAdA,EAAKe,KACnC,MAAM,IAAIxI,UAAU,uBAAyByH,EAAO,IAGxD,CAUA,SAASU,EAAWtL,EAAM4L,EAAWP,GACnC,IAAKA,EACH,MAAM,IAAIzJ,MACR,IAAM5B,EAAO,0BAA4B4L,EAAY,YAG3D,CAMA,SAASpB,EAAMrK,GACb,OAOF,SAAyBA,GACvB,OAAO0L,QACL1L,GACmB,iBAAVA,GACP,YAAaA,GACb,aAAcA,EAEpB,CAdS2L,CAAgB3L,GAASA,EAAQ,IAAI,EAAMA,EACpD,CCrjBA,MAAM4L,EAAe,CAAC,EAuCtB,SAASC,EAAI7L,EAAO8L,EAAiBC,GACnC,GAqDF,SAAc/L,GACZ,OAAO0L,QAAQ1L,GAA0B,iBAAVA,EACjC,CAvDMyK,CAAKzK,GAAQ,CACf,GAAI,UAAWA,EACb,MAAsB,SAAfA,EAAMwL,MAAoBO,EAAmB/L,EAAMA,MAAX,GAGjD,GAAI8L,GAAmB,QAAS9L,GAASA,EAAMgM,IAC7C,OAAOhM,EAAMgM,IAGf,GAAI,aAAchM,EAChB,OAAO,EAAIA,EAAMiM,SAAUH,EAAiBC,EAEhD,CAEA,OAAI7M,MAAMF,QAAQgB,GACT,EAAIA,EAAO8L,EAAiBC,GAG9B,EACT,CAcA,SAAS,EAAIzE,EAAQwE,EAAiBC,GAEpC,MAAM5H,EAAS,GACf,IAAIjD,GAAS,EAEb,OAASA,EAAQoG,EAAOzG,QACtBsD,EAAOjD,GAAS2K,EAAIvE,EAAOpG,GAAQ4K,EAAiBC,GAGtD,OAAO5H,EAAON,KAAK,GACrB,CCzEO,SAASqI,EAAOC,EAAM7K,EAAO8K,EAAQC,GAC1C,MAAM9K,EAAM4K,EAAKtL,OACjB,IAEImH,EAFAsE,EAAa,EAajB,GAPEhL,EADEA,EAAQ,GACDA,EAAQC,EAAM,EAAIA,EAAMD,EAEzBA,EAAQC,EAAMA,EAAMD,EAE9B8K,EAASA,EAAS,EAAIA,EAAS,EAG3BC,EAAMxL,OAAS,IACjBmH,EAAa9I,MAAMqN,KAAKF,GACxBrE,EAAWwE,QAAQlL,EAAO8K,GAE1BD,EAAKD,UAAUlE,QAMf,IAHIoE,GAAQD,EAAKD,OAAO5K,EAAO8K,GAGxBE,EAAaD,EAAMxL,QACxBmH,EAAaqE,EAAMpK,MAAMqK,EAAYA,EAAa,KAClDtE,EAAWwE,QAAQlL,EAAO,GAE1B6K,EAAKD,UAAUlE,GACfsE,GAAc,IACdhL,GAAS,GAGf,CAkBO,SAASgF,EAAK6F,EAAME,GACzB,OAAIF,EAAKtL,OAAS,GAChBqL,EAAOC,EAAMA,EAAKtL,OAAQ,EAAGwL,GACtBF,GAEFE,CACT,CCvEA,MAAM,GAAiB,CAAC,EAAE3N,eA+B1B,SAAS+N,GAAgBC,EAAKC,GAE5B,IAAIC,EAEJ,IAAKA,KAAQD,EAAW,CACtB,MAEME,GAFQ,GAAe1N,KAAKuN,EAAKE,GAAQF,EAAIE,QAAQ7K,KAEpC2K,EAAIE,GAAQ,CAAC,GAE9BE,EAAQH,EAAUC,GAExB,IAAIhJ,EAEJ,GAAIkJ,EACF,IAAKlJ,KAAQkJ,EAAO,CACb,GAAe3N,KAAK0N,EAAMjJ,KAAOiJ,EAAKjJ,GAAQ,IACnD,MAAM5D,EAAQ8M,EAAMlJ,GACpBmJ,GAEEF,EAAKjJ,GACL1E,MAAMF,QAAQgB,GAASA,EAAQA,EAAQ,CAACA,GAAS,GAErD,CAEJ,CACF,CAUA,SAAS+M,GAAWC,EAAUb,GAC5B,IAAIjL,GAAS,EAEb,MAAM+L,EAAS,GAEf,OAAS/L,EAAQiL,EAAKtL,SAEE,UAApBsL,EAAKjL,GAAO6I,IAAkBiD,EAAWC,GAAQ3G,KAAK6F,EAAKjL,IAG/DgL,EAAOc,EAAU,EAAG,EAAGC,EACzB,CC5EO,MCaMC,GAAaC,GAAW,YAcxBC,GAAoBD,GAAW,cAuB/BE,GAAaF,GAAW,uBAa9B,SAASG,GAAa1J,GAC3B,OAGW,OAATA,IAAkBA,EAAO,IAAe,MAATA,EAEnC,CAaO,MAAM2J,GAAaJ,GAAW,MAoBxBK,GAAgBL,GAAW,cAe3BM,GAAmBN,GAAW,kBAiBpC,SAASO,GAAmB9J,GACjC,OAAgB,OAATA,GAAiBA,GAAQ,CAClC,CAWO,SAAS+J,GAA0B/J,GACxC,OAAgB,OAATA,IAAkBA,EAAO,GAAc,KAATA,EACvC,CAiBO,SAASgK,GAAchK,GAC5B,OAAiB,IAAVA,IAAyB,IAAVA,GAAwB,KAATA,CACvC,CAuBO,MAAMiK,GAAqBV,GD9LhC,wwCCoNWW,GAAoBX,GAAW,MAQ5C,SAASA,GAAWY,GAClB,OAUA,SAAenK,GACb,OAAgB,OAATA,GAAiBmK,EAAMC,KAAKxD,OAAOyD,aAAarK,GACzD,CACF,CC3MO,SAASsK,GAAaC,EAASC,EAAI5C,EAAM6C,GAC9C,MAAMC,EAAQD,EAAMA,EAAM,EAAI7E,OAAOC,kBACrC,IAAI8E,EAAO,EACX,OAGA,SAAe3K,GACb,GAAIgK,GAAchK,GAEhB,OADAuK,EAAQK,MAAMhD,GACPiD,EAAO7K,GAEhB,OAAOwK,EAAGxK,EACZ,EAGA,SAAS6K,EAAO7K,GACd,OAAIgK,GAAchK,IAAS2K,IAASD,GAClCH,EAAQO,QAAQ9K,GACT6K,IAETN,EAAQQ,KAAKnD,GACN4C,EAAGxK,GACZ,CACF,CCtDO,MAAMgL,GAAU,CACrBC,SAOF,SAA2BV,GACzB,MAAMW,EAAeX,EAAQY,QAC3B7M,KAAK8M,OAAOjC,WAAWkC,gBASzB,SAAoCrL,GAClC,GAAa,OAATA,EAEF,YADAuK,EAAQO,QAAQ9K,GAMlB,OAHAuK,EAAQK,MAAM,cACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,cACNT,GAAaC,EAASW,EAAc,aAC7C,IAGA,SAA0BlL,GAExB,OADAuK,EAAQK,MAAM,aACPU,EAAUtL,EACnB,IAnBA,IAAIuL,EACJ,OAAOL,EAqBP,SAASI,EAAUtL,GACjB,MAAMwL,EAAQjB,EAAQK,MAAM,YAAa,CACvCa,YAAa,OACbF,aAMF,OAJIA,IACFA,EAASzH,KAAO0H,GAElBD,EAAWC,EACJtJ,EAAKlC,EACd,CAGA,SAASkC,EAAKlC,GACZ,OAAa,OAATA,GACFuK,EAAQQ,KAAK,aACbR,EAAQQ,KAAK,kBACbR,EAAQO,QAAQ9K,IAGd8J,GAAmB9J,IACrBuK,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,aACNO,IAITf,EAAQO,QAAQ9K,GACTkC,EACT,CACF,GC1DO,MAAM,GAAW,CACtB+I,SAYF,SAA4BV,GAC1B,MAAMmB,EAAOpN,KAEPE,EAAQ,GACd,IAEImN,EAEAC,EAEAC,EANAC,EAAY,EAOhB,OAAOpO,EAGP,SAASA,EAAMsC,GAWb,GAAI8L,EAAYtN,EAAMvB,OAAQ,CAC5B,MAAM8O,EAAOvN,EAAMsN,GAEnB,OADAJ,EAAKM,eAAiBD,EAAK,GACpBxB,EAAQY,QACbY,EAAK,GAAGE,aACRC,EACAC,EAHK5B,CAILvK,EACJ,CAGA,OAAOmM,EAAmBnM,EAC5B,CAGA,SAASkM,EAAiBlM,GAMxB,GALA8L,IAKIJ,EAAKM,eAAeI,WAAY,CAClCV,EAAKM,eAAeI,gBAAajO,EAC7BwN,GACFU,IAKF,MAAMC,EAAmBZ,EAAKa,OAAOtP,OACrC,IAEII,EAFAmP,EAAkBF,EAKtB,KAAOE,KACL,GACsC,SAApCd,EAAKa,OAAOC,GAAiB,IACY,cAAzCd,EAAKa,OAAOC,GAAiB,GAAG5E,KAChC,CACAvK,EAAQqO,EAAKa,OAAOC,GAAiB,GAAG7O,IACxC,KACF,CAEF8O,EAAeX,GAGf,IAAIxO,EAAQgP,EACZ,KAAOhP,EAAQoO,EAAKa,OAAOtP,QACzByO,EAAKa,OAAOjP,GAAO,GAAGK,IAAM/C,OAAOsL,OAAO,CAAC,EAAG7I,GAC9CC,IAaF,OATAgL,EACEoD,EAAKa,OACLC,EAAkB,EAClB,EACAd,EAAKa,OAAOlO,MAAMiO,IAIpBZ,EAAKa,OAAOtP,OAASK,EACd6O,EAAmBnM,EAC5B,CACA,OAAOtC,EAAMsC,EACf,CAGA,SAASmM,EAAmBnM,GAM1B,GAAI8L,IAActN,EAAMvB,OAAQ,CAI9B,IAAK0O,EACH,OAAOe,EAAkB1M,GAM3B,GAAI2L,EAAUgB,kBAAoBhB,EAAUgB,iBAAiBC,SAC3D,OAAOC,EAAU7M,GAQnB0L,EAAKoB,UAAYhF,QACf6D,EAAUgB,mBAAqBhB,EAAUoB,8BAE7C,CAIA,OADArB,EAAKM,eAAiB,CAAC,EAChBzB,EAAQyC,MACbC,GACAC,EACAC,EAHK5C,CAILvK,EACJ,CAGA,SAASkN,EAAqBlN,GAG5B,OAFI2L,GAAWU,IACfI,EAAeX,GACRY,EAAkB1M,EAC3B,CAGA,SAASmN,EAAsBnN,GAG7B,OAFA0L,EAAKN,OAAOgC,KAAK1B,EAAK2B,MAAM9P,MAAQuO,IAActN,EAAMvB,OACxD4O,EAAkBH,EAAK2B,MAAMC,OACtBT,EAAU7M,EACnB,CAGA,SAAS0M,EAAkB1M,GAGzB,OADA0L,EAAKM,eAAiB,CAAC,EAChBzB,EAAQY,QACb8B,GACAM,EACAV,EAHKtC,CAILvK,EACJ,CAGA,SAASuN,EAAkBvN,GAIzB,OAHA8L,IACAtN,EAAMkE,KAAK,CAACgJ,EAAKiB,iBAAkBjB,EAAKM,iBAEjCU,EAAkB1M,EAC3B,CAGA,SAAS6M,EAAU7M,GACjB,OAAa,OAATA,GACE2L,GAAWU,IACfI,EAAe,QACflC,EAAQO,QAAQ9K,KAGlB2L,EAAYA,GAAaD,EAAKN,OAAOoC,KAAK9B,EAAK2B,OAC/C9C,EAAQK,MAAM,YAAa,CACzBa,YAAa,OACbF,SAAUK,EACV6B,WAAY9B,IAEP+B,EAAa1N,GACtB,CAGA,SAAS0N,EAAa1N,GACpB,OAAa,OAATA,GACF2N,EAAapD,EAAQQ,KAAK,cAAc,GACxC0B,EAAe,QACflC,EAAQO,QAAQ9K,IAGd8J,GAAmB9J,IACrBuK,EAAQO,QAAQ9K,GAChB2N,EAAapD,EAAQQ,KAAK,cAE1Be,EAAY,EACZJ,EAAKoB,eAAY3O,EACVT,IAET6M,EAAQO,QAAQ9K,GACT0N,EACT,CAOA,SAASC,EAAanC,EAAOoC,GAC3B,MAAMC,EAASnC,EAAKoC,YAAYtC,GAyChC,GAxCIoC,GAAKC,EAAOnL,KAAK,MACrB8I,EAAMD,SAAWK,EACbA,IAAYA,EAAW9H,KAAO0H,GAClCI,EAAaJ,EACbG,EAAUoC,WAAWvC,EAAM9N,OAC3BiO,EAAUqC,MAAMH,GAmCZnC,EAAKN,OAAOgC,KAAK5B,EAAM9N,MAAMH,MAAO,CACtC,IAAID,EAAQqO,EAAUY,OAAOtP,OAC7B,KAAOK,KACL,GAEEqO,EAAUY,OAAOjP,GAAO,GAAGI,MAAM4P,OAASzB,KAExCF,EAAUY,OAAOjP,GAAO,GAAGK,KAE3BgO,EAAUY,OAAOjP,GAAO,GAAGK,IAAI2P,OAASzB,GAI1C,OAMJ,MAAMS,EAAmBZ,EAAKa,OAAOtP,OACrC,IAEIgR,EAEA5Q,EAJAmP,EAAkBF,EAOtB,KAAOE,KACL,GACsC,SAApCd,EAAKa,OAAOC,GAAiB,IACY,cAAzCd,EAAKa,OAAOC,GAAiB,GAAG5E,KAChC,CACA,GAAIqG,EAAM,CACR5Q,EAAQqO,EAAKa,OAAOC,GAAiB,GAAG7O,IACxC,KACF,CACAsQ,GAAO,CACT,CAMF,IAJAxB,EAAeX,GAGfxO,EAAQgP,EACDhP,EAAQoO,EAAKa,OAAOtP,QACzByO,EAAKa,OAAOjP,GAAO,GAAGK,IAAM/C,OAAOsL,OAAO,CAAC,EAAG7I,GAC9CC,IAIFgL,EACEoD,EAAKa,OACLC,EAAkB,EAClB,EACAd,EAAKa,OAAOlO,MAAMiO,IAIpBZ,EAAKa,OAAOtP,OAASK,CACvB,CACF,CAMA,SAASmP,EAAe9B,GACtB,IAAIrN,EAAQkB,EAAMvB,OAGlB,KAAOK,KAAUqN,GAAM,CACrB,MAAMrE,EAAQ9H,EAAMlB,GACpBoO,EAAKM,eAAiB1F,EAAM,GAC5BA,EAAM,GAAGyE,KAAKxP,KAAKmQ,EAAMnB,EAC3B,CACA/L,EAAMvB,OAAS0N,CACjB,CACA,SAAS0B,IACPV,EAAUqC,MAAM,CAAC,OACjBpC,OAAazN,EACbwN,OAAYxN,EACZuN,EAAKM,eAAeI,gBAAajO,CACnC,CACF,GArVM8O,GAAqB,CACzBhC,SA0VF,SAA2BV,EAASC,EAAI0D,GAGtC,OAAO5D,GACLC,EACAA,EAAQY,QAAQ7M,KAAK8M,OAAOjC,WAAWgF,SAAU3D,EAAI0D,GACrD,aACA5P,KAAK8M,OAAOjC,WAAWiF,QAAQC,KAAK7L,SAAS,qBAAkBrE,EAAY,EAE/E,GCnXO,MAAMmQ,GAAY,CACvBrD,SAQF,SAA2BV,EAASC,EAAI0D,GACtC,OAgBA,SAAelO,GACb,OAAOgK,GAAchK,GACjBsK,GAAaC,EAASgE,EAAO,aAA7BjE,CAA2CtK,GAC3CuO,EAAMvO,EACZ,EAgBA,SAASuO,EAAMvO,GACb,OAAgB,OAATA,GAAiB8J,GAAmB9J,GAAQwK,EAAGxK,GAAQkO,EAAIlO,EACpE,CACF,EA/CEwO,SAAS,GCGJ,SAASC,GAAYlC,GAE1B,MAAMmC,EAAQ,CAAC,EACf,IAEIC,EAEAC,EAEAC,EAEAC,EAEA1K,EAEA2K,EAEAC,EAdA1R,GAAS,EAeb,OAASA,EAAQiP,EAAOtP,QAAQ,CAC9B,KAAOK,KAASoR,GACdpR,EAAQoR,EAAMpR,GAMhB,GAJAqR,EAAQpC,EAAOjP,GAKbA,GACkB,cAAlBqR,EAAM,GAAG/G,MACqB,mBAA9B2E,EAAOjP,EAAQ,GAAG,GAAGsK,OAErBmH,EAAYJ,EAAM,GAAGlB,WAAWlB,OAChCsC,EAAa,EAEXA,EAAaE,EAAU9R,QACW,oBAAlC8R,EAAUF,GAAY,GAAGjH,OAEzBiH,GAAc,GAGdA,EAAaE,EAAU9R,QACW,YAAlC8R,EAAUF,GAAY,GAAGjH,MAEzB,OAASiH,EAAaE,EAAU9R,QACQ,YAAlC8R,EAAUF,GAAY,GAAGjH,MAGS,cAAlCmH,EAAUF,GAAY,GAAGjH,OAC3BmH,EAAUF,GAAY,GAAGI,6BAA8B,EACvDJ,KAOR,GAAiB,UAAbF,EAAM,GACJA,EAAM,GAAGlD,cACX7Q,OAAOsL,OAAOwI,EAAOQ,GAAW3C,EAAQjP,IACxCA,EAAQoR,EAAMpR,GACd0R,GAAO,QAIN,GAAIL,EAAM,GAAGQ,WAAY,CAG5B,IAFAN,EAAavR,EACbsR,OAAYzQ,EACL0Q,MACLC,EAAavC,EAAOsC,GAEK,eAAvBC,EAAW,GAAGlH,MACS,oBAAvBkH,EAAW,GAAGlH,OAEQ,UAAlBkH,EAAW,KACTF,IACFrC,EAAOqC,GAAW,GAAGhH,KAAO,mBAE9BkH,EAAW,GAAGlH,KAAO,aACrBgH,EAAYC,GAMdD,IAEFD,EAAM,GAAGhR,IAAM/C,OAAOsL,OAAO,CAAC,EAAGqG,EAAOqC,GAAW,GAAGlR,OAGtD0G,EAAamI,EAAOlO,MAAMuQ,EAAWtR,GACrC8G,EAAWwE,QAAQ+F,GACnBrG,EAAOiE,EAAQqC,EAAWtR,EAAQsR,EAAY,EAAGxK,GAErD,CACF,CACA,OAAQ4K,CACV,CASA,SAASE,GAAW3C,EAAQ6C,GAC1B,MAAM5D,EAAQe,EAAO6C,GAAY,GAC3BC,EAAU9C,EAAO6C,GAAY,GACnC,IAAIE,EAAgBF,EAAa,EAEjC,MAAMG,EAAiB,GACjBC,EACJhE,EAAMiC,YAAc4B,EAAQjE,OAAOI,EAAMC,aAAaD,EAAM9N,OACxD+R,EAAcD,EAAUjD,OAExBmC,EAAQ,GAERgB,EAAO,CAAC,EAEd,IAAI7B,EAEAtC,EACAjO,GAAS,EAETqS,EAAUnE,EACVoE,EAAS,EACTlS,EAAQ,EACZ,MAAMmS,EAAS,CAACnS,GAIhB,KAAOiS,GAAS,CAEd,KAAOpD,IAAS+C,GAAe,KAAOK,IAGtCJ,EAAe7M,KAAK4M,GACfK,EAAQlC,aACXI,EAASwB,EAAQvB,YAAY6B,GACxBA,EAAQ7L,MACX+J,EAAOnL,KAAK,MAEV6I,GACFiE,EAAUzB,WAAW4B,EAAQjS,OAE3BiS,EAAQV,8BACVO,EAAUM,oCAAqC,GAEjDN,EAAUxB,MAAMH,GACZ8B,EAAQV,8BACVO,EAAUM,wCAAqC3R,IAKnDoN,EAAWoE,EACXA,EAAUA,EAAQ7L,IACpB,CAKA,IADA6L,EAAUnE,IACDlO,EAAQmS,EAAYxS,QAGC,SAA1BwS,EAAYnS,GAAO,IACW,UAA9BmS,EAAYnS,EAAQ,GAAG,IACvBmS,EAAYnS,GAAO,GAAGsK,OAAS6H,EAAYnS,EAAQ,GAAG,GAAGsK,MACzD6H,EAAYnS,GAAO,GAAGI,MAAMH,OAASkS,EAAYnS,GAAO,GAAGK,IAAIJ,OAE/DG,EAAQJ,EAAQ,EAChBuS,EAAOnN,KAAKhF,GAEZiS,EAAQlC,gBAAatP,EACrBwR,EAAQpE,cAAWpN,EACnBwR,EAAUA,EAAQ7L,MAqBtB,IAhBA0L,EAAUjD,OAAS,GAKfoD,GAEFA,EAAQlC,gBAAatP,EACrBwR,EAAQpE,cAAWpN,GAEnB0R,EAAOhM,MAKTvG,EAAQuS,EAAO5S,OACRK,KAAS,CACd,MAAMe,EAAQoR,EAAYpR,MAAMwR,EAAOvS,GAAQuS,EAAOvS,EAAQ,IACxDI,EAAQ6R,EAAe1L,MAC7B6K,EAAM9F,QAAQ,CAAClL,EAAOA,EAAQW,EAAMpB,OAAS,IAC7CqL,EAAOiE,EAAQ7O,EAAO,EAAGW,EAC3B,CAEA,IADAf,GAAS,IACAA,EAAQoR,EAAMzR,QACrByS,EAAKE,EAASlB,EAAMpR,GAAO,IAAMsS,EAASlB,EAAMpR,GAAO,GACvDsS,GAAUlB,EAAMpR,GAAO,GAAKoR,EAAMpR,GAAO,GAAK,EAEhD,OAAOoS,CACT,CC/MO,MAAM,GAAU,CACrBzE,SAyBF,SAAyBV,EAASC,GAEhC,IAAIe,EACJ,OAYA,SAAoBvL,GAKlB,OAJAuK,EAAQK,MAAM,WACdW,EAAWhB,EAAQK,MAAM,eAAgB,CACvCa,YAAa,YAERsE,EAAY/P,EACrB,EAYA,SAAS+P,EAAY/P,GACnB,OAAa,OAATA,EACKgQ,EAAWhQ,GAKhB8J,GAAmB9J,GACduK,EAAQyC,MACbiD,GACAC,EACAF,EAHKzF,CAILvK,IAIJuK,EAAQO,QAAQ9K,GACT+P,EACT,CAOA,SAASC,EAAWhQ,GAGlB,OAFAuK,EAAQQ,KAAK,gBACbR,EAAQQ,KAAK,WACNP,EAAGxK,EACZ,CAOA,SAASkQ,EAAgBlQ,GAQvB,OAPAuK,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,gBACbQ,EAASzH,KAAOyG,EAAQK,MAAM,eAAgB,CAC5Ca,YAAa,UACbF,aAEFA,EAAWA,EAASzH,KACbiM,CACT,CACF,EAvGE7I,QAeF,SAAwBqF,GAEtB,OADAkC,GAAYlC,GACLA,CACT,GAdM0D,GAAwB,CAC5BhF,SAwGF,SAA8BV,EAASC,EAAI0D,GACzC,MAAMxC,EAAOpN,KACb,OAOA,SAAwB0B,GAKtB,OAJAuK,EAAQQ,KAAK,gBACbR,EAAQK,MAAM,cACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,cACNT,GAAaC,EAAS4F,EAAU,aACzC,EAOA,SAASA,EAASnQ,GAChB,GAAa,OAATA,GAAiB8J,GAAmB9J,GACtC,OAAOkO,EAAIlO,GAKb,MAAMoQ,EAAO1E,EAAKa,OAAOb,EAAKa,OAAOtP,OAAS,GAC9C,OACGyO,EAAKN,OAAOjC,WAAWiF,QAAQC,KAAK7L,SAAS,iBAC9C4N,GACiB,eAAjBA,EAAK,GAAGxI,MACRwI,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMnT,QAAU,EAEzCuN,EAAGxK,GAELuK,EAAQuC,UAAUpB,EAAKN,OAAOjC,WAAWqE,KAAMU,EAAK1D,EAApDD,CAAwDvK,EACjE,CACF,EA/IEwO,SAAS,GCbJ,MAAMhB,GAAO,CAClBvC,SAOF,SAAwBV,GACtB,MAAMmB,EAAOpN,KACPgS,EAAU/F,EAAQY,QAEtBmD,IAoBF,SAAuBtO,GACrB,GAAa,OAATA,EAEF,YADAuK,EAAQO,QAAQ9K,GAOlB,OAJAuK,EAAQK,MAAM,mBACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,mBACbW,EAAKiB,sBAAmBxO,EACjBmS,CACT,GA3BE/F,EAAQY,QACN7M,KAAK8M,OAAOjC,WAAWoH,YACvBC,EACAlG,GACEC,EACAA,EAAQY,QACN7M,KAAK8M,OAAOjC,WAAWqE,KACvBgD,EACAjG,EAAQY,QAAQ,GAASqF,IAE3B,gBAIN,OAAOF,EAgBP,SAASE,EAAexQ,GACtB,GAAa,OAATA,EAQJ,OAJAuK,EAAQK,MAAM,cACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,cACbW,EAAKiB,sBAAmBxO,EACjBmS,EAPL/F,EAAQO,QAAQ9K,EAQpB,CACF,GC1DO,MAAMyQ,GAAW,CACtBC,WAAYC,MAEDC,GAASC,GAAkB,UAC3B,GAAOA,GAAkB,QAMtC,SAASA,GAAkBC,GACzB,MAAO,CACL7F,SAUF,SAAwBV,GACtB,MAAMmB,EAAOpN,KACP6K,EAAa7K,KAAK8M,OAAOjC,WAAW2H,GACpCC,EAAOxG,EAAQY,QAAQhC,EAAYzL,EAAOsT,GAChD,OAAOtT,EAGP,SAASA,EAAMsC,GACb,OAAOiR,EAAQjR,GAAQ+Q,EAAK/Q,GAAQgR,EAAQhR,EAC9C,CAGA,SAASgR,EAAQhR,GACf,GAAa,OAATA,EAMJ,OAFAuK,EAAQK,MAAM,QACdL,EAAQO,QAAQ9K,GACTkC,EALLqI,EAAQO,QAAQ9K,EAMpB,CAGA,SAASkC,EAAKlC,GACZ,OAAIiR,EAAQjR,IACVuK,EAAQQ,KAAK,QACNgG,EAAK/Q,KAIduK,EAAQO,QAAQ9K,GACTkC,EACT,CAMA,SAAS+O,EAAQjR,GACf,GAAa,OAATA,EACF,OAAO,EAET,MAAMuI,EAAOY,EAAWnJ,GACxB,IAAI1C,GAAS,EACb,GAAIiL,EAGF,OAASjL,EAAQiL,EAAKtL,QAAQ,CAC5B,MAAM8O,EAAOxD,EAAKjL,GAClB,IAAKyO,EAAKR,UAAYQ,EAAKR,SAAShQ,KAAKmQ,EAAMA,EAAKH,UAClD,OAAO,CAEX,CAEF,OAAO,CACT,CACF,EAjEEmF,WAAYC,GACA,SAAVG,EAAmBI,QAAyB/S,GAiElD,CAMA,SAASwS,GAAeQ,GACtB,OAGA,SAAwB5E,EAAQ8C,GAC9B,IAEIzE,EAFAtN,GAAS,EAMb,OAASA,GAASiP,EAAOtP,aACTkB,IAAVyM,EACE2B,EAAOjP,IAAoC,SAA1BiP,EAAOjP,GAAO,GAAGsK,OACpCgD,EAAQtN,EACRA,KAEQiP,EAAOjP,IAAoC,SAA1BiP,EAAOjP,GAAO,GAAGsK,OAExCtK,IAAUsN,EAAQ,IACpB2B,EAAO3B,GAAO,GAAGjN,IAAM4O,EAAOjP,EAAQ,GAAG,GAAGK,IAC5C4O,EAAOjE,OAAOsC,EAAQ,EAAGtN,EAAQsN,EAAQ,GACzCtN,EAAQsN,EAAQ,GAElBA,OAAQzM,GAGZ,OAAOgT,EAAgBA,EAAc5E,EAAQ8C,GAAW9C,CAC1D,CACF,CAaA,SAAS2E,GAAuB3E,EAAQ8C,GACtC,IAAID,EAAa,EAEjB,OAASA,GAAc7C,EAAOtP,QAC5B,IACGmS,IAAe7C,EAAOtP,QACU,eAA/BsP,EAAO6C,GAAY,GAAGxH,OACW,SAAnC2E,EAAO6C,EAAa,GAAG,GAAGxH,KAC1B,CACA,MAAM1F,EAAOqK,EAAO6C,EAAa,GAAG,GAC9BgC,EAAS/B,EAAQvB,YAAY5L,GACnC,IAIImP,EAJA/T,EAAQ8T,EAAOnU,OACfqU,GAAe,EACf3G,EAAO,EAGX,KAAOrN,KAAS,CACd,MAAMiU,EAAQH,EAAO9T,GACrB,GAAqB,iBAAViU,EAAoB,CAE7B,IADAD,EAAcC,EAAMtU,OACyB,KAAtCsU,EAAMhS,WAAW+R,EAAc,IACpC3G,IACA2G,IAEF,GAAIA,EAAa,MACjBA,GAAe,CACjB,MAEK,IAAe,IAAXC,EACPF,GAAO,EACP1G,SACK,IAAe,IAAX4G,EAEJ,CAELjU,IACA,KACF,CACF,CACA,GAAIqN,EAAM,CACR,MAAMa,EAAQ,CACZ5D,KACEwH,IAAe7C,EAAOtP,QAAUoU,GAAQ1G,EAAO,EAC3C,aACA,oBACNjN,MAAO,CACLH,KAAM2E,EAAKvE,IAAIJ,KACfC,OAAQ0E,EAAKvE,IAAIH,OAASmN,EAC1B2C,OAAQpL,EAAKvE,IAAI2P,OAAS3C,EAC1B6G,OAAQtP,EAAKxE,MAAM8T,OAASlU,EAC5BmU,aAAcnU,EACVgU,EACApP,EAAKxE,MAAM+T,aAAeH,GAEhC3T,IAAK/C,OAAOsL,OAAO,CAAC,EAAGhE,EAAKvE,MAE9BuE,EAAKvE,IAAM/C,OAAOsL,OAAO,CAAC,EAAGsF,EAAM9N,OAC/BwE,EAAKxE,MAAM4P,SAAWpL,EAAKvE,IAAI2P,OACjC1S,OAAOsL,OAAOhE,EAAMsJ,IAEpBe,EAAOjE,OACL8G,EACA,EACA,CAAC,QAAS5D,EAAO6D,GACjB,CAAC,OAAQ7D,EAAO6D,IAElBD,GAAc,EAElB,CACAA,GACF,CAEF,OAAO7C,CACT,CC/LO,SAASmE,GAAWvH,EAAYoD,EAAQ8C,GAE7C,MAAMnL,EAAS,GACf,IAAI5G,GAAS,EAEb,OAASA,EAAQ6L,EAAWlM,QAAQ,CAClC,MAAMiK,EAAUiC,EAAW7L,GAAOoT,WAE9BxJ,IAAYhD,EAAO1B,SAAS0E,KAC9BqF,EAASrF,EAAQqF,EAAQ8C,GACzBnL,EAAOxB,KAAKwE,GAEhB,CAEA,OAAOqF,CACT,CCcO,SAASmF,GAAgBtG,EAAQuG,EAAYhJ,GAElD,IAAItL,EAAQzC,OAAOsL,OACjByC,EACI/N,OAAOsL,OAAO,CAAC,EAAGyC,GAClB,CACEpL,KAAM,EACNC,OAAQ,EACR8P,OAAQ,GAEd,CACEkE,OAAQ,EACRC,cAAe,IAInB,MAAMG,EAAc,CAAC,EAEfC,EAAuB,GAE7B,IAAIT,EAAS,GAET5S,EAAQ,GAERsT,GAAW,EAOf,MAAMvH,EAAU,CACdO,QAkJF,SAAiB9K,GACX8J,GAAmB9J,IACrB3C,EAAME,OACNF,EAAMG,OAAS,EACfH,EAAMiQ,SAAoB,IAAVtN,EAAc,EAAI,EAClC+R,MACmB,IAAV/R,IACT3C,EAAMG,SACNH,EAAMiQ,UAIJjQ,EAAMoU,aAAe,EACvBpU,EAAMmU,UAENnU,EAAMoU,eAKFpU,EAAMoU,eAAiBL,EAAO/T,EAAMmU,QAAQvU,SAC9CI,EAAMoU,cAAgB,EACtBpU,EAAMmU,WAKVnC,EAAQ9D,SAAWvL,EAGnB8R,GAAW,CACb,EAhLElH,MAmLF,SAAehD,EAAMoK,GAGnB,MAAMxG,EAAQwG,GAAU,CAAC,EAKzB,OAJAxG,EAAM5D,KAAOA,EACb4D,EAAM9N,MAAQ2P,IACdgC,EAAQ9C,OAAO7J,KAAK,CAAC,QAAS8I,EAAO6D,IACrC7Q,EAAMkE,KAAK8I,GACJA,CACT,EA3LET,KA8LF,SAAcnD,GACZ,MAAM4D,EAAQhN,EAAMqF,MAGpB,OAFA2H,EAAM7N,IAAM0P,IACZgC,EAAQ9C,OAAO7J,KAAK,CAAC,OAAQ8I,EAAO6D,IAC7B7D,CACT,EAlMEL,QAAS8G,GAyMX,SAA+BC,EAAWpP,GACxCqP,EAAUD,EAAWpP,EAAK6F,KAC5B,IA1MEqE,MAAOiF,EAAiBG,GACxBtF,UAAWmF,EAAiBG,EAAmB,CAC7CtF,WAAW,KASTuC,EAAU,CACd9D,SAAU,KACVvL,KAAM,KACNgM,eAAgB,CAAC,EACjBO,OAAQ,GACRnB,SACA0C,cACAuC,eA6CF,SAAwB7E,EAAO6G,GAC7B,OAsYJ,SAAyBjB,EAAQiB,GAC/B,IAAI/U,GAAS,EAEb,MAAMiD,EAAS,GAEf,IAAI+R,EACJ,OAAShV,EAAQ8T,EAAOnU,QAAQ,CAC9B,MAAMsU,EAAQH,EAAO9T,GAErB,IAAIlB,EACJ,GAAqB,iBAAVmV,EACTnV,EAAQmV,OAER,OAAQA,GACN,KAAM,EACJnV,EAAQ,KACR,MAEF,KAAM,EACJA,EAAQ,KACR,MAEF,KAAM,EACJA,EAAQ,OACR,MAEF,KAAM,EACJA,EAAQiW,EAAa,IAAM,KAC3B,MAEF,KAAM,EACJ,IAAKA,GAAcC,EAAO,SAC1BlW,EAAQ,IACR,MAEF,QAEEA,EAAQwK,OAAOyD,aAAakH,GAGlCe,GAAmB,IAAXf,EACRhR,EAAOmC,KAAKtG,EACd,CACA,OAAOmE,EAAON,KAAK,GACrB,CAlbWsS,CAAgBzE,EAAYtC,GAAQ6G,EAC7C,EA9CEhF,MACAU,WAkEF,SAAoB3R,GAClBwV,EAAYxV,EAAMmB,MAAQnB,EAAMoB,OAChCuU,GACF,EApEE/D,MAsBF,SAAe3P,GAKb,GAJA+S,EAAS1O,EAAK0O,EAAQ/S,GACtBmU,IAGkC,OAA9BpB,EAAOA,EAAOnU,OAAS,GACzB,MAAO,GAMT,OAJAkV,EAAUR,EAAY,GAGtBtC,EAAQ9C,OAASmE,GAAWmB,EAAsBxC,EAAQ9C,OAAQ8C,GAC3DA,EAAQ9C,MACjB,GA3BA,IAOIkG,EAPAC,EAAQf,EAAW1G,SAAS1P,KAAK8T,EAAS9E,GAW9C,OAHIoH,EAAWjB,YACbmB,EAAqBnP,KAAKiP,GAErBtC,EA4BP,SAASvB,EAAYtC,GACnB,OA8VJ,SAAqB4F,EAAQ5F,GAC3B,MAAMmH,EAAanH,EAAM9N,MAAM8T,OACzBoB,EAAmBpH,EAAM9N,MAAM+T,aAC/BoB,EAAWrH,EAAM7N,IAAI6T,OACrBsB,EAAiBtH,EAAM7N,IAAI8T,aAEjC,IAAIsB,EACJ,GAAIJ,IAAeE,EAEjBE,EAAO,CAAC3B,EAAOuB,GAAYtU,MAAMuU,EAAkBE,QAC9C,CAEL,GADAC,EAAO3B,EAAO/S,MAAMsU,EAAYE,GAC5BD,GAAoB,EAAG,CACzB,MAAMI,EAAOD,EAAK,GACE,iBAATC,EACTD,EAAK,GAAKC,EAAK3U,MAAMuU,GAErBG,EAAKE,OAET,CACIH,EAAiB,GAEnBC,EAAKrQ,KAAK0O,EAAOyB,GAAUxU,MAAM,EAAGyU,GAExC,CACA,OAAOC,CACT,CAxXWG,CAAY9B,EAAQ5F,EAC7B,CAGA,SAAS6B,IAEP,MAAM,KAAC9P,EAAI,OAAEC,EAAM,OAAE8P,EAAM,OAAEkE,EAAM,aAAEC,GAAgBpU,EACrD,MAAO,CACLE,OACAC,SACA8P,SACAkE,SACAC,eAEJ,CAsBA,SAASe,IAEP,IAAIW,EACJ,KAAO9V,EAAMmU,OAASJ,EAAOnU,QAAQ,CACnC,MAAMsU,EAAQH,EAAO/T,EAAMmU,QAG3B,GAAqB,iBAAVD,EAKT,IAJA4B,EAAa9V,EAAMmU,OACfnU,EAAMoU,aAAe,IACvBpU,EAAMoU,aAAe,GAGrBpU,EAAMmU,SAAW2B,GACjB9V,EAAMoU,aAAeF,EAAMtU,QAE3BmW,EAAG7B,EAAMhS,WAAWlC,EAAMoU,oBAG5B2B,EAAG7B,EAEP,CACF,CAQA,SAAS6B,EAAGpT,GACV8R,OAAW3T,EACXsU,EAAezS,EACf0S,EAAQA,EAAM1S,EAChB,CAsEA,SAASoS,EAAkBiB,EAAGvQ,GAC5BA,EAAKwQ,SACP,CAQA,SAASrB,EAAiBsB,EAAUvB,GAClC,OAWA,SAAc7I,EAAYqK,EAAaC,GAErC,IAAIC,EAEAC,EAEAhH,EAEA7J,EACJ,OAAOxH,MAAMF,QAAQ+N,GACjByK,EAAuBzK,GACvB,aAAcA,EAEdyK,EAAuB,CAACzK,IAS5B,SAA+B7G,GAC7B,OAAO5E,EAGP,SAASA,EAAMsC,GACb,MAAM6T,EAAe,OAAT7T,GAAiBsC,EAAItC,GAC3B8I,EAAe,OAAT9I,GAAiBsC,EAAI+L,KAOjC,OAAOuF,EANM,IAGPtY,MAAMF,QAAQyY,GAAOA,EAAMA,EAAM,CAACA,GAAO,MACzCvY,MAAMF,QAAQ0N,GAAOA,EAAMA,EAAM,CAACA,GAAO,IAExC8K,CAA6B5T,EACtC,CACF,CAvBI8T,CAAsB3K,GA+B1B,SAASyK,EAAuBrL,GAG9B,OAFAmL,EAAmBnL,EACnBoL,EAAiB,EACG,IAAhBpL,EAAKtL,OACAwW,EAEFM,EAAgBxL,EAAKoL,GAC9B,CAQA,SAASI,EAAgB7B,GACvB,OAGA,SAAelS,GAKb8C,EAwER,WACE,MAAMkR,EAAa3G,IACb4G,EAAgB5E,EAAQ9D,SACxB2I,EAAwB7E,EAAQ1C,iBAChCwH,EAAmB9E,EAAQ9C,OAAOtP,OAClCmX,EAAa9Y,MAAMqN,KAAKnK,GAC9B,MAAO,CACL8U,UACA3K,KAAMwL,GAQR,SAASb,IACPjW,EAAQ2W,EACR3E,EAAQ9D,SAAW0I,EACnB5E,EAAQ1C,iBAAmBuH,EAC3B7E,EAAQ9C,OAAOtP,OAASkX,EACxB3V,EAAQ4V,EACRrC,GACF,CACF,CAhGesC,GACP1H,EAAmBuF,EACdA,EAAU1D,UACba,EAAQ1C,iBAAmBuF,GAK7B,GACEA,EAAUjW,MACVoT,EAAQjE,OAAOjC,WAAWiF,QAAQC,KAAK7L,SAAS0P,EAAUjW,MAE1D,OAAOiS,EAAIlO,GAEb,OAAOkS,EAAUjH,SAAS1P,KAIxByW,EAASpX,OAAOsL,OAAOtL,OAAO0Z,OAAOjF,GAAU2C,GAAU3C,EACzD9E,EACAC,EACA0D,EAPKgE,CAQLlS,EACJ,CACF,CAGA,SAASwK,EAAGxK,GAGV,OAFA8R,GAAW,EACXyB,EAAS5G,EAAkB7J,GACpB0Q,CACT,CAGA,SAAStF,EAAIlO,GAGX,OAFA8R,GAAW,EACXhP,EAAKwQ,YACCK,EAAiBD,EAAiBzW,OAC/B8W,EAAgBL,EAAiBC,IAEnCF,CACT,CACF,CACF,CAOA,SAAStB,EAAUD,EAAWvJ,GACxBuJ,EAAUxB,aAAemB,EAAqBrP,SAAS0P,IACzDL,EAAqBnP,KAAKwP,GAExBA,EAAUhL,SACZoB,EACE+G,EAAQ9C,OACR5D,EACA0G,EAAQ9C,OAAOtP,OAAS0L,EACxBuJ,EAAUhL,QAAQmI,EAAQ9C,OAAOlO,MAAMsK,GAAO0G,IAG9C6C,EAAUqC,YACZlF,EAAQ9C,OAAS2F,EAAUqC,UAAUlF,EAAQ9C,OAAQ8C,GAEzD,CAuCA,SAAS0C,IACH1U,EAAME,QAAQqU,GAAevU,EAAMG,OAAS,IAC9CH,EAAMG,OAASoU,EAAYvU,EAAME,MACjCF,EAAMiQ,QAAUsE,EAAYvU,EAAME,MAAQ,EAE9C,CACF,CCleO,MAAMiX,GAAgB,CAC3BvY,KAAM,gBACNgP,SAOF,SAA+BV,EAASC,EAAI0D,GAC1C,IAEIuG,EAFA9J,EAAO,EAGX,OAYA,SAAe3K,GAGb,OAFAuK,EAAQK,MAAM,iBAehB,SAAgB5K,GAEd,OADAyU,EAASzU,EACFiR,EAAQjR,EACjB,CAhBSqJ,CAAOrJ,EAChB,EA2BA,SAASiR,EAAQjR,GACf,OAAIA,IAASyU,GACXlK,EAAQK,MAAM,yBACP8J,EAAS1U,IAEd2K,GAAQ,IAAe,OAAT3K,GAAiB8J,GAAmB9J,KACpDuK,EAAQQ,KAAK,iBACNP,EAAGxK,IAELkO,EAAIlO,EACb,CAYA,SAAS0U,EAAS1U,GAChB,OAAIA,IAASyU,GACXlK,EAAQO,QAAQ9K,GAChB2K,IACO+J,IAETnK,EAAQQ,KAAK,yBACNf,GAAchK,GACjBsK,GAAaC,EAAS0G,EAAS,aAA/B3G,CAA6CtK,GAC7CiR,EAAQjR,GACd,CACF,GCpFO,MAAMuI,GAAO,CAClBtM,KAAM,OACNgP,SA0BF,SAA2BV,EAASC,EAAI0D,GACtC,MAAMxC,EAAOpN,KACP8R,EAAO1E,EAAKa,OAAOb,EAAKa,OAAOtP,OAAS,GAC9C,IAAI0X,EACFvE,GAAyB,eAAjBA,EAAK,GAAGxI,KACZwI,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMnT,OACtC,EACF0N,EAAO,EACX,OAGA,SAAe3K,GACb,MAAM4U,EACJlJ,EAAKM,eAAepE,OACV,KAAT5H,GAAwB,KAATA,GAAwB,KAATA,EAC3B,gBACA,eACN,GACW,kBAAT4U,GACKlJ,EAAKM,eAAeyI,QAAUzU,IAAS0L,EAAKM,eAAeyI,OAC5D9K,GAAW3J,GACf,CAOA,GANK0L,EAAKM,eAAepE,OACvB8D,EAAKM,eAAepE,KAAOgN,EAC3BrK,EAAQK,MAAMgK,EAAM,CAClBzF,YAAY,KAGH,kBAATyF,EAEF,OADArK,EAAQK,MAAM,kBACE,KAAT5K,GAAwB,KAATA,EAClBuK,EAAQyC,MAAMwH,GAAetG,EAAK2G,EAAlCtK,CAA4CvK,GAC5C6U,EAAS7U,GAEf,IAAK0L,EAAKoB,WAAsB,KAAT9M,EAGrB,OAFAuK,EAAQK,MAAM,kBACdL,EAAQK,MAAM,iBACPkK,EAAO9U,EAElB,CACA,OAAOkO,EAAIlO,EACb,EAGA,SAAS8U,EAAO9U,GACd,OAAI2J,GAAW3J,MAAW2K,EAAO,IAC/BJ,EAAQO,QAAQ9K,GACT8U,KAGLpJ,EAAKoB,WAAanC,EAAO,KAC1Be,EAAKM,eAAeyI,OACjBzU,IAAS0L,EAAKM,eAAeyI,OACpB,KAATzU,GAAwB,KAATA,IAEnBuK,EAAQQ,KAAK,iBACN8J,EAAS7U,IAEXkO,EAAIlO,EACb,CAKA,SAAS6U,EAAS7U,GAKhB,OAJAuK,EAAQK,MAAM,kBACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,kBACbW,EAAKM,eAAeyI,OAAS/I,EAAKM,eAAeyI,QAAUzU,EACpDuK,EAAQyC,MACbsB,GAEA5C,EAAKoB,UAAYoB,EAAM6G,EACvBxK,EAAQY,QACN6J,GACAC,EACAC,GAGN,CAGA,SAASH,EAAQ/U,GAGf,OAFA0L,EAAKM,eAAemJ,kBAAmB,EACvCR,IACOM,EAAYjV,EACrB,CAGA,SAASkV,EAAYlV,GACnB,OAAIgK,GAAchK,IAChBuK,EAAQK,MAAM,4BACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,4BACNkK,GAEF/G,EAAIlO,EACb,CAGA,SAASiV,EAAYjV,GAInB,OAHA0L,EAAKM,eAAerB,KAClBgK,EACAjJ,EAAK2E,eAAe9F,EAAQQ,KAAK,mBAAmB,GAAM9N,OACrDuN,EAAGxK,EACZ,CACF,EAnIEiM,aAAc,CACZhB,SAwIJ,SAAkCV,EAASC,EAAI0D,GAC7C,MAAMxC,EAAOpN,KAEb,OADAoN,EAAKM,eAAeI,gBAAajO,EAC1BoM,EAAQyC,MAAMsB,GAAWyG,EAASK,GAGzC,SAASL,EAAQ/U,GAOf,OANA0L,EAAKM,eAAeqJ,kBAClB3J,EAAKM,eAAeqJ,mBACpB3J,EAAKM,eAAemJ,iBAIf7K,GACLC,EACAC,EACA,iBACAkB,EAAKM,eAAerB,KAAO,EAJtBL,CAKLtK,EACJ,CAGA,SAASoV,EAASpV,GAChB,OAAI0L,EAAKM,eAAeqJ,oBAAsBrL,GAAchK,IAC1D0L,EAAKM,eAAeqJ,uBAAoBlX,EACxCuN,EAAKM,eAAemJ,sBAAmBhX,EAChCmX,EAAiBtV,KAE1B0L,EAAKM,eAAeqJ,uBAAoBlX,EACxCuN,EAAKM,eAAemJ,sBAAmBhX,EAChCoM,EAAQY,QAAQoK,GAAiB/K,EAAI8K,EAArC/K,CAAuDvK,GAChE,CAGA,SAASsV,EAAiBtV,GAOxB,OALA0L,EAAKM,eAAeI,YAAa,EAEjCV,EAAKoB,eAAY3O,EAGVmM,GACLC,EACAA,EAAQY,QAAQ5C,GAAMiC,EAAI0D,GAC1B,aACAxC,EAAKN,OAAOjC,WAAWiF,QAAQC,KAAK7L,SAAS,qBACzCrE,EACA,EANCmM,CAOLtK,EACJ,CACF,GAxLE+K,KAsNF,SAAyBR,GACvBA,EAAQQ,KAAKzM,KAAK0N,eAAepE,KACnC,GApNMoN,GAAoC,CACxC/J,SAyNF,SAA0CV,EAASC,EAAI0D,GACrD,MAAMxC,EAAOpN,KAIb,OAAOgM,GACLC,GASF,SAAqBvK,GACnB,MAAMoQ,EAAO1E,EAAKa,OAAOb,EAAKa,OAAOtP,OAAS,GAC9C,OAAQ+M,GAAchK,IACpBoQ,GACiB,6BAAjBA,EAAK,GAAGxI,KACN4C,EAAGxK,GACHkO,EAAIlO,EACV,GAdE,2BACA0L,EAAKN,OAAOjC,WAAWiF,QAAQC,KAAK7L,SAAS,qBACzCrE,EACA,EAYR,EA/OEqQ,SAAS,GAIL+G,GAAkB,CACtBtK,SAmLF,SAAwBV,EAASC,EAAI0D,GACnC,MAAMxC,EAAOpN,KACb,OAAOgM,GACLC,GAOF,SAAqBvK,GACnB,MAAMoQ,EAAO1E,EAAKa,OAAOb,EAAKa,OAAOtP,OAAS,GAC9C,OAAOmT,GACY,mBAAjBA,EAAK,GAAGxI,MACRwI,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMnT,SAAWyO,EAAKM,eAAerB,KACnEH,EAAGxK,GACHkO,EAAIlO,EACV,GAZE,iBACA0L,EAAKM,eAAerB,KAAO,EAY/B,EApME6D,SAAS,GCvBJ,MAAMgH,GAAa,CACxBvZ,KAAM,aACNgP,SAWF,SAAiCV,EAASC,EAAI0D,GAC5C,MAAMxC,EAAOpN,KACb,OAYA,SAAe0B,GACb,GAAa,KAATA,EAAa,CACf,MAAM0S,EAAQhH,EAAKM,eAWnB,OAVK0G,EAAM+C,OACTlL,EAAQK,MAAM,aAAc,CAC1BuE,YAAY,IAEduD,EAAM+C,MAAO,GAEflL,EAAQK,MAAM,oBACdL,EAAQK,MAAM,oBACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,oBACNwD,CACT,CACA,OAAOL,EAAIlO,EACb,EAYA,SAASuO,EAAMvO,GACb,OAAIgK,GAAchK,IAChBuK,EAAQK,MAAM,8BACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,8BACbR,EAAQQ,KAAK,oBACNP,IAETD,EAAQQ,KAAK,oBACNP,EAAGxK,GACZ,CACF,EA/DEiM,aAAc,CACZhB,SA4EJ,SAAwCV,EAASC,EAAI0D,GACnD,MAAMxC,EAAOpN,KACb,OAeA,SAAmB0B,GACjB,GAAIgK,GAAchK,GAGhB,OAAOsK,GACLC,EACAmL,EACA,aACAhK,EAAKN,OAAOjC,WAAWiF,QAAQC,KAAK7L,SAAS,qBACzCrE,EACA,EANCmM,CAOLtK,GAEJ,OAAO0V,EAAW1V,EACpB,EAeA,SAAS0V,EAAW1V,GAClB,OAAOuK,EAAQY,QAAQqK,GAAYhL,EAAI0D,EAAhC3D,CAAqCvK,EAC9C,CACF,GA3HE+K,KA8HF,SAAcR,GACZA,EAAQQ,KAAK,aACf,GCjGO,SAAS4K,GACdpL,EACAC,EACA0D,EACAtG,EACAgO,EACAC,EACAC,EACAC,EACAtL,GAEA,MAAMC,EAAQD,GAAO7E,OAAOC,kBAC5B,IAAImQ,EAAU,EACd,OAcA,SAAehW,GACb,GAAa,KAATA,EAMF,OALAuK,EAAQK,MAAMhD,GACd2C,EAAQK,MAAMgL,GACdrL,EAAQK,MAAMiL,GACdtL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK8K,GACNI,EAIT,GAAa,OAATjW,GAA0B,KAATA,GAAwB,KAATA,GAAe0J,GAAa1J,GAC9D,OAAOkO,EAAIlO,GAQb,OANAuK,EAAQK,MAAMhD,GACd2C,EAAQK,MAAMkL,GACdvL,EAAQK,MAAMmL,GACdxL,EAAQK,MAAM,cAAe,CAC3Ba,YAAa,WAERyK,EAAIlW,EACb,EAYA,SAASiW,EAAejW,GACtB,OAAa,KAATA,GACFuK,EAAQK,MAAMiL,GACdtL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK8K,GACbtL,EAAQQ,KAAK6K,GACbrL,EAAQQ,KAAKnD,GACN4C,IAETD,EAAQK,MAAMmL,GACdxL,EAAQK,MAAM,cAAe,CAC3Ba,YAAa,WAER0K,EAASnW,GAClB,CAYA,SAASmW,EAASnW,GAChB,OAAa,KAATA,GACFuK,EAAQQ,KAAK,eACbR,EAAQQ,KAAKgL,GACNE,EAAejW,IAEX,OAATA,GAA0B,KAATA,GAAe8J,GAAmB9J,GAC9CkO,EAAIlO,IAEbuK,EAAQO,QAAQ9K,GACA,KAATA,EAAcoW,EAAiBD,EACxC,CAYA,SAASC,EAAepW,GACtB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCuK,EAAQO,QAAQ9K,GACTmW,GAEFA,EAASnW,EAClB,CAYA,SAASkW,EAAIlW,GACX,OACGgW,GACS,OAAThW,GAA0B,KAATA,IAAe+J,GAA0B/J,GAQzDgW,EAAUtL,GAAkB,KAAT1K,GACrBuK,EAAQO,QAAQ9K,GAChBgW,IACOE,GAEI,KAATlW,GACFuK,EAAQO,QAAQ9K,GAChBgW,IACOE,GAMI,OAATlW,GAA0B,KAATA,GAAwB,KAATA,GAAe0J,GAAa1J,GACvDkO,EAAIlO,IAEbuK,EAAQO,QAAQ9K,GACA,KAATA,EAAcqW,EAAYH,IAxB/B3L,EAAQQ,KAAK,eACbR,EAAQQ,KAAKgL,GACbxL,EAAQQ,KAAK+K,GACbvL,EAAQQ,KAAKnD,GACN4C,EAAGxK,GAqBd,CAYA,SAASqW,EAAUrW,GACjB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCuK,EAAQO,QAAQ9K,GACTkW,GAEFA,EAAIlW,EACb,CACF,CCzLO,SAASsW,GAAa/L,EAASC,EAAI0D,EAAKtG,EAAM2O,EAAYR,GAC/D,MAAMrK,EAAOpN,KACb,IAEI2P,EAFAtD,EAAO,EAGX,OAYA,SAAe3K,GAMb,OALAuK,EAAQK,MAAMhD,GACd2C,EAAQK,MAAM2L,GACdhM,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAKwL,GACbhM,EAAQK,MAAMmL,GACP9E,CACT,EAYA,SAASA,EAAQjR,GACf,OACE2K,EAAO,KACE,OAAT3K,GACS,KAATA,GACU,KAATA,IAAgBiO,GAMP,KAATjO,IACE2K,GACD,2BAA4Be,EAAKN,OAAOjC,WAEnC+E,EAAIlO,GAEA,KAATA,GACFuK,EAAQQ,KAAKgL,GACbxL,EAAQK,MAAM2L,GACdhM,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAKwL,GACbhM,EAAQQ,KAAKnD,GACN4C,GAILV,GAAmB9J,IACrBuK,EAAQK,MAAM,cACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,cACNkG,IAET1G,EAAQK,MAAM,cAAe,CAC3Ba,YAAa,WAER+K,EAAYxW,GACrB,CAYA,SAASwW,EAAYxW,GACnB,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACA8J,GAAmB9J,IACnB2K,IAAS,KAETJ,EAAQQ,KAAK,eACNkG,EAAQjR,KAEjBuK,EAAQO,QAAQ9K,GACXiO,IAAMA,GAAQjE,GAAchK,IACjB,KAATA,EAAcyW,EAAcD,EACrC,CAYA,SAASC,EAAYzW,GACnB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCuK,EAAQO,QAAQ9K,GAChB2K,IACO6L,GAEFA,EAAYxW,EACrB,CACF,CCtHO,SAAS0W,GAAanM,EAASC,EAAI0D,EAAKtG,EAAM2O,EAAYR,GAE/D,IAAItB,EACJ,OAYA,SAAezU,GACb,GAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EAMhC,OALAuK,EAAQK,MAAMhD,GACd2C,EAAQK,MAAM2L,GACdhM,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAKwL,GACb9B,EAAkB,KAATzU,EAAc,GAAKA,EACrB2W,EAET,OAAOzI,EAAIlO,EACb,EAcA,SAAS2W,EAAM3W,GACb,OAAIA,IAASyU,GACXlK,EAAQK,MAAM2L,GACdhM,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAKwL,GACbhM,EAAQQ,KAAKnD,GACN4C,IAETD,EAAQK,MAAMmL,GACP9E,EAAQjR,GACjB,CAYA,SAASiR,EAAQjR,GACf,OAAIA,IAASyU,GACXlK,EAAQQ,KAAKgL,GACNY,EAAMlC,IAEF,OAATzU,EACKkO,EAAIlO,GAIT8J,GAAmB9J,IAErBuK,EAAQK,MAAM,cACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,cACNT,GAAaC,EAAS0G,EAAS,gBAExC1G,EAAQK,MAAM,cAAe,CAC3Ba,YAAa,WAERqJ,EAAO9U,GAChB,CAOA,SAAS8U,EAAO9U,GACd,OAAIA,IAASyU,GAAmB,OAATzU,GAAiB8J,GAAmB9J,IACzDuK,EAAQQ,KAAK,eACNkG,EAAQjR,KAEjBuK,EAAQO,QAAQ9K,GACA,KAATA,EAAc4W,EAAS9B,EAChC,CAYA,SAAS8B,EAAO5W,GACd,OAAIA,IAASyU,GAAmB,KAATzU,GACrBuK,EAAQO,QAAQ9K,GACT8U,GAEFA,EAAO9U,EAChB,CACF,CClIO,SAAS6W,GAAkBtM,EAASC,GAEzC,IAAIyD,EACJ,OAGA,SAASvQ,EAAMsC,GACb,GAAI8J,GAAmB9J,GAKrB,OAJAuK,EAAQK,MAAM,cACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,cACbkD,GAAO,EACAvQ,EAET,GAAIsM,GAAchK,GAChB,OAAOsK,GACLC,EACA7M,EACAuQ,EAAO,aAAe,aAHjB3D,CAILtK,GAEJ,OAAOwK,EAAGxK,EACZ,CACF,CC7BO,SAAS8W,GAAoB1a,GAClC,OACEA,EAEG2a,QAAQ,cAAe,KAEvBA,QAAQ,SAAU,IAOlBC,cACAC,aAEP,CChBO,MAAMC,GAAa,CACxBjb,KAAM,aACNgP,SAaF,SAA4BV,EAASC,EAAI0D,GACvC,MAAMxC,EAAOpN,KAEb,IAAI6Y,EACJ,OAYA,SAAenX,GAKb,OADAuK,EAAQK,MAAM,cAchB,SAAgB5K,GAGd,OAAOsW,GAAa/a,KAClBmQ,EACAnB,EACA6M,EAEAlJ,EACA,kBACA,wBACA,wBARKoI,CASLtW,EACJ,CA1BSqJ,CAAOrJ,EAChB,EAqCA,SAASoX,EAAWpX,GAIlB,OAHAmX,EAAaL,GACXpL,EAAK2E,eAAe3E,EAAKa,OAAOb,EAAKa,OAAOtP,OAAS,GAAG,IAAIoB,MAAM,GAAI,IAE3D,KAAT2B,GACFuK,EAAQK,MAAM,oBACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,oBACNsM,GAEFnJ,EAAIlO,EACb,CAYA,SAASqX,EAAYrX,GAEnB,OAAO+J,GAA0B/J,GAC7B6W,GAAkBtM,EAAS+M,EAA3BT,CAA8C7W,GAC9CsX,EAAkBtX,EACxB,CAYA,SAASsX,EAAkBtX,GACzB,OAAO2V,GACLpL,EACAgN,EAEArJ,EACA,wBACA,+BACA,qCACA,2BACA,8BATKyH,CAUL3V,EACJ,CAYA,SAASuX,EAAiBvX,GACxB,OAAOuK,EAAQY,QAAQqM,GAAajJ,EAAOA,EAApChE,CAA2CvK,EACpD,CAcA,SAASuO,EAAMvO,GACb,OAAOgK,GAAchK,GACjBsK,GAAaC,EAASkN,EAAiB,aAAvCnN,CAAqDtK,GACrDyX,EAAgBzX,EACtB,CAcA,SAASyX,EAAgBzX,GACvB,OAAa,OAATA,GAAiB8J,GAAmB9J,IACtCuK,EAAQQ,KAAK,cAKbW,EAAKN,OAAOsM,QAAQhV,KAAKyU,GAKlB3M,EAAGxK,IAELkO,EAAIlO,EACb,CACF,GAtLMwX,GAAc,CAClBvM,SA2LF,SAA6BV,EAASC,EAAI0D,GACxC,OAcA,SAAqBlO,GACnB,OAAO+J,GAA0B/J,GAC7B6W,GAAkBtM,EAASoN,EAA3Bd,CAAyC7W,GACzCkO,EAAIlO,EACV,EAaA,SAAS2X,EAAa3X,GACpB,OAAO0W,GACLnM,EACAqN,EACA1J,EACA,kBACA,wBACA,wBANKwI,CAOL1W,EACJ,CAYA,SAAS4X,EAAW5X,GAClB,OAAOgK,GAAchK,GACjBsK,GAAaC,EAASsN,EAA8B,aAApDvN,CAAkEtK,GAClE6X,EAA6B7X,EACnC,CAYA,SAAS6X,EAA6B7X,GACpC,OAAgB,OAATA,GAAiB8J,GAAmB9J,GAAQwK,EAAGxK,GAAQkO,EAAIlO,EACpE,CACF,EAlQEwO,SAAS,GCjBJ,MAAMsJ,GAAe,CAC1B7b,KAAM,eACNgP,SAaF,SAA8BV,EAASC,EAAI0D,GACzC,MAAMxC,EAAOpN,KACb,OAgBA,SAAe0B,GAMb,OAHAuK,EAAQK,MAAM,gBAGPN,GAAaC,EAASwN,EAAa,aAAc,EAAjDzN,CAAwDtK,EACjE,EAYA,SAAS+X,EAAY/X,GACnB,MAAMoQ,EAAO1E,EAAKa,OAAOb,EAAKa,OAAOtP,OAAS,GAC9C,OAAOmT,GACY,eAAjBA,EAAK,GAAGxI,MACRwI,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMnT,QAAU,EAC9CgU,EAAQjR,GACRkO,EAAIlO,EACV,CAYA,SAASiR,EAAQjR,GACf,OAAa,OAATA,EACKuO,EAAMvO,GAEX8J,GAAmB9J,GACduK,EAAQY,QAAQ6M,GAAc/G,EAAS1C,EAAvChE,CAA8CvK,IAEvDuK,EAAQK,MAAM,iBACPkK,EAAO9U,GAChB,CAYA,SAAS8U,EAAO9U,GACd,OAAa,OAATA,GAAiB8J,GAAmB9J,IACtCuK,EAAQQ,KAAK,iBACNkG,EAAQjR,KAEjBuK,EAAQO,QAAQ9K,GACT8U,EACT,CAGA,SAASvG,EAAMvO,GAKb,OAJAuK,EAAQQ,KAAK,gBAINP,EAAGxK,EACZ,CACF,GAvGMgY,GAAe,CACnB/M,SA4GF,SAA8BV,EAASC,EAAI0D,GACzC,MAAMxC,EAAOpN,KACb,OAAO0Z,EAaP,SAASA,EAAahY,GAGpB,OAAI0L,EAAKN,OAAOgC,KAAK1B,EAAK2B,MAAM9P,MACvB2Q,EAAIlO,GAET8J,GAAmB9J,IACrBuK,EAAQK,MAAM,cACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,cACNiN,GASF1N,GAAaC,EAASwN,EAAa,aAAc,EAAjDzN,CAAwDtK,EACjE,CAYA,SAAS+X,EAAY/X,GACnB,MAAMoQ,EAAO1E,EAAKa,OAAOb,EAAKa,OAAOtP,OAAS,GAC9C,OAAOmT,GACY,eAAjBA,EAAK,GAAGxI,MACRwI,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMnT,QAAU,EAC9CuN,EAAGxK,GACH8J,GAAmB9J,GACnBgY,EAAahY,GACbkO,EAAIlO,EACV,CACF,EApKEwO,SAAS,GCDJ,MAAMyJ,GAAa,CACxBhc,KAAM,aACNgP,SA2DF,SAA4BV,EAASC,EAAI0D,GACvC,IAAIvD,EAAO,EACX,OAYA,SAAe3K,GAGb,OADAuK,EAAQK,MAAM,cAchB,SAAgB5K,GAEd,OADAuK,EAAQK,MAAM,sBACPsN,EAAalY,EACtB,CAhBSqJ,CAAOrJ,EAChB,EA2BA,SAASkY,EAAalY,GACpB,OAAa,KAATA,GAAe2K,IAAS,GAC1BJ,EAAQO,QAAQ9K,GACTkY,GAII,OAATlY,GAAiB+J,GAA0B/J,IAC7CuK,EAAQQ,KAAK,sBACNkG,EAAQjR,IAEVkO,EAAIlO,EACb,CAYA,SAASiR,EAAQjR,GACf,OAAa,KAATA,GACFuK,EAAQK,MAAM,sBACPuN,EAAgBnY,IAEZ,OAATA,GAAiB8J,GAAmB9J,IACtCuK,EAAQQ,KAAK,cAINP,EAAGxK,IAERgK,GAAchK,GACTsK,GAAaC,EAAS0G,EAAS,aAA/B3G,CAA6CtK,IAKtDuK,EAAQK,MAAM,kBACP1I,EAAKlC,GACd,CAcA,SAASmY,EAAgBnY,GACvB,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GACTmY,IAET5N,EAAQQ,KAAK,sBACNkG,EAAQjR,GACjB,CAYA,SAASkC,EAAKlC,GACZ,OAAa,OAATA,GAA0B,KAATA,GAAe+J,GAA0B/J,IAC5DuK,EAAQQ,KAAK,kBACNkG,EAAQjR,KAEjBuK,EAAQO,QAAQ9K,GACTkC,EACT,CACF,EA5LEgF,QAIF,SAA2BqF,EAAQ8C,GACjC,IAGIrE,EAEA+F,EALAf,EAAazD,EAAOtP,OAAS,EAC7BiO,EAAe,EAOkB,eAAjCqB,EAAOrB,GAAc,GAAGtD,OAC1BsD,GAAgB,GAKhB8E,EAAa,EAAI9E,GACc,eAA/BqB,EAAOyD,GAAY,GAAGpI,OAEtBoI,GAAc,GAGiB,uBAA/BzD,EAAOyD,GAAY,GAAGpI,OACrBsD,IAAiB8E,EAAa,GAC5BA,EAAa,EAAI9E,GACmB,eAAnCqB,EAAOyD,EAAa,GAAG,GAAGpI,QAE9BoI,GAAc9E,EAAe,IAAM8E,EAAa,EAAI,GAElDA,EAAa9E,IACfF,EAAU,CACRpD,KAAM,iBACNlK,MAAO6O,EAAOrB,GAAc,GAAGxN,MAC/BC,IAAK4O,EAAOyD,GAAY,GAAGrS,KAE7BoT,EAAO,CACLnJ,KAAM,YACNlK,MAAO6O,EAAOrB,GAAc,GAAGxN,MAC/BC,IAAK4O,EAAOyD,GAAY,GAAGrS,IAC3B8N,YAAa,QAEfnD,EAAOiE,EAAQrB,EAAc8E,EAAa9E,EAAe,EAAG,CAC1D,CAAC,QAASF,EAASqE,GACnB,CAAC,QAAS0B,EAAM1B,GAChB,CAAC,OAAQ0B,EAAM1B,GACf,CAAC,OAAQrE,EAASqE,MAGtB,OAAO9C,CACT,GC5DO,MAAM6L,GAAkB,CAC7Bnc,KAAM,kBACNgP,SAkEF,SAAiCV,EAASC,EAAI0D,GAC5C,MAAMxC,EAAOpN,KAEb,IAAImW,EACJ,OAaA,SAAezU,GACb,IAEIqY,EAFA/a,EAAQoO,EAAKa,OAAOtP,OAIxB,KAAOK,KAGL,GACiC,eAA/BoO,EAAKa,OAAOjP,GAAO,GAAGsK,MACS,eAA/B8D,EAAKa,OAAOjP,GAAO,GAAGsK,MACS,YAA/B8D,EAAKa,OAAOjP,GAAO,GAAGsK,KACtB,CACAyQ,EAA2C,cAA/B3M,EAAKa,OAAOjP,GAAO,GAAGsK,KAClC,KACF,CAKF,IAAK8D,EAAKN,OAAOgC,KAAK1B,EAAK2B,MAAM9P,QAAUmO,EAAKoB,WAAauL,GAG3D,OAFA9N,EAAQK,MAAM,qBACd6J,EAASzU,EAiBb,SAAgBA,GAEd,OADAuK,EAAQK,MAAM,6BACPkK,EAAO9U,EAChB,CAnBWqJ,CAAOrJ,GAEhB,OAAOkO,EAAIlO,EACb,EA6BA,SAAS8U,EAAO9U,GACd,OAAIA,IAASyU,GACXlK,EAAQO,QAAQ9K,GACT8U,IAETvK,EAAQQ,KAAK,6BACNf,GAAchK,GACjBsK,GAAaC,EAASgE,EAAO,aAA7BjE,CAA2CtK,GAC3CuO,EAAMvO,GACZ,CAaA,SAASuO,EAAMvO,GACb,OAAa,OAATA,GAAiB8J,GAAmB9J,IACtCuK,EAAQQ,KAAK,qBACNP,EAAGxK,IAELkO,EAAIlO,EACb,CACF,EAtKEuU,UAIF,SAAkChI,EAAQ8C,GAExC,IAEIrE,EAEA+F,EAEAmG,EANA5Z,EAAQiP,EAAOtP,OAUnB,KAAOK,KACL,GAAyB,UAArBiP,EAAOjP,GAAO,GAAgB,CAChC,GAA8B,YAA1BiP,EAAOjP,GAAO,GAAGsK,KAAoB,CACvCoD,EAAU1N,EACV,KACF,CAC8B,cAA1BiP,EAAOjP,GAAO,GAAGsK,OACnBmJ,EAAOzT,EAEX,KAGgC,YAA1BiP,EAAOjP,GAAO,GAAGsK,MAEnB2E,EAAOjE,OAAOhL,EAAO,GAElB4Z,GAAwC,eAA1B3K,EAAOjP,GAAO,GAAGsK,OAClCsP,EAAa5Z,GAInB,MAAMgb,EAAU,CACd1Q,KAAM,gBACNlK,MAAO9C,OAAOsL,OAAO,CAAC,EAAGqG,EAAOwE,GAAM,GAAGrT,OACzCC,IAAK/C,OAAOsL,OAAO,CAAC,EAAGqG,EAAOA,EAAOtP,OAAS,GAAG,GAAGU,MAItD4O,EAAOwE,GAAM,GAAGnJ,KAAO,oBAInBsP,GACF3K,EAAOjE,OAAOyI,EAAM,EAAG,CAAC,QAASuH,EAASjJ,IAC1C9C,EAAOjE,OAAO4O,EAAa,EAAG,EAAG,CAAC,OAAQ3K,EAAOvB,GAAS,GAAIqE,IAC9D9C,EAAOvB,GAAS,GAAGrN,IAAM/C,OAAOsL,OAAO,CAAC,EAAGqG,EAAO2K,GAAY,GAAGvZ,MAEjE4O,EAAOvB,GAAS,GAAKsN,EAKvB,OADA/L,EAAO7J,KAAK,CAAC,OAAQ4V,EAASjJ,IACvB9C,CACT,GC3DO,MAAMgM,GAAiB,CAC5B,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,SACA,UACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,MAeWC,GAAe,CAAC,MAAO,SAAU,QAAS,YCxE1CC,GAAW,CACtBxc,KAAM,WACNgP,SAsCF,SAA0BV,EAASC,EAAI0D,GACrC,MAAMxC,EAAOpN,KAEb,IAAImW,EAEAiE,EAEAzW,EAEA3E,EAEAqb,EACJ,OAYA,SAAe3Y,GAEb,OAaF,SAAgBA,GAId,OAHAuK,EAAQK,MAAM,YACdL,EAAQK,MAAM,gBACdL,EAAQO,QAAQ9K,GACTyV,CACT,CAlBSpM,CAAOrJ,EAChB,EAiCA,SAASyV,EAAKzV,GACZ,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GACT4Y,GAEI,KAAT5Y,GACFuK,EAAQO,QAAQ9K,GAChB0Y,GAAa,EACNG,GAEI,KAAT7Y,GACFuK,EAAQO,QAAQ9K,GAChByU,EAAS,EAMF/I,EAAKoB,UAAYtC,EAAKsO,GAI3BxP,GAAWtJ,IACbuK,EAAQO,QAAQ9K,GAEhBiC,EAAS2E,OAAOyD,aAAarK,GACtB+Y,GAEF7K,EAAIlO,EACb,CAgBA,SAAS4Y,EAAgB5Y,GACvB,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GAChByU,EAAS,EACFuE,GAEI,KAAThZ,GACFuK,EAAQO,QAAQ9K,GAChByU,EAAS,EACTnX,EAAQ,EACD2b,GAIL3P,GAAWtJ,IACbuK,EAAQO,QAAQ9K,GAChByU,EAAS,EAGF/I,EAAKoB,UAAYtC,EAAKsO,GAExB5K,EAAIlO,EACb,CAYA,SAASgZ,EAAkBhZ,GACzB,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GAGT0L,EAAKoB,UAAYtC,EAAKsO,GAExB5K,EAAIlO,EACb,CAYA,SAASiZ,EAAgBjZ,GACvB,MAAM5D,EAAQ,SACd,OAAI4D,IAAS5D,EAAMmD,WAAWjC,MAC5BiN,EAAQO,QAAQ9K,GACF5D,IAAVkB,EAGKoO,EAAKoB,UAAYtC,EAAKyB,EAExBgN,GAEF/K,EAAIlO,EACb,CAYA,SAAS6Y,EAAc7Y,GACrB,OAAIsJ,GAAWtJ,IACbuK,EAAQO,QAAQ9K,GAEhBiC,EAAS2E,OAAOyD,aAAarK,GACtB+Y,GAEF7K,EAAIlO,EACb,CAcA,SAAS+Y,EAAQ/Y,GACf,GACW,OAATA,GACS,KAATA,GACS,KAATA,GACA+J,GAA0B/J,GAC1B,CACA,MAAMkZ,EAAiB,KAATlZ,EACR/D,EAAOgG,EAAO+U,cACpB,OAAKkC,GAAUR,IAAcF,GAAahW,SAASvG,GAM/Csc,GAAe/V,SAASP,EAAO+U,gBACjCvC,EAAS,EACLyE,GACF3O,EAAQO,QAAQ9K,GACTmZ,GAKFzN,EAAKoB,UAAYtC,EAAGxK,GAAQiM,EAAajM,KAElDyU,EAAS,EAEF/I,EAAKoB,YAAcpB,EAAKN,OAAOgC,KAAK1B,EAAK2B,MAAM9P,MAClD2Q,EAAIlO,GACJ0Y,EACAU,EAAwBpZ,GACxBqZ,EAA4BrZ,KAtB9ByU,EAAS,EAGF/I,EAAKoB,UAAYtC,EAAGxK,GAAQiM,EAAajM,GAoBpD,CAGA,OAAa,KAATA,GAAewJ,GAAkBxJ,IACnCuK,EAAQO,QAAQ9K,GAChBiC,GAAU2E,OAAOyD,aAAarK,GACvB+Y,GAEF7K,EAAIlO,EACb,CAYA,SAASmZ,EAAiBnZ,GACxB,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GAGT0L,EAAKoB,UAAYtC,EAAKyB,GAExBiC,EAAIlO,EACb,CAYA,SAASoZ,EAAwBpZ,GAC/B,OAAIgK,GAAchK,IAChBuK,EAAQO,QAAQ9K,GACToZ,GAEFE,EAAYtZ,EACrB,CAyBA,SAASqZ,EAA4BrZ,GACnC,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GACTsZ,GAII,KAATtZ,GAAwB,KAATA,GAAesJ,GAAWtJ,IAC3CuK,EAAQO,QAAQ9K,GACTuZ,GAELvP,GAAchK,IAChBuK,EAAQO,QAAQ9K,GACTqZ,GAEFC,EAAYtZ,EACrB,CAgBA,SAASuZ,EAAsBvZ,GAE7B,OACW,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACAwJ,GAAkBxJ,IAElBuK,EAAQO,QAAQ9K,GACTuZ,GAEFC,EAA2BxZ,EACpC,CAeA,SAASwZ,EAA2BxZ,GAClC,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GACTyZ,GAELzP,GAAchK,IAChBuK,EAAQO,QAAQ9K,GACTwZ,GAEFH,EAA4BrZ,EACrC,CAeA,SAASyZ,EAA6BzZ,GACpC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEOkO,EAAIlO,GAEA,KAATA,GAAwB,KAATA,GACjBuK,EAAQO,QAAQ9K,GAChB2Y,EAAU3Y,EACH0Z,GAEL1P,GAAchK,IAChBuK,EAAQO,QAAQ9K,GACTyZ,GAEFE,EAA+B3Z,EACxC,CAcA,SAAS0Z,EAA6B1Z,GACpC,OAAIA,IAAS2Y,GACXpO,EAAQO,QAAQ9K,GAChB2Y,EAAU,KACHiB,GAEI,OAAT5Z,GAAiB8J,GAAmB9J,GAC/BkO,EAAIlO,IAEbuK,EAAQO,QAAQ9K,GACT0Z,EACT,CAYA,SAASC,EAA+B3Z,GACtC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACA+J,GAA0B/J,GAEnBwZ,EAA2BxZ,IAEpCuK,EAAQO,QAAQ9K,GACT2Z,EACT,CAaA,SAASC,EAAkC5Z,GACzC,OAAa,KAATA,GAAwB,KAATA,GAAegK,GAAchK,GACvCqZ,EAA4BrZ,GAE9BkO,EAAIlO,EACb,CAYA,SAASsZ,EAAYtZ,GACnB,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GACT6Z,GAEF3L,EAAIlO,EACb,CAYA,SAAS6Z,EAAc7Z,GACrB,OAAa,OAATA,GAAiB8J,GAAmB9J,GAG/BiM,EAAajM,GAElBgK,GAAchK,IAChBuK,EAAQO,QAAQ9K,GACT6Z,GAEF3L,EAAIlO,EACb,CAYA,SAASiM,EAAajM,GACpB,OAAa,KAATA,GAA0B,IAAXyU,GACjBlK,EAAQO,QAAQ9K,GACT8Z,GAEI,KAAT9Z,GAA0B,IAAXyU,GACjBlK,EAAQO,QAAQ9K,GACT+Z,GAEI,KAAT/Z,GAA0B,IAAXyU,GACjBlK,EAAQO,QAAQ9K,GACTga,GAEI,KAATha,GAA0B,IAAXyU,GACjBlK,EAAQO,QAAQ9K,GACT8Y,GAEI,KAAT9Y,GAA0B,IAAXyU,GACjBlK,EAAQO,QAAQ9K,GACTia,IAELnQ,GAAmB9J,IAAqB,IAAXyU,GAA2B,IAAXA,EAQpC,OAATzU,GAAiB8J,GAAmB9J,IACtCuK,EAAQQ,KAAK,gBACNmP,EAAkBla,KAE3BuK,EAAQO,QAAQ9K,GACTiM,IAZL1B,EAAQQ,KAAK,gBACNR,EAAQyC,MACbmN,GACAC,EACAF,EAHK3P,CAILvK,GAQN,CAaA,SAASka,EAAkBla,GACzB,OAAOuK,EAAQyC,MACbqN,GACAC,EACAF,EAHK7P,CAILvK,EACJ,CAaA,SAASsa,EAAyBta,GAIhC,OAHAuK,EAAQK,MAAM,cACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,cACNwP,CACT,CAaA,SAASA,EAAmBva,GAC1B,OAAa,OAATA,GAAiB8J,GAAmB9J,GAC/Bka,EAAkBla,IAE3BuK,EAAQK,MAAM,gBACPqB,EAAajM,GACtB,CAYA,SAAS8Z,EAA0B9Z,GACjC,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GACT8Y,GAEF7M,EAAajM,EACtB,CAYA,SAAS+Z,EAAuB/Z,GAC9B,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GAChBiC,EAAS,GACFuY,GAEFvO,EAAajM,EACtB,CAYA,SAASwa,EAAsBxa,GAC7B,GAAa,KAATA,EAAa,CACf,MAAM/D,EAAOgG,EAAO+U,cACpB,OAAIwB,GAAahW,SAASvG,IACxBsO,EAAQO,QAAQ9K,GACTga,GAEF/N,EAAajM,EACtB,CACA,OAAIsJ,GAAWtJ,IAASiC,EAAOhF,OAAS,GACtCsN,EAAQO,QAAQ9K,GAEhBiC,GAAU2E,OAAOyD,aAAarK,GACvBwa,GAEFvO,EAAajM,EACtB,CAYA,SAASia,EAAwBja,GAC/B,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GACT8Y,GAEF7M,EAAajM,EACtB,CAoBA,SAAS8Y,EAA8B9Y,GACrC,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GACTga,GAII,KAATha,GAA0B,IAAXyU,GACjBlK,EAAQO,QAAQ9K,GACT8Y,GAEF7M,EAAajM,EACtB,CAYA,SAASga,EAAkBha,GACzB,OAAa,OAATA,GAAiB8J,GAAmB9J,IACtCuK,EAAQQ,KAAK,gBACNqP,EAAkBpa,KAE3BuK,EAAQO,QAAQ9K,GACTga,EACT,CAYA,SAASI,EAAkBpa,GAMzB,OALAuK,EAAQQ,KAAK,YAKNP,EAAGxK,EACZ,CACF,EArzBEuU,UAeF,SAA2BhI,GACzB,IAAIjP,EAAQiP,EAAOtP,OACnB,KAAOK,MACoB,UAArBiP,EAAOjP,GAAO,IAA4C,aAA1BiP,EAAOjP,GAAO,GAAGsK,QAInDtK,EAAQ,GAAmC,eAA9BiP,EAAOjP,EAAQ,GAAG,GAAGsK,OAEpC2E,EAAOjP,GAAO,GAAGI,MAAQ6O,EAAOjP,EAAQ,GAAG,GAAGI,MAE9C6O,EAAOjP,EAAQ,GAAG,GAAGI,MAAQ6O,EAAOjP,EAAQ,GAAG,GAAGI,MAElD6O,EAAOjE,OAAOhL,EAAQ,EAAG,IAE3B,OAAOiP,CACT,EA9BEK,UAAU,GAINuN,GAAkB,CACtBlP,SAk2BF,SAAiCV,EAASC,EAAI0D,GAC5C,OAaA,SAAelO,GAIb,OAHAuK,EAAQK,MAAM,cACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,cACNR,EAAQY,QAAQmD,GAAW9D,EAAI0D,EACxC,CACF,EAr3BEM,SAAS,GAEL6L,GAA2B,CAC/BpP,SAizBF,SAA0CV,EAASC,EAAI0D,GACrD,MAAMxC,EAAOpN,KACb,OAaA,SAAe0B,GACb,GAAI8J,GAAmB9J,GAIrB,OAHAuK,EAAQK,MAAM,cACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,cACNwD,EAET,OAAOL,EAAIlO,EACb,EAaA,SAASuO,EAAMvO,GACb,OAAO0L,EAAKN,OAAOgC,KAAK1B,EAAK2B,MAAM9P,MAAQ2Q,EAAIlO,GAAQwK,EAAGxK,EAC5D,CACF,EAv1BEwO,SAAS,GCvBX,MAAMiM,GAAsB,CAC1BxP,SAwbF,SAAqCV,EAASC,EAAI0D,GAChD,MAAMxC,EAAOpN,KACb,OAOA,SAAe0B,GACb,GAAa,OAATA,EACF,OAAOkO,EAAIlO,GAKb,OAHAuK,EAAQK,MAAM,cACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,cACNO,CACT,EAOA,SAASA,EAAUtL,GACjB,OAAO0L,EAAKN,OAAOgC,KAAK1B,EAAK2B,MAAM9P,MAAQ2Q,EAAIlO,GAAQwK,EAAGxK,EAC5D,CACF,EAldEwO,SAAS,GAIEkM,GAAa,CACxBze,KAAM,aACNgP,SAQF,SAA4BV,EAASC,EAAI0D,GACvC,MAAMxC,EAAOpN,KAEPqc,EAAa,CACjB1P,SA+SF,SAA4BV,EAASC,EAAI0D,GACvC,IAAIvD,EAAO,EACX,OAAOiQ,EAOP,SAASA,EAAY5a,GAInB,OAHAuK,EAAQK,MAAM,cACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,cACNrN,CACT,CAcA,SAASA,EAAMsC,GAKb,OADAuK,EAAQK,MAAM,mBACPZ,GAAchK,GACjBsK,GACEC,EACAsQ,EACA,aACAnP,EAAKN,OAAOjC,WAAWiF,QAAQC,KAAK7L,SAAS,qBACzCrE,EACA,EANNmM,CAOEtK,GACF6a,EAAoB7a,EAC1B,CAcA,SAAS6a,EAAoB7a,GAC3B,OAAIA,IAASyU,GACXlK,EAAQK,MAAM,2BACPkQ,EAAc9a,IAEhBkO,EAAIlO,EACb,CAcA,SAAS8a,EAAc9a,GACrB,OAAIA,IAASyU,GACX9J,IACAJ,EAAQO,QAAQ9K,GACT8a,GAELnQ,GAAQoQ,GACVxQ,EAAQQ,KAAK,2BACNf,GAAchK,GACjBsK,GAAaC,EAASyQ,EAAoB,aAA1C1Q,CAAwDtK,GACxDgb,EAAmBhb,IAElBkO,EAAIlO,EACb,CAcA,SAASgb,EAAmBhb,GAC1B,OAAa,OAATA,GAAiB8J,GAAmB9J,IACtCuK,EAAQQ,KAAK,mBACNP,EAAGxK,IAELkO,EAAIlO,EACb,CACF,EA7ZEwO,SAAS,GAEX,IAGIiG,EAHAwG,EAAgB,EAChBF,EAAW,EAGf,OAcA,SAAe/a,GAEb,OAeF,SAA4BA,GAC1B,MAAMoQ,EAAO1E,EAAKa,OAAOb,EAAKa,OAAOtP,OAAS,GAS9C,OARAge,EACE7K,GAAyB,eAAjBA,EAAK,GAAGxI,KACZwI,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAMnT,OACtC,EACNwX,EAASzU,EACTuK,EAAQK,MAAM,cACdL,EAAQK,MAAM,mBACdL,EAAQK,MAAM,2BACPsN,EAAalY,EACtB,CA1BSkb,CAAmBlb,EAC5B,EAuCA,SAASkY,EAAalY,GACpB,OAAIA,IAASyU,GACXsG,IACAxQ,EAAQO,QAAQ9K,GACTkY,GAEL6C,EAAW,EACN7M,EAAIlO,IAEbuK,EAAQQ,KAAK,2BACNf,GAAchK,GACjBsK,GAAaC,EAAS4Q,EAAY,aAAlC7Q,CAAgDtK,GAChDmb,EAAWnb,GACjB,CAcA,SAASmb,EAAWnb,GAClB,OAAa,OAATA,GAAiB8J,GAAmB9J,IACtCuK,EAAQQ,KAAK,mBACNW,EAAKoB,UACRtC,EAAGxK,GACHuK,EAAQyC,MAAMyN,GAAqBW,EAAgB7M,EAAnDhE,CAA0DvK,KAEhEuK,EAAQK,MAAM,uBACdL,EAAQK,MAAM,cAAe,CAC3Ba,YAAa,WAER3I,EAAK9C,GACd,CAcA,SAAS8C,EAAK9C,GACZ,OAAa,OAATA,GAAiB8J,GAAmB9J,IACtCuK,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,uBACNoQ,EAAWnb,IAEhBgK,GAAchK,IAChBuK,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,uBACNT,GAAaC,EAAS8Q,EAAY,aAAlC/Q,CAAgDtK,IAE5C,KAATA,GAAeA,IAASyU,EACnBvG,EAAIlO,IAEbuK,EAAQO,QAAQ9K,GACT8C,EACT,CAcA,SAASuY,EAAWrb,GAClB,OAAa,OAATA,GAAiB8J,GAAmB9J,GAC/Bmb,EAAWnb,IAEpBuK,EAAQK,MAAM,uBACdL,EAAQK,MAAM,cAAe,CAC3Ba,YAAa,WAER6P,EAAKtb,GACd,CAcA,SAASsb,EAAKtb,GACZ,OAAa,OAATA,GAAiB8J,GAAmB9J,IACtCuK,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,uBACNoQ,EAAWnb,IAEP,KAATA,GAAeA,IAASyU,EACnBvG,EAAIlO,IAEbuK,EAAQO,QAAQ9K,GACTsb,EACT,CAeA,SAASF,EAAepb,GACtB,OAAOuK,EAAQY,QAAQwP,EAAYpM,EAAOgN,EAAnChR,CAAkDvK,EAC3D,CAcA,SAASub,EAAcvb,GAIrB,OAHAuK,EAAQK,MAAM,cACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,cACNG,CACT,CAcA,SAASA,EAAalL,GACpB,OAAOib,EAAgB,GAAKjR,GAAchK,GACtCsK,GACEC,EACAiR,EACA,aACAP,EAAgB,EAJlB3Q,CAKEtK,GACFwb,EAAmBxb,EACzB,CAcA,SAASwb,EAAmBxb,GAC1B,OAAa,OAATA,GAAiB8J,GAAmB9J,GAC/BuK,EAAQyC,MAAMyN,GAAqBW,EAAgB7M,EAAnDhE,CAA0DvK,IAEnEuK,EAAQK,MAAM,iBACP6Q,EAAazb,GACtB,CAcA,SAASyb,EAAazb,GACpB,OAAa,OAATA,GAAiB8J,GAAmB9J,IACtCuK,EAAQQ,KAAK,iBACNyQ,EAAmBxb,KAE5BuK,EAAQO,QAAQ9K,GACTyb,EACT,CAcA,SAASlN,EAAMvO,GAEb,OADAuK,EAAQQ,KAAK,cACNP,EAAGxK,EACZ,CAsHF,EA1aE4M,UAAU,GChBZ,MAAM,GAAUuB,SAASuN,cAAc,KAMhC,SAASC,GAA8Bvf,GAC5C,MAAMwf,EAAqB,IAAMxf,EAAQ,IACzC,GAAQyf,UAAYD,EACpB,MAAME,EAAO,GAAQC,YAUrB,OAAyC,KAArCD,EAAKvc,WAAWuc,EAAK7e,OAAS,IAAiC,SAAVb,KAQlD0f,IAASF,GAA6BE,EAC/C,CCjBO,MAAMF,GAAqB,CAChC3f,KAAM,qBACNgP,SAOF,SAAoCV,EAASC,EAAI0D,GAC/C,MAAMxC,EAAOpN,KACb,IAEImM,EAEAL,EAJAO,EAAO,EAKX,OAgBA,SAAe3K,GAKb,OAJAuK,EAAQK,MAAM,sBACdL,EAAQK,MAAM,4BACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,4BACN0K,CACT,EAiBA,SAASA,EAAKzV,GACZ,OAAa,KAATA,GACFuK,EAAQK,MAAM,mCACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,mCACNiR,IAETzR,EAAQK,MAAM,2BACdH,EAAM,GACNL,EAAOZ,GACApN,EAAM4D,GACf,CAcA,SAASgc,EAAQhc,GACf,OAAa,KAATA,GAAwB,MAATA,GACjBuK,EAAQK,MAAM,uCACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,uCACbR,EAAQK,MAAM,2BACdH,EAAM,EACNL,EAAOR,GACAxN,IAETmO,EAAQK,MAAM,2BACdH,EAAM,EACNL,EAAOT,GACAvN,EAAM4D,GACf,CAmBA,SAAS5D,EAAM4D,GACb,GAAa,KAATA,GAAe2K,EAAM,CACvB,MAAMa,EAAQjB,EAAQQ,KAAK,2BAC3B,OACEX,IAASZ,IACRmS,GAA8BjQ,EAAK2E,eAAe7E,KAOrDjB,EAAQK,MAAM,4BACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,4BACbR,EAAQQ,KAAK,sBACNP,GATE0D,EAAIlO,EAUf,CACA,OAAIoK,EAAKpK,IAAS2K,IAASF,GACzBF,EAAQO,QAAQ9K,GACT5D,GAEF8R,EAAIlO,EACb,CACF,GC/IO,MAAMic,GAAkB,CAC7BhgB,KAAM,kBACNgP,SAOF,SAAiCV,EAASC,EAAI0D,GAC5C,OAYA,SAAelO,GAKb,OAJAuK,EAAQK,MAAM,mBACdL,EAAQK,MAAM,gBACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,gBACN+J,CACT,EAYA,SAASA,EAAO9U,GAEd,OAAI6J,GAAiB7J,IACnBuK,EAAQK,MAAM,wBACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,wBACbR,EAAQQ,KAAK,mBACNP,GAEF0D,EAAIlO,EACb,CACF,GClDO,MAAMkc,GAAa,CACxBjgB,KAAM,aACNgP,SAOF,SAA4BV,EAASC,GACnC,OAGA,SAAexK,GAIb,OAHAuK,EAAQK,MAAM,cACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,cACNT,GAAaC,EAASC,EAAI,aACnC,CACF,GCVO,MAAM2R,GAAW,CACtBlgB,KAAM,WACNgP,SA8IF,SAA0BV,EAASC,EAAI0D,GACrC,MAAMxC,EAAOpN,KACb,IAEI8d,EAEA1E,EAJApa,EAAQoO,EAAKa,OAAOtP,OAOxB,KAAOK,KACL,IACkC,eAA/BoO,EAAKa,OAAOjP,GAAO,GAAGsK,MACU,cAA/B8D,EAAKa,OAAOjP,GAAO,GAAGsK,QACvB8D,EAAKa,OAAOjP,GAAO,GAAG+e,UACvB,CACAD,EAAa1Q,EAAKa,OAAOjP,GAAO,GAChC,KACF,CAEF,OAiBA,SAAe0C,GAEb,IAAKoc,EACH,OAAOlO,EAAIlO,GAYb,GAAIoc,EAAWE,UACb,OAAOC,EAAYvc,GAerB,OAbA0X,EAAUhM,EAAKN,OAAOsM,QAAQlV,SAC5BsU,GACEpL,EAAK2E,eAAe,CAClB3S,MAAO0e,EAAWze,IAClBA,IAAK+N,EAAK2B,UAIhB9C,EAAQK,MAAM,YACdL,EAAQK,MAAM,eACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,YACNwD,CACT,EAkBA,SAASA,EAAMvO,GAKb,OAAa,KAATA,EACKuK,EAAQY,QACbqR,GACAC,EACA/E,EAAU+E,EAAaF,EAHlBhS,CAILvK,GAIS,KAATA,EACKuK,EAAQY,QACbuR,GACAD,EACA/E,EAAUiF,EAAmBJ,EAHxBhS,CAILvK,GAIG0X,EAAU+E,EAAWzc,GAAQuc,EAAYvc,EAClD,CAgBA,SAAS2c,EAAiB3c,GACxB,OAAOuK,EAAQY,QACbyR,GACAH,EACAF,EAHKhS,CAILvK,EACJ,CAkBA,SAASyc,EAAWzc,GAElB,OAAOwK,EAAGxK,EACZ,CAkBA,SAASuc,EAAYvc,GAEnB,OADAoc,EAAWC,WAAY,EAChBnO,EAAIlO,EACb,CACF,EA5TEuU,UAqCF,SAA2BhI,EAAQ8C,GACjC,IAGI7D,EAEAiK,EAEAoH,EAEAC,EATAxf,EAAQiP,EAAOtP,OACfqQ,EAAS,EAWb,KAAOhQ,KAEL,GADAkO,EAAQe,EAAOjP,GAAO,GAClBmY,EAAM,CAER,GACiB,SAAfjK,EAAM5D,MACU,cAAf4D,EAAM5D,MAAwB4D,EAAM8Q,UAErC,MAKuB,UAArB/P,EAAOjP,GAAO,IAAiC,cAAfkO,EAAM5D,OACxC4D,EAAM8Q,WAAY,EAEtB,MAAO,GAAIO,GACT,GACuB,UAArBtQ,EAAOjP,GAAO,KACE,eAAfkO,EAAM5D,MAAwC,cAAf4D,EAAM5D,QACrC4D,EAAM6Q,YAEP5G,EAAOnY,EACY,cAAfkO,EAAM5D,MAAsB,CAC9B0F,EAAS,EACT,KACF,MAEsB,aAAf9B,EAAM5D,OACfiV,EAAQvf,GAGZ,MAAMyf,EAAQ,CACZnV,KAA+B,cAAzB2E,EAAOkJ,GAAM,GAAG7N,KAAuB,OAAS,QACtDlK,MAAO9C,OAAOsL,OAAO,CAAC,EAAGqG,EAAOkJ,GAAM,GAAG/X,OACzCC,IAAK/C,OAAOsL,OAAO,CAAC,EAAGqG,EAAOA,EAAOtP,OAAS,GAAG,GAAGU,MAEhDqf,EAAQ,CACZpV,KAAM,QACNlK,MAAO9C,OAAOsL,OAAO,CAAC,EAAGqG,EAAOkJ,GAAM,GAAG/X,OACzCC,IAAK/C,OAAOsL,OAAO,CAAC,EAAGqG,EAAOsQ,GAAO,GAAGlf,MAEpCoT,EAAO,CACXnJ,KAAM,YACNlK,MAAO9C,OAAOsL,OAAO,CAAC,EAAGqG,EAAOkJ,EAAOnI,EAAS,GAAG,GAAG3P,KACtDA,IAAK/C,OAAOsL,OAAO,CAAC,EAAGqG,EAAOsQ,EAAQ,GAAG,GAAGnf,QAuC9C,OArCAof,EAAQ,CACN,CAAC,QAASC,EAAO1N,GACjB,CAAC,QAAS2N,EAAO3N,IAInByN,EAAQpa,EAAKoa,EAAOvQ,EAAOlO,MAAMoX,EAAO,EAAGA,EAAOnI,EAAS,IAG3DwP,EAAQpa,EAAKoa,EAAO,CAAC,CAAC,QAAS/L,EAAM1B,KAKrCyN,EAAQpa,EACNoa,EACApM,GACErB,EAAQjE,OAAOjC,WAAW8T,WAAW5O,KACrC9B,EAAOlO,MAAMoX,EAAOnI,EAAS,EAAGuP,EAAQ,GACxCxN,IAKJyN,EAAQpa,EAAKoa,EAAO,CAClB,CAAC,OAAQ/L,EAAM1B,GACf9C,EAAOsQ,EAAQ,GACftQ,EAAOsQ,EAAQ,GACf,CAAC,OAAQG,EAAO3N,KAIlByN,EAAQpa,EAAKoa,EAAOvQ,EAAOlO,MAAMwe,EAAQ,IAGzCC,EAAQpa,EAAKoa,EAAO,CAAC,CAAC,OAAQC,EAAO1N,KACrC/G,EAAOiE,EAAQkJ,EAAMlJ,EAAOtP,OAAQ6f,GAC7BvQ,CACT,EAtIEmE,WAiBF,SAA4BnE,GAC1B,IAAIjP,GAAS,EACb,OAASA,EAAQiP,EAAOtP,QAAQ,CAC9B,MAAMuO,EAAQe,EAAOjP,GAAO,GAEX,eAAfkO,EAAM5D,MACS,cAAf4D,EAAM5D,MACS,aAAf4D,EAAM5D,OAGN2E,EAAOjE,OAAOhL,EAAQ,EAAkB,eAAfkO,EAAM5D,KAAwB,EAAI,GAC3D4D,EAAM5D,KAAO,OACbtK,IAEJ,CACA,OAAOiP,CACT,GA7BMiQ,GAAoB,CACxBvR,SA4TF,SAA0BV,EAASC,EAAI0D,GACrC,OAYA,SAAuBlO,GAKrB,OAJAuK,EAAQK,MAAM,YACdL,EAAQK,MAAM,kBACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,kBACNmS,CACT,EAYA,SAASA,EAAeld,GACtB,OAAO+J,GAA0B/J,GAC7B6W,GAAkBtM,EAAS4S,EAA3BtG,CAAyC7W,GACzCmd,EAAand,EACnB,CAYA,SAASmd,EAAand,GACpB,OAAa,KAATA,EACKod,EAAYpd,GAEd2V,GACLpL,EACA8S,EACAC,EACA,sBACA,6BACA,mCACA,yBACA,4BACA,GATK3H,CAUL3V,EACJ,CAYA,SAASqd,EAAyBrd,GAChC,OAAO+J,GAA0B/J,GAC7B6W,GAAkBtM,EAASgT,EAA3B1G,CAA4C7W,GAC5Cod,EAAYpd,EAClB,CAYA,SAASsd,EAA2Btd,GAClC,OAAOkO,EAAIlO,EACb,CAYA,SAASud,EAAgBvd,GACvB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACzB0W,GACLnM,EACAiT,EACAtP,EACA,gBACA,sBACA,sBANKwI,CAOL1W,GAEGod,EAAYpd,EACrB,CAYA,SAASwd,EAAmBxd,GAC1B,OAAO+J,GAA0B/J,GAC7B6W,GAAkBtM,EAAS6S,EAA3BvG,CAAwC7W,GACxCod,EAAYpd,EAClB,CAYA,SAASod,EAAYpd,GACnB,OAAa,KAATA,GACFuK,EAAQK,MAAM,kBACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,kBACbR,EAAQQ,KAAK,YACNP,GAEF0D,EAAIlO,EACb,CACF,GAndM0c,GAAyB,CAC7BzR,SAwdF,SAA+BV,EAASC,EAAI0D,GAC1C,MAAMxC,EAAOpN,KACb,OAYA,SAAuB0B,GACrB,OAAOsW,GAAa/a,KAClBmQ,EACAnB,EACAkT,EACAC,EACA,YACA,kBACA,kBAPKpH,CAQLtW,EACJ,EAYA,SAASyd,EAAmBzd,GAC1B,OAAO0L,EAAKN,OAAOsM,QAAQlV,SACzBsU,GACEpL,EAAK2E,eAAe3E,EAAKa,OAAOb,EAAKa,OAAOtP,OAAS,GAAG,IAAIoB,MAAM,GAAI,KAGtEmM,EAAGxK,GACHkO,EAAIlO,EACV,CAYA,SAAS0d,EAAqB1d,GAC5B,OAAOkO,EAAIlO,EACb,CACF,GAhhBM4c,GAA8B,CAClC3R,SAqhBF,SAAoCV,EAASC,EAAI0D,GAC/C,OAcA,SAAiClO,GAO/B,OAJAuK,EAAQK,MAAM,aACdL,EAAQK,MAAM,mBACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,mBACN4S,CACT,EAcA,SAASA,EAAuB3d,GAC9B,OAAa,KAATA,GACFuK,EAAQK,MAAM,mBACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,mBACbR,EAAQQ,KAAK,aACNP,GAEF0D,EAAIlO,EACb,CACF,GC9lBO,MAAM4d,GAAkB,CAC7B3hB,KAAM,kBACNgP,SAQF,SAAiCV,EAASC,EAAI0D,GAC5C,MAAMxC,EAAOpN,KACb,OAYA,SAAe0B,GAKb,OAJAuK,EAAQK,MAAM,cACdL,EAAQK,MAAM,oBACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,oBACN0K,CACT,EAYA,SAASA,EAAKzV,GACZ,OAAa,KAATA,GACFuK,EAAQK,MAAM,eACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,cACNwD,GAEFL,EAAIlO,EACb,CA6BA,SAASuO,EAAMvO,GAMb,OAAgB,KAATA,GAAe,2BAA4B0L,EAAKN,OAAOjC,WAC1D+E,EAAIlO,GACJwK,EAAGxK,EACT,CACF,EAvFE0Q,WAAYyL,GAASzL,YCUhB,SAASmN,GAAkB7d,GAChC,OACW,OAATA,GACA+J,GAA0B/J,IAC1BkK,GAAkBlK,GAEX,EAELiK,GAAmBjK,GACd,OADT,CAGF,CClBO,MAAM8d,GAAY,CACvB7hB,KAAM,YACNgP,SA4KF,SAA2BV,EAASC,GAClC,MAAMuT,EAAmBzf,KAAK8M,OAAOjC,WAAW4U,iBAAiB1P,KAC3D9C,EAAWjN,KAAKiN,SAChBlC,EAASwU,GAAkBtS,GAGjC,IAAIkJ,EACJ,OAYA,SAAezU,GAGb,OAFAyU,EAASzU,EACTuK,EAAQK,MAAM,qBACPkK,EAAO9U,EAChB,EAYA,SAAS8U,EAAO9U,GACd,GAAIA,IAASyU,EAEX,OADAlK,EAAQO,QAAQ9K,GACT8U,EAET,MAAMtJ,EAAQjB,EAAQQ,KAAK,qBAGrBwD,EAAQsP,GAAkB7d,GAI1ByV,GACHlH,GAAoB,IAAVA,GAAelF,GAAW0U,EAAiBvb,SAASxC,GAC3D6c,GACHxT,GAAsB,IAAXA,GAAgBkF,GAAUwP,EAAiBvb,SAAS+I,GAGlE,OAFAC,EAAMwS,MAAQlW,QAAmB,KAAX2M,EAAgBgB,EAAOA,IAASpM,IAAWwT,IACjErR,EAAMyS,OAASnW,QAAmB,KAAX2M,EAAgBoI,EAAQA,IAAUtO,IAAUkH,IAC5DjL,EAAGxK,EACZ,CACF,EAlOE0Q,WAQF,SAA6BnE,EAAQ8C,GACnC,IAEIoG,EAEAsH,EAEAhM,EAEAmN,EAEAC,EAEAxZ,EAEAyZ,EAEA9Q,EAhBAhQ,GAAS,EAsBb,OAASA,EAAQiP,EAAOtP,QAEtB,GACuB,UAArBsP,EAAOjP,GAAO,IACY,sBAA1BiP,EAAOjP,GAAO,GAAGsK,MACjB2E,EAAOjP,GAAO,GAAG2gB,OAKjB,IAHAxI,EAAOnY,EAGAmY,KAEL,GACsB,SAApBlJ,EAAOkJ,GAAM,IACY,sBAAzBlJ,EAAOkJ,GAAM,GAAG7N,MAChB2E,EAAOkJ,GAAM,GAAGuI,OAEhB3O,EAAQgB,eAAe9D,EAAOkJ,GAAM,IAAIlW,WAAW,KACjD8P,EAAQgB,eAAe9D,EAAOjP,GAAO,IAAIiC,WAAW,GACtD,CAKA,IACGgN,EAAOkJ,GAAM,GAAGwI,QAAU1R,EAAOjP,GAAO,GAAG0gB,SAC3CzR,EAAOjP,GAAO,GAAGK,IAAI2P,OAASf,EAAOjP,GAAO,GAAGI,MAAM4P,QAAU,MAE7Df,EAAOkJ,GAAM,GAAG9X,IAAI2P,OACnBf,EAAOkJ,GAAM,GAAG/X,MAAM4P,OACtBf,EAAOjP,GAAO,GAAGK,IAAI2P,OACrBf,EAAOjP,GAAO,GAAGI,MAAM4P,QACzB,GAGF,SAIF3I,EACE4H,EAAOkJ,GAAM,GAAG9X,IAAI2P,OAASf,EAAOkJ,GAAM,GAAG/X,MAAM4P,OAAS,GAC5Df,EAAOjP,GAAO,GAAGK,IAAI2P,OAASf,EAAOjP,GAAO,GAAGI,MAAM4P,OAAS,EAC1D,EACA,EACN,MAAM5P,EAAQ9C,OAAOsL,OAAO,CAAC,EAAGqG,EAAOkJ,GAAM,GAAG9X,KAC1CA,EAAM/C,OAAOsL,OAAO,CAAC,EAAGqG,EAAOjP,GAAO,GAAGI,OAC/C2gB,GAAU3gB,GAAQiH,GAClB0Z,GAAU1gB,EAAKgH,GACfuZ,EAAkB,CAChBtW,KAAMjD,EAAM,EAAI,iBAAmB,mBACnCjH,QACAC,IAAK/C,OAAOsL,OAAO,CAAC,EAAGqG,EAAOkJ,GAAM,GAAG9X,MAEzCwgB,EAAkB,CAChBvW,KAAMjD,EAAM,EAAI,iBAAmB,mBACnCjH,MAAO9C,OAAOsL,OAAO,CAAC,EAAGqG,EAAOjP,GAAO,GAAGI,OAC1CC,OAEFoT,EAAO,CACLnJ,KAAMjD,EAAM,EAAI,aAAe,eAC/BjH,MAAO9C,OAAOsL,OAAO,CAAC,EAAGqG,EAAOkJ,GAAM,GAAG9X,KACzCA,IAAK/C,OAAOsL,OAAO,CAAC,EAAGqG,EAAOjP,GAAO,GAAGI,QAE1Cqf,EAAQ,CACNnV,KAAMjD,EAAM,EAAI,SAAW,WAC3BjH,MAAO9C,OAAOsL,OAAO,CAAC,EAAGgY,EAAgBxgB,OACzCC,IAAK/C,OAAOsL,OAAO,CAAC,EAAGiY,EAAgBxgB,MAEzC4O,EAAOkJ,GAAM,GAAG9X,IAAM/C,OAAOsL,OAAO,CAAC,EAAGgY,EAAgBxgB,OACxD6O,EAAOjP,GAAO,GAAGI,MAAQ9C,OAAOsL,OAAO,CAAC,EAAGiY,EAAgBxgB,KAC3DygB,EAAa,GAGT7R,EAAOkJ,GAAM,GAAG9X,IAAI2P,OAASf,EAAOkJ,GAAM,GAAG/X,MAAM4P,SACrD8Q,EAAa1b,EAAK0b,EAAY,CAC5B,CAAC,QAAS7R,EAAOkJ,GAAM,GAAIpG,GAC3B,CAAC,OAAQ9C,EAAOkJ,GAAM,GAAIpG,MAK9B+O,EAAa1b,EAAK0b,EAAY,CAC5B,CAAC,QAASrB,EAAO1N,GACjB,CAAC,QAAS6O,EAAiB7O,GAC3B,CAAC,OAAQ6O,EAAiB7O,GAC1B,CAAC,QAAS0B,EAAM1B,KAMlB+O,EAAa1b,EACX0b,EACA1N,GACErB,EAAQjE,OAAOjC,WAAW8T,WAAW5O,KACrC9B,EAAOlO,MAAMoX,EAAO,EAAGnY,GACvB+R,IAKJ+O,EAAa1b,EAAK0b,EAAY,CAC5B,CAAC,OAAQrN,EAAM1B,GACf,CAAC,QAAS8O,EAAiB9O,GAC3B,CAAC,OAAQ8O,EAAiB9O,GAC1B,CAAC,OAAQ0N,EAAO1N,KAId9C,EAAOjP,GAAO,GAAGK,IAAI2P,OAASf,EAAOjP,GAAO,GAAGI,MAAM4P,QACvDA,EAAS,EACT8Q,EAAa1b,EAAK0b,EAAY,CAC5B,CAAC,QAAS7R,EAAOjP,GAAO,GAAI+R,GAC5B,CAAC,OAAQ9C,EAAOjP,GAAO,GAAI+R,MAG7B/B,EAAS,EAEXhF,EAAOiE,EAAQkJ,EAAO,EAAGnY,EAAQmY,EAAO,EAAG2I,GAC3C9gB,EAAQmY,EAAO2I,EAAWnhB,OAASqQ,EAAS,EAC5C,KACF,CAMNhQ,GAAS,EACT,OAASA,EAAQiP,EAAOtP,QACQ,sBAA1BsP,EAAOjP,GAAO,GAAGsK,OACnB2E,EAAOjP,GAAO,GAAGsK,KAAO,QAG5B,OAAO2E,CACT,GAyEA,SAAS8R,GAAUhhB,EAAOiQ,GACxBjQ,EAAMG,QAAU8P,EAChBjQ,EAAMiQ,QAAUA,EAChBjQ,EAAMoU,cAAgBnE,CACxB,CCvPO,MAAMgR,GAAW,CACtBriB,KAAM,WACNgP,SAOF,SAA0BV,EAASC,EAAI0D,GACrC,IAAIvD,EAAO,EACX,OAcA,SAAe3K,GAMb,OALAuK,EAAQK,MAAM,YACdL,EAAQK,MAAM,kBACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,kBACbR,EAAQK,MAAM,oBACP6K,CACT,EAcA,SAASA,EAAKzV,GACZ,OAAIsJ,GAAWtJ,IACbuK,EAAQO,QAAQ9K,GACTue,GAEFC,EAAWxe,EACpB,CAcA,SAASue,EAAmBve,GAE1B,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAewJ,GAAkBxJ,IAEjE2K,EAAO,EACA8T,EAAyBze,IAE3Bwe,EAAWxe,EACpB,CAcA,SAASye,EAAyBze,GAChC,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GAChB2K,EAAO,EACA+T,IAKG,KAAT1e,GAAwB,KAATA,GAAwB,KAATA,GAAewJ,GAAkBxJ,KAChE2K,IAAS,IAETJ,EAAQO,QAAQ9K,GACTye,IAET9T,EAAO,EACA6T,EAAWxe,GACpB,CAYA,SAAS0e,EAAU1e,GACjB,OAAa,KAATA,GACFuK,EAAQQ,KAAK,oBACbR,EAAQK,MAAM,kBACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,kBACbR,EAAQQ,KAAK,YACNP,GAII,OAATxK,GAA0B,KAATA,GAAwB,KAATA,GAAe0J,GAAa1J,GACvDkO,EAAIlO,IAEbuK,EAAQO,QAAQ9K,GACT0e,EACT,CAYA,SAASF,EAAWxe,GAClB,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GACT2e,GAELlV,GAAWzJ,IACbuK,EAAQO,QAAQ9K,GACTwe,GAEFtQ,EAAIlO,EACb,CAYA,SAAS2e,EAAiB3e,GACxB,OAAOwJ,GAAkBxJ,GAAQ4e,EAAW5e,GAAQkO,EAAIlO,EAC1D,CAYA,SAAS4e,EAAW5e,GAClB,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GAChB2K,EAAO,EACAgU,GAEI,KAAT3e,GAEFuK,EAAQQ,KAAK,oBAAoBnD,KAAO,gBACxC2C,EAAQK,MAAM,kBACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,kBACbR,EAAQQ,KAAK,YACNP,GAEFqU,EAAW7e,EACpB,CAcA,SAAS6e,EAAW7e,GAElB,IAAc,KAATA,GAAewJ,GAAkBxJ,KAAU2K,IAAS,GAAI,CAC3D,MAAM7G,EAAgB,KAAT9D,EAAc6e,EAAaD,EAExC,OADArU,EAAQO,QAAQ9K,GACT8D,CACT,CACA,OAAOoK,EAAIlO,EACb,CACF,GCzNO,MAAM8e,GAAW,CACtB7iB,KAAM,WACNgP,SAOF,SAA0BV,EAASC,EAAI0D,GACrC,MAAMxC,EAAOpN,KAEb,IAAImW,EAEAnX,EAEAkW,EACJ,OAYA,SAAexT,GAIb,OAHAuK,EAAQK,MAAM,YACdL,EAAQK,MAAM,gBACdL,EAAQO,QAAQ9K,GACTyV,CACT,EAgBA,SAASA,EAAKzV,GACZ,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GACT4Y,GAEI,KAAT5Y,GACFuK,EAAQO,QAAQ9K,GACT6Y,GAEI,KAAT7Y,GACFuK,EAAQO,QAAQ9K,GACT+e,GAILzV,GAAWtJ,IACbuK,EAAQO,QAAQ9K,GACTgf,GAEF9Q,EAAIlO,EACb,CAgBA,SAAS4Y,EAAgB5Y,GACvB,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GACTgZ,GAEI,KAAThZ,GACFuK,EAAQO,QAAQ9K,GAChB1C,EAAQ,EACD2b,GAEL3P,GAAWtJ,IACbuK,EAAQO,QAAQ9K,GACTif,GAEF/Q,EAAIlO,EACb,CAYA,SAASgZ,EAAkBhZ,GACzB,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GACTkf,GAEFhR,EAAIlO,EACb,CAYA,SAASmf,EAAQnf,GACf,OAAa,OAATA,EACKkO,EAAIlO,GAEA,KAATA,GACFuK,EAAQO,QAAQ9K,GACTof,GAELtV,GAAmB9J,IACrBwT,EAAc2L,EACPE,EAAiBrf,KAE1BuK,EAAQO,QAAQ9K,GACTmf,EACT,CAYA,SAASC,EAAapf,GACpB,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GACTkf,GAEFC,EAAQnf,EACjB,CAYA,SAASkf,EAAWlf,GAClB,OAAgB,KAATA,EACHrC,EAAIqC,GACK,KAATA,EACAof,EAAapf,GACbmf,EAAQnf,EACd,CAYA,SAASiZ,EAAgBjZ,GACvB,MAAM5D,EAAQ,SACd,OAAI4D,IAAS5D,EAAMmD,WAAWjC,MAC5BiN,EAAQO,QAAQ9K,GACC5D,IAAVkB,EAAyBgiB,EAAQrG,GAEnC/K,EAAIlO,EACb,CAYA,SAASsf,EAAMtf,GACb,OAAa,OAATA,EACKkO,EAAIlO,GAEA,KAATA,GACFuK,EAAQO,QAAQ9K,GACTuf,GAELzV,GAAmB9J,IACrBwT,EAAc8L,EACPD,EAAiBrf,KAE1BuK,EAAQO,QAAQ9K,GACTsf,EACT,CAYA,SAASC,EAAWvf,GAClB,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GACTwf,GAEFF,EAAMtf,EACf,CAYA,SAASwf,EAASxf,GAChB,OAAa,KAATA,EACKrC,EAAIqC,GAEA,KAATA,GACFuK,EAAQO,QAAQ9K,GACTwf,GAEFF,EAAMtf,EACf,CAYA,SAASif,EAAYjf,GACnB,OAAa,OAATA,GAA0B,KAATA,EACZrC,EAAIqC,GAET8J,GAAmB9J,IACrBwT,EAAcyL,EACPI,EAAiBrf,KAE1BuK,EAAQO,QAAQ9K,GACTif,EACT,CAYA,SAASF,EAAY/e,GACnB,OAAa,OAATA,EACKkO,EAAIlO,GAEA,KAATA,GACFuK,EAAQO,QAAQ9K,GACTyf,GAEL3V,GAAmB9J,IACrBwT,EAAcuL,EACPM,EAAiBrf,KAE1BuK,EAAQO,QAAQ9K,GACT+e,EACT,CAYA,SAASU,EAAiBzf,GACxB,OAAgB,KAATA,EAAcrC,EAAIqC,GAAQ+e,EAAY/e,EAC/C,CAYA,SAAS6Y,EAAc7Y,GAErB,OAAIsJ,GAAWtJ,IACbuK,EAAQO,QAAQ9K,GACT0f,GAEFxR,EAAIlO,EACb,CAYA,SAAS0f,EAAS1f,GAEhB,OAAa,KAATA,GAAewJ,GAAkBxJ,IACnCuK,EAAQO,QAAQ9K,GACT0f,GAEFC,EAAgB3f,EACzB,CAYA,SAAS2f,EAAgB3f,GACvB,OAAI8J,GAAmB9J,IACrBwT,EAAcmM,EACPN,EAAiBrf,IAEtBgK,GAAchK,IAChBuK,EAAQO,QAAQ9K,GACT2f,GAEFhiB,EAAIqC,EACb,CAYA,SAASgf,EAAQhf,GAEf,OAAa,KAATA,GAAewJ,GAAkBxJ,IACnCuK,EAAQO,QAAQ9K,GACTgf,GAEI,KAAThf,GAAwB,KAATA,GAAe+J,GAA0B/J,GACnD4f,EAAe5f,GAEjBkO,EAAIlO,EACb,CAYA,SAAS4f,EAAe5f,GACtB,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GACTrC,GAII,KAATqC,GAAwB,KAATA,GAAesJ,GAAWtJ,IAC3CuK,EAAQO,QAAQ9K,GACT6f,GAEL/V,GAAmB9J,IACrBwT,EAAcoM,EACPP,EAAiBrf,IAEtBgK,GAAchK,IAChBuK,EAAQO,QAAQ9K,GACT4f,GAEFjiB,EAAIqC,EACb,CAYA,SAAS6f,EAAqB7f,GAE5B,OACW,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACAwJ,GAAkBxJ,IAElBuK,EAAQO,QAAQ9K,GACT6f,GAEFC,EAA0B9f,EACnC,CAaA,SAAS8f,EAA0B9f,GACjC,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GACT+f,GAELjW,GAAmB9J,IACrBwT,EAAcsM,EACPT,EAAiBrf,IAEtBgK,GAAchK,IAChBuK,EAAQO,QAAQ9K,GACT8f,GAEFF,EAAe5f,EACxB,CAaA,SAAS+f,EAA4B/f,GACnC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEOkO,EAAIlO,GAEA,KAATA,GAAwB,KAATA,GACjBuK,EAAQO,QAAQ9K,GAChByU,EAASzU,EACFggB,GAELlW,GAAmB9J,IACrBwT,EAAcuM,EACPV,EAAiBrf,IAEtBgK,GAAchK,IAChBuK,EAAQO,QAAQ9K,GACT+f,IAETxV,EAAQO,QAAQ9K,GACTigB,EACT,CAYA,SAASD,EAA4BhgB,GACnC,OAAIA,IAASyU,GACXlK,EAAQO,QAAQ9K,GAChByU,OAAStW,EACF+hB,GAEI,OAATlgB,EACKkO,EAAIlO,GAET8J,GAAmB9J,IACrBwT,EAAcwM,EACPX,EAAiBrf,KAE1BuK,EAAQO,QAAQ9K,GACTggB,EACT,CAYA,SAASC,EAA8BjgB,GACrC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEOkO,EAAIlO,GAEA,KAATA,GAAwB,KAATA,GAAe+J,GAA0B/J,GACnD4f,EAAe5f,IAExBuK,EAAQO,QAAQ9K,GACTigB,EACT,CAaA,SAASC,EAAiClgB,GACxC,OAAa,KAATA,GAAwB,KAATA,GAAe+J,GAA0B/J,GACnD4f,EAAe5f,GAEjBkO,EAAIlO,EACb,CAYA,SAASrC,EAAIqC,GACX,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,gBACbR,EAAQQ,KAAK,YACNP,GAEF0D,EAAIlO,EACb,CAgBA,SAASqf,EAAiBrf,GAKxB,OAJAuK,EAAQQ,KAAK,gBACbR,EAAQK,MAAM,cACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,cACNoV,CACT,CAgBA,SAASA,EAAgBngB,GAGvB,OAAOgK,GAAchK,GACjBsK,GACEC,EACA6V,EACA,aACA1U,EAAKN,OAAOjC,WAAWiF,QAAQC,KAAK7L,SAAS,qBACzCrE,EACA,EANNmM,CAOEtK,GACFogB,EAAsBpgB,EAC5B,CAgBA,SAASogB,EAAsBpgB,GAE7B,OADAuK,EAAQK,MAAM,gBACP4I,EAAYxT,EACrB,CACF,GC9rBO,MAAMqgB,GAAiB,CAC5BpkB,KAAM,iBACNgP,SAQF,SAAgCV,EAASC,EAAI0D,GAC3C,MAAMxC,EAAOpN,KACb,OAYA,SAAe0B,GAMb,OALAuK,EAAQK,MAAM,aACdL,EAAQK,MAAM,eACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,aACNwD,CACT,EAGA,SAASA,EAAMvO,GAKb,OAAgB,KAATA,GAAe,2BAA4B0L,EAAKN,OAAOjC,WAC1D+E,EAAIlO,GACJwK,EAAGxK,EACT,CACF,EAxCE0Q,WAAYyL,GAASzL,YCJhB,MAAM4P,GAAkB,CAC7BrkB,KAAM,kBACNgP,SAOF,SAAiCV,EAASC,EAAI0D,GAC5C,OAaA,SAAelO,GAGb,OAFAuK,EAAQK,MAAM,mBACdL,EAAQO,QAAQ9K,GACTuO,CACT,EAaA,SAASA,EAAMvO,GACb,OAAI8J,GAAmB9J,IACrBuK,EAAQQ,KAAK,mBACNP,EAAGxK,IAELkO,EAAIlO,EACb,CACF,GC5CO,MAAMugB,GAAW,CACtBtkB,KAAM,WACNgP,SA8EF,SAA0BV,EAASC,EAAI0D,GAErC,IAEIvD,EAEAa,EAJAuP,EAAW,EAKf,OAcA,SAAe/a,GAGb,OAFAuK,EAAQK,MAAM,YACdL,EAAQK,MAAM,oBACPsN,EAAalY,EACtB,EAYA,SAASkY,EAAalY,GACpB,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GAChB+a,IACO7C,IAET3N,EAAQQ,KAAK,oBACNyV,EAAQxgB,GACjB,CAYA,SAASwgB,EAAQxgB,GAEf,OAAa,OAATA,EACKkO,EAAIlO,GAMA,KAATA,GACFuK,EAAQK,MAAM,SACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,SACNyV,GAII,KAATxgB,GACFwL,EAAQjB,EAAQK,MAAM,oBACtBD,EAAO,EACAmQ,EAAc9a,IAEnB8J,GAAmB9J,IACrBuK,EAAQK,MAAM,cACdL,EAAQO,QAAQ9K,GAChBuK,EAAQQ,KAAK,cACNyV,IAITjW,EAAQK,MAAM,gBACP1I,EAAKlC,GACd,CAYA,SAASkC,EAAKlC,GACZ,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACA8J,GAAmB9J,IAEnBuK,EAAQQ,KAAK,gBACNyV,EAAQxgB,KAEjBuK,EAAQO,QAAQ9K,GACTkC,EACT,CAYA,SAAS4Y,EAAc9a,GAErB,OAAa,KAATA,GACFuK,EAAQO,QAAQ9K,GAChB2K,IACOmQ,GAILnQ,IAASoQ,GACXxQ,EAAQQ,KAAK,oBACbR,EAAQQ,KAAK,YACNP,EAAGxK,KAIZwL,EAAM5D,KAAO,eACN1F,EAAKlC,GACd,CACF,EA7NEkH,QAMF,SAAyBqF,GACvB,IAGIjP,EAEAsN,EALA6V,EAAgBlU,EAAOtP,OAAS,EAChCyjB,EAAiB,EAOrB,KACsC,eAAnCnU,EAAOmU,GAAgB,GAAG9Y,MACU,UAAnC2E,EAAOmU,GAAgB,GAAG9Y,MACO,eAAlC2E,EAAOkU,GAAe,GAAG7Y,MACU,UAAlC2E,EAAOkU,GAAe,GAAG7Y,MAK3B,IAHAtK,EAAQojB,IAGCpjB,EAAQmjB,GACf,GAA8B,iBAA1BlU,EAAOjP,GAAO,GAAGsK,KAAyB,CAE5C2E,EAAOmU,GAAgB,GAAG9Y,KAAO,kBACjC2E,EAAOkU,GAAe,GAAG7Y,KAAO,kBAChC8Y,GAAkB,EAClBD,GAAiB,EACjB,KACF,CAKJnjB,EAAQojB,EAAiB,EACzBD,IACA,OAASnjB,GAASmjB,QACFtiB,IAAVyM,EACEtN,IAAUmjB,GAA2C,eAA1BlU,EAAOjP,GAAO,GAAGsK,OAC9CgD,EAAQtN,GAGVA,IAAUmjB,GACgB,eAA1BlU,EAAOjP,GAAO,GAAGsK,OAEjB2E,EAAO3B,GAAO,GAAGhD,KAAO,eACpBtK,IAAUsN,EAAQ,IACpB2B,EAAO3B,GAAO,GAAGjN,IAAM4O,EAAOjP,EAAQ,GAAG,GAAGK,IAC5C4O,EAAOjE,OAAOsC,EAAQ,EAAGtN,EAAQsN,EAAQ,GACzC6V,GAAiBnjB,EAAQsN,EAAQ,EACjCtN,EAAQsN,EAAQ,GAElBA,OAAQzM,GAGZ,OAAOoO,CACT,EA1DEhB,SAgEF,SAAkBvL,GAEhB,OACW,KAATA,GACgD,oBAAhD1B,KAAKiO,OAAOjO,KAAKiO,OAAOtP,OAAS,GAAG,GAAG2K,IAE3C,GCzDO,MAAM,GAAW,CACtB,GAAMW,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMiN,IAIKnK,GAAiB,CAC5B,GAAM6L,IAIK3G,GAAc,CACzB,EAAE,GAAIuH,GACN,EAAE,GAAIA,GACN,GAAMA,IAIK,GAAO,CAClB,GAAMG,GACN,GAAMzD,GACN,GAAM,CAAC4D,GAAiB5D,IACxB,GAAMiE,GACN,GAAML,GACN,GAAM5D,GACN,GAAMkG,GACN,IAAOA,IAII,GAAS,CACpB,GAAMkB,GACN,GAAMK,IAIK,GAAO,CAClB,EAAE,GAAIC,GACN,EAAE,GAAIA,GACN,EAAE,GAAIA,GACN,GAAM0B,GACN,GAAMhC,GACN,GAAMkC,GACN,GAAM,CAACQ,GAAUQ,IACjB,GAAMuB,GACN,GAAM,CAACC,GAAiBrE,IACxB,GAAME,GACN,GAAM2B,GACN,GAAMyC,IAIKtD,GAAa,CACxB5O,KAAM,CAACyP,GAAW,KAIPC,GAAmB,CAC9B1P,KAAM,CAAC,GAAI,KAIAD,GAAU,CACrBC,KAAM,ICpFD,SAAS9H,GAAMvK,GACpB,MACMmN,E1CHD,SAA2BwX,GAEhC,MAAM7X,EAAM,CAAC,EACb,IAAIxL,GAAS,EAEb,OAASA,EAAQqjB,EAAW1jB,QAC1B4L,GAAgBC,EAAK6X,EAAWrjB,IAGlC,OAAOwL,CACT,C0CLI8X,CAAkB,CAAC,MAHJ5kB,GAAW,CAAC,GAGwB2kB,YAAc,KAG7DvV,EAAS,CACbsM,QAAS,GACTtK,KAAM,CAAC,EACPjE,aACA6B,QAASsJ,EAAOtJ,IAChBmD,SAAUmG,EAAO,IACjB9G,KAAM8G,EAAO9G,IACboD,OAAQ0D,EAAO1D,IACfG,KAAMuD,EAAO,KAEf,OAAOlJ,EAKP,SAASkJ,EAAOhE,GACd,OAEA,SAAiB3H,GACf,OAAO+I,GAAgBtG,EAAQkF,EAAS3H,EAC1C,CACF,CACF,CClCA,MAAMkY,GAAS,cCDR,SAASC,GAAgC1kB,EAAO0I,GACrD,MAAM9E,EAAO4F,OAAOmb,SAAS3kB,EAAO0I,GACpC,OAEE9E,EAAO,GACE,KAATA,GACCA,EAAO,IAAMA,EAAO,IAEpBA,EAAO,KAAOA,EAAO,KAErBA,EAAO,OAASA,EAAO,OAEvBA,EAAO,OAASA,EAAO,OACL,QAAX,MAAPA,IACkB,QAAX,MAAPA,IAEDA,EAAO,QAEA,IAEF4G,OAAOyD,aAAarK,EAC7B,CCjCA,MAAMghB,GACJ,oEAwBF,SAASC,GAAOC,EAAIC,EAAIC,GACtB,GAAID,EAEF,OAAOA,EAKT,GAAa,KADAC,EAAG7hB,WAAW,GACV,CACf,MAAMyT,EAAOoO,EAAG7hB,WAAW,GACrB8hB,EAAe,MAATrO,GAAyB,KAATA,EAC5B,OAAO8N,GAAgCM,EAAG/iB,MAAMgjB,EAAM,EAAI,GAAIA,EAAM,GAAK,GAC3E,CACA,OAAO1F,GAA8ByF,IAAOF,CAC9C,CCkHA,MAAM,GAAM,CAAC,EAAEpmB,eAYFwmB,GAcX,SAAUllB,EAAOyG,EAAU7G,GAKzB,MAJwB,iBAAb6G,IACT7G,EAAU6G,EACVA,OAAW1E,GAcjB,SAAkBnC,GAEhB,MAAMulB,EAAS,CACbC,WAAY,GACZC,eAAgB,CAAC,WAAY,WAAY,UAAW,YAAa,UACjE7W,MAAO,CACL0T,SAAUoD,EAAOC,IACjBC,iBAAkBC,EAClBC,cAAeD,EACfE,WAAYL,EAAOpJ,IACnB9C,WAAYkM,EAAOlM,GACnByG,gBAAiB4F,EACjBjG,mBAAoBiG,EACpBnH,WAAYgH,EAAOM,GACnBC,oBAAqBhgB,EACrBigB,oBAAqBjgB,EACrB6V,aAAc4J,EAAOM,EAAU/f,GAC/Bse,SAAUmB,EAAOnB,EAAUte,GAC3BkgB,aAAcN,EACd3f,KAAM2f,EACNO,cAAeP,EACf3K,WAAYwK,EAAOxK,GACnBmL,4BAA6BpgB,EAC7BqgB,sBAAuBrgB,EACvBsgB,sBAAuBtgB,EACvBugB,SAAUd,EAAOc,IACjBlC,gBAAiBoB,EAAOe,IACxBC,kBAAmBhB,EAAOe,IAC1BhK,SAAUiJ,EAAOiB,GAAM1gB,GACvB2gB,aAAcf,EACd/C,SAAU4C,EAAOiB,GAAM1gB,GACvB4gB,aAAchB,EACdiB,MAAOpB,EAAOoB,IACd9F,MAAO/a,EACP0f,KAAMD,EAAOC,IACboB,SAAUrB,EAAOqB,IACjBC,cAAeC,EACfC,YAAaxB,EAAOnZ,GAAM4a,GAC1BC,cAAe1B,EAAOnZ,IACtB8P,UAAWqJ,EAAOrJ,IAClBgL,UAAWC,EACXC,gBAAiBthB,EACjBuhB,0BAA2BvhB,EAC3BwhB,oBAAqBxhB,EACrByhB,cAAehC,EAAOpJ,IACtBqL,OAAQjC,EAAOiC,IACfnP,cAAekN,EAAOlN,KAExBzJ,KAAM,CACJgX,WAAY6B,IACZC,mBAAoBC,EACpBxF,SAAUsF,IACV9B,cAAeiC,EACfnC,iBAAkBoC,EAClBxO,WAAYoO,IACZK,qBAAsBC,EACtBC,oCAAqCC,EACrCC,gCAAiCD,EACjCE,wBAAyBC,EACzB7J,WAAYkJ,EAAOY,GACnBC,gBAAiBC,EACjBzC,oBAAqB0C,EACrBzC,oBAAqB0C,EACrBxC,cAAe8B,EACfpM,aAAc8L,EAAOiB,GACrBtE,SAAUqD,EAAOkB,GACjB3C,aAAc+B,EACdhiB,KAAMgiB,EACNhN,WAAY0M,IACZvB,4BAA6B0C,EAC7BzC,sBAAuB0C,EACvBzC,sBAAuB0C,EACvBzC,SAAUoB,IACVtD,gBAAiBsD,EAAOsB,GACxBxC,kBAAmBkB,EAAOsB,GAC1BzM,SAAUmL,EAAOuB,GACjBvC,aAAcsB,EACdpF,SAAU8E,EAAOwB,GACjBvC,aAAcqB,EACdpB,MAAOc,EAAOyB,GACdrI,MAAOsI,EACPC,UAAWC,EACXtJ,WAAYuJ,EACZ9D,KAAMiC,EAAO8B,GACb3C,SAAUa,IACVV,YAAaU,IACbR,cAAeQ,IACfvL,UAAWuL,IACXL,gBAAiBoC,EACjBnC,0BAA2BoC,EAC3BnC,oBAAqBoC,EACrBC,SAAUC,EACVrC,cAAeE,EAAOoC,GACtBC,0BAA2BC,EAC3BC,kBAAmBC,EACnBzC,OAAQC,IACRpP,cAAeoP,MAGnByC,GAAU9E,GAASvlB,GAAW,CAAC,GAAGsqB,iBAAmB,IAGrD,MAAMpkB,EAAO,CAAC,EACd,OAAO8E,EAUP,SAASA,EAAQuF,GAEf,IAAInF,EAAO,CACTQ,KAAM,OACNS,SAAU,IAGZ,MAAMgH,EAAU,CACd7Q,MAAO,CAAC4I,GACRmf,WAAY,GACZhF,SACA3W,QACAG,OACA9I,SACAukB,SACAC,UACAC,WAGIC,EAAY,GAClB,IAAIrpB,GAAS,EACb,OAASA,EAAQiP,EAAOtP,QAGtB,GAC4B,gBAA1BsP,EAAOjP,GAAO,GAAGsK,MACS,kBAA1B2E,EAAOjP,GAAO,GAAGsK,KAEjB,GAAyB,UAArB2E,EAAOjP,GAAO,GAChBqpB,EAAUjkB,KAAKpF,OACV,CAELA,EAAQspB,EAAYra,EADPoa,EAAU9iB,MACWvG,EACpC,CAIJ,IADAA,GAAS,IACAA,EAAQiP,EAAOtP,QAAQ,CAC9B,MAAM4pB,EAAUtF,EAAOhV,EAAOjP,GAAO,IACjC,GAAI/B,KAAKsrB,EAASta,EAAOjP,GAAO,GAAGsK,OACrCif,EAAQta,EAAOjP,GAAO,GAAGsK,MAAMrM,KAC7BX,OAAOsL,OACL,CACEmK,eAAgB9D,EAAOjP,GAAO,GAAG+S,gBAEnChB,GAEF9C,EAAOjP,GAAO,GAGpB,CAGA,GAAI+R,EAAQkX,WAAWtpB,OAAS,EAAG,CACjC,MAAMmT,EAAOf,EAAQkX,WAAWlX,EAAQkX,WAAWtpB,OAAS,IAC5CmT,EAAK,IAAM0W,IACnBvrB,KAAK8T,OAASlR,EAAWiS,EAAK,GACxC,CA0BA,IAvBAhJ,EAAKhK,SAAW,CACdM,MAAO,GACL6O,EAAOtP,OAAS,EACZsP,EAAO,GAAG,GAAG7O,MACb,CACEH,KAAM,EACNC,OAAQ,EACR8P,OAAQ,IAGhB3P,IAAK,GACH4O,EAAOtP,OAAS,EACZsP,EAAOA,EAAOtP,OAAS,GAAG,GAAGU,IAC7B,CACEJ,KAAM,EACNC,OAAQ,EACR8P,OAAQ,KAMlBhQ,GAAS,IACAA,EAAQikB,EAAOC,WAAWvkB,QACjCmK,EAAOma,EAAOC,WAAWlkB,GAAO8J,IAASA,EAE3C,OAAOA,CACT,CAQA,SAASwf,EAAYra,EAAQ7O,EAAOT,GAClC,IAII8lB,EAEAnU,EAEAmY,EAEAlS,EAVAvX,EAAQI,EAAQ,EAChBspB,GAAoB,EACpBC,GAAa,EASjB,OAAS3pB,GAASL,GAAQ,CACxB,MAAM0R,EAAQpC,EAAOjP,GAmCrB,GAjCoB,kBAAlBqR,EAAM,GAAG/G,MACS,gBAAlB+G,EAAM,GAAG/G,MACS,eAAlB+G,EAAM,GAAG/G,MAEQ,UAAb+G,EAAM,GACRqY,IAEAA,IAEFnS,OAAW1W,GACgB,oBAAlBwQ,EAAM,GAAG/G,KACD,UAAb+G,EAAM,MAENoU,GACClO,GACAmS,GACAD,IAEDA,EAAsBzpB,GAExBuX,OAAW1W,GAGK,eAAlBwQ,EAAM,GAAG/G,MACS,kBAAlB+G,EAAM,GAAG/G,MACS,mBAAlB+G,EAAM,GAAG/G,MACS,mBAAlB+G,EAAM,GAAG/G,MACS,6BAAlB+G,EAAM,GAAG/G,OAITiN,OAAW1W,IAGT6oB,GACa,UAAbrY,EAAM,IACY,mBAAlBA,EAAM,GAAG/G,OACY,IAAtBof,GACc,SAAbrY,EAAM,KACa,kBAAlBA,EAAM,GAAG/G,MACU,gBAAlB+G,EAAM,GAAG/G,MACb,CACA,GAAImb,EAAU,CACZ,IAAImE,EAAY5pB,EAEhB,IADAsR,OAAYzQ,EACL+oB,KAAa,CAClB,MAAMC,EAAY5a,EAAO2a,GACzB,GACwB,eAAtBC,EAAU,GAAGvf,MACS,oBAAtBuf,EAAU,GAAGvf,KACb,CACA,GAAqB,SAAjBuf,EAAU,GAAe,SACzBvY,IACFrC,EAAOqC,GAAW,GAAGhH,KAAO,kBAC5Bqf,GAAa,GAEfE,EAAU,GAAGvf,KAAO,aACpBgH,EAAYsY,CACd,MAAO,GACiB,eAAtBC,EAAU,GAAGvf,MACS,qBAAtBuf,EAAU,GAAGvf,MACS,+BAAtBuf,EAAU,GAAGvf,MACS,qBAAtBuf,EAAU,GAAGvf,MACS,mBAAtBuf,EAAU,GAAGvf,KAIb,KAEJ,CAEEmf,KACEnY,GAAamY,EAAsBnY,KAErCmU,EAASqE,SAAU,GAIrBrE,EAASplB,IAAM/C,OAAOsL,OACpB,CAAC,EACD0I,EAAYrC,EAAOqC,GAAW,GAAGlR,MAAQiR,EAAM,GAAGhR,KAEpD4O,EAAOjE,OAAOsG,GAAatR,EAAO,EAAG,CAAC,OAAQylB,EAAUpU,EAAM,KAC9DrR,IACAL,GACF,CAGsB,mBAAlB0R,EAAM,GAAG/G,OACXmb,EAAW,CACTnb,KAAM,WACNwf,SAAS,EACT1pB,MAAO9C,OAAOsL,OAAO,CAAC,EAAGyI,EAAM,GAAGjR,OAElCC,SAAKQ,GAGPoO,EAAOjE,OAAOhL,EAAO,EAAG,CAAC,QAASylB,EAAUpU,EAAM,KAClDrR,IACAL,IACA8pB,OAAsB5oB,EACtB0W,GAAW,EAEf,CACF,CAEA,OADAtI,EAAO7O,GAAO,GAAG0pB,QAAUH,EACpBhqB,CACT,CAcA,SAASwpB,EAAQ/qB,EAAKU,GACpB8F,EAAKxG,GAAOU,CACd,CAYA,SAASsqB,EAAQhrB,GACf,OAAOwG,EAAKxG,EACd,CAYA,SAASgmB,EAAOpN,EAAQ+S,GACtB,OAAO5R,EAOP,SAASA,EAAKjK,GACZZ,EAAMrP,KAAK+C,KAAMgW,EAAO9I,GAAQA,GAC5B6b,GAAKA,EAAI9rB,KAAK+C,KAAMkN,EAC1B,CACF,CAMA,SAASvJ,IACP3D,KAAKE,MAAMkE,KAAK,CACdkF,KAAM,WACNS,SAAU,IAEd,CAgBA,SAASuC,EAAM/D,EAAM2E,EAAO8b,GAU1B,OATehpB,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GAEvCoL,SAAS3F,KAAKmE,GACrBvI,KAAKE,MAAMkE,KAAKmE,GAChBvI,KAAKioB,WAAW7jB,KAAK,CAAC8I,EAAO8b,IAE7BzgB,EAAKzJ,SAAW,CACdM,MAAO,GAAM8N,EAAM9N,QAEdmJ,CACT,CAUA,SAAS+c,EAAOyD,GACd,OAAOxK,EAOP,SAASA,EAAMrR,GACT6b,GAAKA,EAAI9rB,KAAK+C,KAAMkN,GACxBT,EAAKxP,KAAK+C,KAAMkN,EAClB,CACF,CAYA,SAAST,EAAKS,EAAO+b,GACnB,MAAM1gB,EAAOvI,KAAKE,MAAMqF,MAClB4R,EAAOnX,KAAKioB,WAAW1iB,MAC7B,IAAK4R,EACH,MAAM,IAAI5X,MACR,iBACE2N,EAAM5D,KACN,MACAzK,EAAkB,CAChBO,MAAO8N,EAAM9N,MACbC,IAAK6N,EAAM7N,MAEb,oBAEC,GAAI8X,EAAK,GAAG7N,OAAS4D,EAAM5D,KAChC,GAAI2f,EACFA,EAAYhsB,KAAK+C,KAAMkN,EAAOiK,EAAK,QAC9B,EACWA,EAAK,IAAMqR,IACnBvrB,KAAK+C,KAAMkN,EAAOiK,EAAK,GACjC,CAGF,OADA5O,EAAKzJ,SAASO,IAAM,GAAM6N,EAAM7N,KACzBkJ,CACT,CAMA,SAAS2f,IACP,OhDlpBG,SAAkBpqB,EAAOJ,GAC9B,MAAM8J,EAAW9J,GAAWgM,EAQ5B,OAAOC,EAAI7L,EAN2B,kBAA7B0J,EAASoC,iBACZpC,EAASoC,gBAGmB,kBAAzBpC,EAASqC,aAA4BrC,EAASqC,YAGzD,CgDwoBW,CAAS7J,KAAKE,MAAMqF,MAC7B,CAUA,SAASsf,IACPsD,EAAQ,+BAA+B,EACzC,CAMA,SAASxD,EAAqBzX,GAC5B,GAAIkb,EAAQ,+BAAgC,CACzBpoB,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GACvCS,MAAQkI,OAAOmb,SAASziB,KAAK+R,eAAe7E,GAAQ,IAC7Dib,EAAQ,8BACV,CACF,CAMA,SAAS9B,IACP,MAAMziB,EAAO5D,KAAKkoB,SACLloB,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GACvCuqB,KAAOtlB,CACd,CAMA,SAAS0iB,IACP,MAAM1iB,EAAO5D,KAAKkoB,SACLloB,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GACvCqe,KAAOpZ,CACd,CAMA,SAASwiB,IAEHgC,EAAQ,oBACZpoB,KAAK2D,SACLwkB,EAAQ,kBAAkB,GAC5B,CAMA,SAASjC,IACP,MAAMtiB,EAAO5D,KAAKkoB,SACLloB,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GACvCb,MAAQ8F,EAAK6U,QAAQ,2BAA4B,IACtD0P,EAAQ,iBACV,CAMA,SAAS5B,IACP,MAAM3iB,EAAO5D,KAAKkoB,SACLloB,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GACvCb,MAAQ8F,EAAK6U,QAAQ,eAAgB,GAC5C,CAMA,SAASiO,EAA4BxZ,GACnC,MAAMwR,EAAQ1e,KAAKkoB,SACb3f,EAAOvI,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GAC5C4J,EAAKmW,MAAQA,EACbnW,EAAKsQ,WAAaL,GAChBxY,KAAK+R,eAAe7E,IACpBwL,aACJ,CAMA,SAASiO,IACP,MAAM/iB,EAAO5D,KAAKkoB,SACLloB,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GACvCwqB,MAAQvlB,CACf,CAMA,SAAS6iB,IACP,MAAM7iB,EAAO5D,KAAKkoB,SACLloB,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GACvC8B,IAAMmD,CACb,CAMA,SAAS4hB,EAAyBtY,GAChC,MAAM3E,EAAOvI,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GAC5C,IAAK4J,EAAK6gB,MAAO,CACf,MAAMA,EAAQppB,KAAK+R,eAAe7E,GAAOvO,OACzC4J,EAAK6gB,MAAQA,CACf,CACF,CAMA,SAAStB,IACPK,EAAQ,gCAAgC,EAC1C,CAMA,SAASP,EAAgC1a,GAC1BlN,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GACvCyqB,MAAqD,KAA7CppB,KAAK+R,eAAe7E,GAAOjM,WAAW,GAAY,EAAI,CACrE,CAMA,SAASymB,IACPS,EAAQ,+BACV,CAOA,SAAS5E,EAAYrW,GACnB,MAAM3E,EAAOvI,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GAC5C,IAAImT,EAAOvJ,EAAKwB,SAASxB,EAAKwB,SAASpL,OAAS,GAC3CmT,GAAsB,SAAdA,EAAKxI,OAEhBwI,EAAOW,KAEPX,EAAKhT,SAAW,CACdM,MAAO,GAAM8N,EAAM9N,QAGrBmJ,EAAKwB,SAAS3F,KAAK0N,IAErB9R,KAAKE,MAAMkE,KAAK0N,EAClB,CAOA,SAAS8T,EAAW1Y,GAClB,MAAM4E,EAAO9R,KAAKE,MAAMqF,MACxBuM,EAAKhU,OAASkC,KAAK+R,eAAe7E,GAClC4E,EAAKhT,SAASO,IAAM,GAAM6N,EAAM7N,IAClC,CAOA,SAAS8nB,EAAiBja,GACxB,MAAM6D,EAAU/Q,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GAE/C,GAAIypB,EAAQ,eAAgB,CAI1B,OAHarX,EAAQhH,SAASgH,EAAQhH,SAASpL,OAAS,GACnDG,SAASO,IAAM,GAAM6N,EAAM7N,UAChC8oB,EAAQ,cAEV,EAEGC,EAAQ,iCACTnF,EAAOE,eAAejf,SAAS6M,EAAQzH,QAEvCia,EAAYtmB,KAAK+C,KAAMkN,GACvB0Y,EAAW3oB,KAAK+C,KAAMkN,GAE1B,CAOA,SAAS0Z,IACPuB,EAAQ,eAAe,EACzB,CAOA,SAAStB,IACP,MAAMjjB,EAAO5D,KAAKkoB,SACLloB,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GACvCb,MAAQ8F,CACf,CAOA,SAASkjB,IACP,MAAMljB,EAAO5D,KAAKkoB,SACLloB,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GACvCb,MAAQ8F,CACf,CAOA,SAAS4iB,IACP,MAAM5iB,EAAO5D,KAAKkoB,SACLloB,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GACvCb,MAAQ8F,CACf,CAOA,SAASwjB,IACP,MAAM7e,EAAOvI,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GAI5C,GAAIypB,EAAQ,eAAgB,CAE1B,MAAMiB,EAAgBjB,EAAQ,kBAAoB,WAClD7f,EAAKe,MAAQ,YAEbf,EAAK8gB,cAAgBA,SAEd9gB,EAAK9H,WACL8H,EAAK4gB,KACd,aAES5gB,EAAKsQ,kBAELtQ,EAAKmW,MAEdyJ,EAAQ,gBACV,CAOA,SAASpB,IACP,MAAMxe,EAAOvI,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GAI5C,GAAIypB,EAAQ,eAAgB,CAE1B,MAAMiB,EAAgBjB,EAAQ,kBAAoB,WAClD7f,EAAKe,MAAQ,YAEbf,EAAK8gB,cAAgBA,SAEd9gB,EAAK9H,WACL8H,EAAK4gB,KACd,aAES5gB,EAAKsQ,kBAELtQ,EAAKmW,MAEdyJ,EAAQ,gBACV,CAOA,SAASjB,EAAgBha,GACvB,MAAMoF,EAAStS,KAAK+R,eAAe7E,GAC7Boc,EAAWtpB,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GAGhD2qB,EAAS5K,MDp9BN,SAAsB5gB,GAC3B,OAAOA,EAAM2a,QAAQiK,GAA4BC,GACnD,CCk9BqB4G,CAAajX,GAE9BgX,EAASzQ,WAAaL,GAAoBlG,GAAQoG,aACpD,CAOA,SAASsO,IACP,MAAMwC,EAAWxpB,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GAC1Cb,EAAQkC,KAAKkoB,SACb3f,EAAOvI,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GAG5C,GADAwpB,EAAQ,eAAe,GACL,SAAd5f,EAAKe,KAAiB,CAGxB,MAAMS,EAAWyf,EAASzf,SAC1BxB,EAAKwB,SAAWA,CAClB,MACExB,EAAKuB,IAAMhM,CAEf,CAOA,SAASwpB,IACP,MAAM1jB,EAAO5D,KAAKkoB,SACLloB,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GACvC8B,IAAMmD,CACb,CAOA,SAAS2jB,IACP,MAAM3jB,EAAO5D,KAAKkoB,SACLloB,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GACvCwqB,MAAQvlB,CACf,CAOA,SAAS6jB,IACPU,EAAQ,cACV,CAOA,SAASnD,IACPmD,EAAQ,gBAAiB,YAC3B,CAOA,SAASd,EAAsBna,GAC7B,MAAMwR,EAAQ1e,KAAKkoB,SACb3f,EAAOvI,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GAG5C4J,EAAKmW,MAAQA,EAEbnW,EAAKsQ,WAAaL,GAChBxY,KAAK+R,eAAe7E,IACpBwL,cACFyP,EAAQ,gBAAiB,OAC3B,CAOA,SAASrC,EAA+B5Y,GACtCib,EAAQ,yBAA0Bjb,EAAM5D,KAC1C,CAMA,SAAS2c,EAA8B/Y,GACrC,MAAMtJ,EAAO5D,KAAK+R,eAAe7E,GAC3B5D,EAAO8e,EAAQ,0BAErB,IAAItqB,EACJ,GAAIwL,EACFxL,EAAQ0kB,GACN5e,EACS,oCAAT0F,EAA6C,GAAK,IAEpD6e,EAAQ,8BACH,CAELrqB,EADeuf,GAA8BzZ,EAE/C,CACA,MAAMkO,EAAO9R,KAAKE,MAAMqF,MACxBuM,EAAKhU,OAASA,EACdgU,EAAKhT,SAASO,IAAM,GAAM6N,EAAM7N,IAClC,CAMA,SAASqmB,EAAuBxY,GAC9B0Y,EAAW3oB,KAAK+C,KAAMkN,GACTlN,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GACvC8B,IAAMT,KAAK+R,eAAe7E,EACjC,CAMA,SAASuY,EAAoBvY,GAC3B0Y,EAAW3oB,KAAK+C,KAAMkN,GACTlN,KAAKE,MAAMF,KAAKE,MAAMvB,OAAS,GACvC8B,IAAM,UAAYT,KAAK+R,eAAe7E,EAC7C,CAOA,SAASgK,IACP,MAAO,CACL5N,KAAM,aACNS,SAAU,GAEd,CAGA,SAAS2Z,IACP,MAAO,CACLpa,KAAM,OACN4f,KAAM,KACNlM,KAAM,KACNlf,MAAO,GAEX,CAGA,SAASmkB,IACP,MAAO,CACL3Y,KAAM,aACNxL,MAAO,GAEX,CAGA,SAAS8a,IACP,MAAO,CACLtP,KAAM,aACNuP,WAAY,GACZ6F,MAAO,KACPyK,MAAO,KACP1oB,IAAK,GAET,CAGA,SAASyjB,KACP,MAAO,CACL5a,KAAM,WACNS,SAAU,GAEd,CAGA,SAASiQ,KAEP,MAAO,CACL1Q,KAAM,UACN8f,WAAOvpB,EACPkK,SAAU,GAEd,CAGA,SAASoa,KACP,MAAO,CACL7a,KAAM,QAEV,CAGA,SAAS+a,KACP,MAAO,CACL/a,KAAM,OACNxL,MAAO,GAEX,CAGA,SAAS0mB,KACP,MAAO,CACLlb,KAAM,QACN6f,MAAO,KACP1oB,IAAK,GACLqJ,IAAK,KAET,CAGA,SAASuZ,KACP,MAAO,CACL/Z,KAAM,OACN6f,MAAO,KACP1oB,IAAK,GACLsJ,SAAU,GAEd,CAMA,SAASE,GAAKiD,GACZ,MAAO,CACL5D,KAAM,OACNmgB,QAAwB,gBAAfvc,EAAM5D,KACflK,MAAO,KACPsqB,OAAQxc,EAAM4b,QACd/e,SAAU,GAEd,CAMA,SAAS0a,GAASvX,GAChB,MAAO,CACL5D,KAAM,WACNogB,OAAQxc,EAAM4b,QACda,QAAS,KACT5f,SAAU,GAEd,CAGA,SAASgQ,KACP,MAAO,CACLzQ,KAAM,YACNS,SAAU,GAEd,CAGA,SAASsb,KACP,MAAO,CACL/b,KAAM,SACNS,SAAU,GAEd,CAGA,SAAS0I,KACP,MAAO,CACLnJ,KAAM,OACNxL,MAAO,GAEX,CAGA,SAASoY,KACP,MAAO,CACL5M,KAAM,gBAEV,CACF,CA3kCWsgB,CAASlsB,EAATksB,CChLJ,SAAqB3b,GAC1B,MAAQkC,GAAYlC,KAGpB,OAAOA,CACT,CD4KM4b,CACE5hB,GAAMvK,GAASmS,WAAWH,MHxK3B,WACL,IAKIoa,EALA5qB,EAAS,EACTyE,EAAS,GAETvE,GAAQ,EAGZ,OAGA,SAAsBtB,EAAOyG,EAAUlF,GAErC,MAAMyT,EAAS,GAEf,IAAIiX,EAEAvkB,EAEAwL,EAEAgZ,EAEAtoB,EAaJ,IAVA5D,EAAQ6F,EAAS7F,EAAMpB,SAAS6H,GAChCyM,EAAgB,EAChBrN,EAAS,GACLvE,IAE0B,QAAxBtB,EAAMmD,WAAW,IACnB+P,IAEF5R,OAAQS,GAEHmR,EAAgBlT,EAAMa,QAAQ,CAMnC,GALA4jB,GAAO0H,UAAYjZ,EACnB+Y,EAAQxH,GAAO2H,KAAKpsB,GACpBksB,EACED,QAAyBlqB,IAAhBkqB,EAAM/qB,MAAsB+qB,EAAM/qB,MAAQlB,EAAMa,OAC3D+C,EAAO5D,EAAMmD,WAAW+oB,IACnBD,EAAO,CACVpmB,EAAS7F,EAAMiC,MAAMiR,GACrB,KACF,CACA,GAAa,KAATtP,GAAesP,IAAkBgZ,GAAeF,EAClDhX,EAAO1O,MAAM,GACb0lB,OAAmBjqB,OAUnB,OARIiqB,IACFhX,EAAO1O,MAAM,GACb0lB,OAAmBjqB,GAEjBmR,EAAgBgZ,IAClBlX,EAAO1O,KAAKtG,EAAMiC,MAAMiR,EAAegZ,IACvC9qB,GAAU8qB,EAAchZ,GAElBtP,GACN,KAAK,EACHoR,EAAO1O,KAAK,OACZlF,IACA,MAEF,KAAK,EAGH,IAFAsG,EAA+B,EAAxB2kB,KAAKC,KAAKlrB,EAAS,GAC1B4T,EAAO1O,MAAM,GACNlF,IAAWsG,GAAMsN,EAAO1O,MAAM,GACrC,MAEF,KAAK,GACH0O,EAAO1O,MAAM,GACblF,EAAS,EACT,MAEF,QACE4qB,GAAmB,EACnB5qB,EAAS,EAIf8R,EAAgBgZ,EAAc,CAChC,CAMA,OALI3qB,IACEyqB,GAAkBhX,EAAO1O,MAAM,GAC/BT,GAAQmP,EAAO1O,KAAKT,GACxBmP,EAAO1O,KAAK,OAEP0O,CACT,CACF,CG+EwCuX,GAAavsB,EAAOyG,GAAU,KAGpE,EAglCF,SAAS,GAAM+lB,GACb,MAAO,CACLrrB,KAAMqrB,EAAErrB,KACRC,OAAQorB,EAAEprB,OACV8P,OAAQsb,EAAEtb,OAEd,CAOA,SAAS+Y,GAAUwC,EAAUlI,GAC3B,IAAIrjB,GAAS,EACb,OAASA,EAAQqjB,EAAW1jB,QAAQ,CAClC,MAAMb,EAAQukB,EAAWrjB,GACrBhC,MAAMF,QAAQgB,GAChBiqB,GAAUwC,EAAUzsB,GAEpB2M,GAAU8f,EAAUzsB,EAExB,CACF,CAOA,SAAS2M,GAAU8f,EAAU9f,GAE3B,IAAIrN,EACJ,IAAKA,KAAOqN,EACV,GAAI,GAAIxN,KAAKwN,EAAWrN,GACtB,GAAY,mBAARA,EAA0B,CAC5B,MAAMwN,EAAQH,EAAUrN,GACpBwN,GACF2f,EAASntB,GAAKgH,QAAQwG,EAE1B,MAAO,GAAY,eAARxN,EAAsB,CAC/B,MAAMwN,EAAQH,EAAUrN,GACpBwN,GACF2f,EAASntB,GAAKgH,QAAQwG,EAE1B,MAAO,GAAY,UAARxN,GAA2B,SAARA,EAAgB,CAC5C,MAAMwN,EAAQH,EAAUrN,GACpBwN,GACFtO,OAAOsL,OAAO2iB,EAASntB,GAAMwN,EAEjC,CAGN,CAGA,SAAS4d,GAAe7d,EAAMC,GAC5B,MAAID,EACI,IAAIpL,MACR,iBACEoL,EAAKrB,KACL,MACAzK,EAAkB,CAChBO,MAAOuL,EAAKvL,MACZC,IAAKsL,EAAKtL,MAEZ,0BACAuL,EAAMtB,KACN,MACAzK,EAAkB,CAChBO,MAAOwL,EAAMxL,MACbC,IAAKuL,EAAMvL,MAEb,aAGE,IAAIE,MACR,oCACEqL,EAAMtB,KACN,MACAzK,EAAkB,CAChBO,MAAOwL,EAAMxL,MACbC,IAAKuL,EAAMvL,MAEb,kBAGR,CE31Ce,SAASmrB,GAAY9sB,GAkBlCpB,OAAOsL,OAAO5H,KAAM,CAACiH,OAhBLiB,IAEd,MAAMV,EAAmCxH,KAAK4D,KAAK,YAEnD,OAAOof,GACL9a,EACA5L,OAAOsL,OAAO,CAAC,EAAGJ,EAAU9J,EAAS,CAInC2kB,WAAYriB,KAAK4D,KAAK,wBAA0B,GAChDokB,gBAAiBhoB,KAAK4D,KAAK,2BAA6B,KAE5D,GAIJ,CC6BO,SAAS6mB,GAAa3sB,GAE3B,MAAMmE,EAAS,GACf,IAAIjD,GAAS,EACTI,EAAQ,EACRsrB,EAAO,EACX,OAAS1rB,EAAQlB,EAAMa,QAAQ,CAC7B,MAAM+C,EAAO5D,EAAMmD,WAAWjC,GAE9B,IAAIyZ,EAAU,GAGd,GACW,KAAT/W,GACAwJ,GAAkBpN,EAAMmD,WAAWjC,EAAQ,KAC3CkM,GAAkBpN,EAAMmD,WAAWjC,EAAQ,IAE3C0rB,EAAO,OAGJ,GAAIhpB,EAAO,IACT,oBAAoBoK,KAAKxD,OAAOyD,aAAarK,MAChD+W,EAAUnQ,OAAOyD,aAAarK,SAI7B,GAAIA,EAAO,OAASA,EAAO,MAAO,CACrC,MAAM8D,EAAO1H,EAAMmD,WAAWjC,EAAQ,GAGlC0C,EAAO,OAAS8D,EAAO,OAASA,EAAO,OACzCiT,EAAUnQ,OAAOyD,aAAarK,EAAM8D,GACpCklB,EAAO,GAIPjS,EAAU,GAEd,MAGEA,EAAUnQ,OAAOyD,aAAarK,GAE5B+W,IACFxW,EAAOmC,KAAKtG,EAAMiC,MAAMX,EAAOJ,GAAQ2rB,mBAAmBlS,IAC1DrZ,EAAQJ,EAAQ0rB,EAAO,EACvBjS,EAAU,IAERiS,IACF1rB,GAAS0rB,EACTA,EAAO,EAEX,CACA,OAAOzoB,EAAON,KAAK,IAAM7D,EAAMiC,MAAMX,EACvC,CCrBO,MAyEMwrB,GAOX,SAKY9e,GACR,GAAIA,QACF,OAAOI,GAGT,GAAoB,iBAATJ,EACT,OA8ER,SAAqB4C,GACnB,OAAOmc,GAAYvhB,GAKnB,SAASA,EAAKf,GACZ,OAAOA,GAAQA,EAAKe,OAASoF,CAC/B,CACF,CAvFeoc,CAAYhf,GAGrB,GAAoB,iBAATA,EACT,OAAO9O,MAAMF,QAAQgP,GAe7B,SAAoBif,GAElB,MAAMC,EAAS,GACf,IAAIhsB,GAAS,EAEb,OAASA,EAAQ+rB,EAAMpsB,QACrBqsB,EAAOhsB,GAAS4rB,GAAQG,EAAM/rB,IAGhC,OAAO6rB,GAAYI,GAOnB,SAASA,KAAOnlB,GACd,IAAI9G,GAAS,EAEb,OAASA,EAAQgsB,EAAOrsB,QACtB,GAAIqsB,EAAOhsB,GAAO/B,KAAK+C,QAAS8F,GAAa,OAAO,EAGtD,OAAO,CACT,CACF,CAxCqColB,CAAWpf,GAgDhD,SAAsB4C,GACpB,OAAOmc,GAAYrgB,GAMnB,SAASA,EAAIjC,GAEX,IAAInL,EAEJ,IAAKA,KAAOsR,EAEV,GAAInG,EAAKnL,KAASsR,EAAMtR,GAAM,OAAO,EAGvC,OAAO,CACT,CACF,CAlEwD+tB,CAAarf,GAG/D,GAAoB,mBAATA,EACT,OAAO+e,GAAY/e,GAGrB,MAAM,IAAIvM,MAAM,+CAEpB,EAkFF,SAASsrB,GAAYnc,GACnB,OAQA,SAAmBnG,KAASzC,GAC1B,OAAO0D,QACLjB,GACkB,iBAATA,GACP,SAAUA,GAEViB,QAAQkF,EAAMzR,KAAK+C,KAAMuI,KAASzC,IAExC,CACF,CAEA,SAASoG,KACP,OAAO,CACT,CC5NO,MAyCMkf,GAOX,SAQYtiB,EAAMgD,EAAMuf,EAASC,GACT,mBAATxf,GAA0C,mBAAZuf,IACvCC,EAAUD,EAEVA,EAAUvf,EACVA,EAAO,MAGT,MAAMyf,EAAKX,GAAQ9e,GACb0f,EAAOF,GAAW,EAAI,GAS5B,SAASG,EAAQljB,EAAMvJ,EAAO0sB,GAG5B,MAAM5tB,EAAQyK,GAAwB,iBAATA,EAAoBA,EAAO,CAAC,EAEzD,GAA0B,iBAAfzK,EAAMwL,KAAmB,CAClC,MAAM3L,EAEqB,iBAAlBG,EAAM2c,QACT3c,EAAM2c,QAEc,iBAAf3c,EAAMH,KACXG,EAAMH,UACNkC,EAENvD,OAAOK,eAAegvB,EAAO,OAAQ,CACnC7tB,MACE,SAAiByK,EAAKe,MAAQ3L,EAAO,IAAMA,EAAO,IAAM,IAAO,KAErE,CAEA,OAAOguB,EAEP,SAASA,IAEP,IAEIC,EAEA5c,EAEA6c,EANA5pB,EAAS,GAQb,KAAK6J,GAAQyf,EAAGhjB,EAAMvJ,EAAO0sB,EAAQA,EAAQ/sB,OAAS,IAAM,SAC1DsD,EA0CZ,SAAkBnE,GAChB,GAAId,MAAMF,QAAQgB,GAChB,OAAOA,EAGT,GAAqB,iBAAVA,EACT,MAAO,CA5Ja,KA4JFA,GAGpB,MAAO,CAACA,EACV,CApDqBguB,CAAST,EAAQ9iB,EAAMmjB,IAvGxB,QAyGJzpB,EAAO,IACT,OAAOA,EAKX,GAAIsG,EAAKwB,UA1GC,SA0GW9H,EAAO,GAO1B,IALA+M,GAAUsc,EAAU/iB,EAAKwB,SAASpL,QAAU,GAAK6sB,EAEjDK,EAAeH,EAAQK,OAAOxjB,GAGvByG,GAAU,GAAKA,EAASzG,EAAKwB,SAASpL,QAAQ,CAInD,GAFAitB,EAAYH,EAAQljB,EAAKwB,SAASiF,GAASA,EAAQ6c,EAAvCJ,GAxHN,QA0HFG,EAAU,GACZ,OAAOA,EAGT5c,EAC0B,iBAAjB4c,EAAU,GAAkBA,EAAU,GAAK5c,EAASwc,CAC/D,CAGF,OAAOvpB,CACT,CACF,CAvEAwpB,CAAQ3iB,OAAMjJ,EAAW,GAAzB4rB,EAyEJ,EC9EK,MAAME,GAOX,SAQY7iB,EAAMgD,EAAMuf,EAASC,GACT,mBAATxf,GAA0C,mBAAZuf,IACvCC,EAAUD,EACVA,EAAUvf,EACVA,EAAO,MAGTsf,GAAatiB,EAAMgD,GAMnB,SAAkBvD,EAAMmjB,GACtB,MAAMM,EAASN,EAAQA,EAAQ/sB,OAAS,GACxC,OAAO0sB,EACL9iB,EACAyjB,EAASA,EAAOjiB,SAASjK,QAAQyI,GAAQ,KACzCyjB,EAEJ,GAbmCV,EAevC,ECtJWW,GAAa,GAAM,SAUnBC,GAAW,GAAM,OAsB9B,SAAS,GAAM5iB,GACb,OAQA,SAAef,GACb,MAAMxJ,EAASwJ,GAAQA,EAAKzJ,UAAYyJ,EAAKzJ,SAASwK,IAAU,CAAC,EAGjE,MAAO,CAELrK,KAAMF,EAAME,MAAQ,KAEpBC,OAAQH,EAAMG,QAAU,KAExB8P,OAAQjQ,EAAMiQ,QAAU,EAAIjQ,EAAMiQ,OAAS,KAE/C,CACF,CCSO,MAyEM,GAOX,SAKYlD,GACR,GAAIA,QACF,OAAO,GAGT,GAAoB,iBAATA,EACT,OA8ER,SAAqB4C,GACnB,OAAO,GAAYpF,GAKnB,SAASA,EAAKf,GACZ,OAAOA,GAAQA,EAAKe,OAASoF,CAC/B,CACF,CAvFe,CAAY5C,GAGrB,GAAoB,iBAATA,EACT,OAAO9O,MAAMF,QAAQgP,GAe7B,SAAoBif,GAElB,MAAMC,EAAS,GACf,IAAIhsB,GAAS,EAEb,OAASA,EAAQ+rB,EAAMpsB,QACrBqsB,EAAOhsB,GAAS,GAAQ+rB,EAAM/rB,IAGhC,OAAO,GAAYisB,GAOnB,SAASA,KAAOnlB,GACd,IAAI9G,GAAS,EAEb,OAASA,EAAQgsB,EAAOrsB,QACtB,GAAIqsB,EAAOhsB,GAAO/B,KAAK+C,QAAS8F,GAAa,OAAO,EAGtD,OAAO,CACT,CACF,CAxCqC,CAAWgG,GAgDhD,SAAsB4C,GACpB,OAAO,GAAYlE,GAMnB,SAASA,EAAIjC,GAEX,IAAInL,EAEJ,IAAKA,KAAOsR,EAEV,GAAInG,EAAKnL,KAASsR,EAAMtR,GAAM,OAAO,EAGvC,OAAO,CACT,CACF,CAlEwD,CAAa0O,GAG/D,GAAoB,mBAATA,EACT,OAAO,GAAYA,GAGrB,MAAM,IAAIvM,MAAM,+CAEpB,EAkFF,SAAS,GAAYmP,GACnB,OAQA,SAAmBnG,KAASzC,GAC1B,OAAO0D,QACLjB,GACkB,iBAATA,GACP,SAAUA,GAEViB,QAAQkF,EAAMzR,KAAK+C,KAAMuI,KAASzC,IAExC,CACF,CAEA,SAAS,KACP,OAAO,CACT,CC5NO,MAyCM,GAOX,SAQYgD,EAAMgD,EAAMuf,EAASC,GACT,mBAATxf,GAA0C,mBAAZuf,IACvCC,EAAUD,EAEVA,EAAUvf,EACVA,EAAO,MAGT,MAAMyf,EAAK,GAAQzf,GACb0f,EAAOF,GAAW,EAAI,GAS5B,SAASG,EAAQljB,EAAMvJ,EAAO0sB,GAG5B,MAAM5tB,EAAQyK,GAAwB,iBAATA,EAAoBA,EAAO,CAAC,EAEzD,GAA0B,iBAAfzK,EAAMwL,KAAmB,CAClC,MAAM3L,EAEqB,iBAAlBG,EAAM2c,QACT3c,EAAM2c,QAEc,iBAAf3c,EAAMH,KACXG,EAAMH,UACNkC,EAENvD,OAAOK,eAAegvB,EAAO,OAAQ,CACnC7tB,MACE,SAAiByK,EAAKe,MAAQ3L,EAAO,IAAMA,EAAO,IAAM,IAAO,KAErE,CAEA,OAAOguB,EAEP,SAASA,IAEP,IAEIC,EAEA5c,EAEA6c,EANA5pB,EAAS,GAQb,KAAK6J,GAAQyf,EAAGhjB,EAAMvJ,EAAO0sB,EAAQA,EAAQ/sB,OAAS,IAAM,SAC1DsD,EA0CZ,SAAkBnE,GAChB,GAAId,MAAMF,QAAQgB,GAChB,OAAOA,EAGT,GAAqB,iBAAVA,EACT,MAAO,CA5Ja,KA4JFA,GAGpB,MAAO,CAACA,EACV,CApDqB,CAASutB,EAAQ9iB,EAAMmjB,IAvGxB,QAyGJzpB,EAAO,IACT,OAAOA,EAKX,GAAIsG,EAAKwB,UA1GC,SA0GW9H,EAAO,GAO1B,IALA+M,GAAUsc,EAAU/iB,EAAKwB,SAASpL,QAAU,GAAK6sB,EAEjDK,EAAeH,EAAQK,OAAOxjB,GAGvByG,GAAU,GAAKA,EAASzG,EAAKwB,SAASpL,QAAQ,CAInD,GAFAitB,EAAYH,EAAQljB,EAAKwB,SAASiF,GAASA,EAAQ6c,EAAvCJ,GAxHN,QA0HFG,EAAU,GACZ,OAAOA,EAGT5c,EAC0B,iBAAjB4c,EAAU,GAAkBA,EAAU,GAAK5c,EAASwc,CAC/D,CAGF,OAAOvpB,CACT,CACF,CAvEAwpB,CAAQ3iB,OAAMjJ,EAAW,GAAzB4rB,EAyEJ,EC9EK,MAAM,GAOX,SAQY3iB,EAAMgD,EAAMuf,EAASC,GACT,mBAATxf,GAA0C,mBAAZuf,IACvCC,EAAUD,EACVA,EAAUvf,EACVA,EAAO,MAGT,GAAahD,EAAMgD,GAMnB,SAAkBvD,EAAMmjB,GACtB,MAAMM,EAASN,EAAQA,EAAQ/sB,OAAS,GACxC,OAAO0sB,EACL9iB,EACAyjB,EAASA,EAAOjiB,SAASjK,QAAQyI,GAAQ,KACzCyjB,EAEJ,GAbmCV,EAevC,EChKI,GAAM,CAAC,EAAE9uB,eA0Cf,SAAS2vB,GAAMruB,GACb,OAAOwK,OAAOxK,GAAS,IAAI6a,aAC7B,CC7CO,SAASyT,GAAkBhY,EAAO7L,GACvC,MAAM8jB,EAAK/jB,OAAOC,EAAKsQ,YAAYF,cAC7B2T,EAAS7B,GAAa4B,EAAG3T,eACzB1Z,EAAQoV,EAAMmY,cAAczsB,QAAQusB,GAE1C,IAAIG,GAEW,IAAXxtB,GACFoV,EAAMmY,cAAcnoB,KAAKioB,GACzBjY,EAAMqY,eAAeJ,GAAM,EAC3BG,EAAUpY,EAAMmY,cAAc5tB,SAE9ByV,EAAMqY,eAAeJ,KACrBG,EAAUxtB,EAAQ,GAGpB,MAAM0tB,EAAetY,EAAMqY,eAAeJ,GAGpChJ,EAAO,CACX/Z,KAAM,UACNmR,QAAS,IACTkS,WAAY,CACV5pB,KAAM,IAAMqR,EAAMwY,cAAgB,MAAQN,EAC1CD,GACEjY,EAAMwY,cACN,SACAN,GACCI,EAAe,EAAI,IAAMA,EAAe,IAC3CG,iBAAiB,EACjBC,gBAAiB,CAAC,mBAEpB/iB,SAAU,CAAC,CAACT,KAAM,OAAQxL,MAAOwK,OAAOkkB,MAE1CpY,EAAM2Y,MAAMxkB,EAAM8a,GAGlB,MAAM2J,EAAM,CACV1jB,KAAM,UACNmR,QAAS,MACTkS,WAAY,CAAC,EACb5iB,SAAU,CAACsZ,IAGb,OADAjP,EAAM2Y,MAAMxkB,EAAMykB,GACX5Y,EAAM6Y,UAAU1kB,EAAMykB,EAC/B,CCpCO,SAASE,GAAO9Y,EAAO7L,GAC5B,MAAM4kB,EAAU5kB,EAAK8gB,cACrB,IAAI+D,EAAS,IAQb,GANgB,cAAZD,EACFC,GAAU,KACW,SAAZD,IACTC,GAAU,KAAO7kB,EAAKmW,OAASnW,EAAKsQ,YAAc,KAGlC,mBAAdtQ,EAAKe,KACP,MAAO,CAACA,KAAM,OAAQxL,MAAO,KAAOyK,EAAKuB,IAAMsjB,GAGjD,MAAMC,EAAWjZ,EAAM5J,IAAIjC,GACrBmM,EAAO2Y,EAAS,GAElB3Y,GAAsB,SAAdA,EAAKpL,KACfoL,EAAK5W,MAAQ,IAAM4W,EAAK5W,MAExBuvB,EAAS/iB,QAAQ,CAAChB,KAAM,OAAQxL,MAAO,MAGzC,MAAMgU,EAAOub,EAASA,EAAS1uB,OAAS,GAQxC,OANImT,GAAsB,SAAdA,EAAKxI,KACfwI,EAAKhU,OAASsvB,EAEdC,EAASjpB,KAAK,CAACkF,KAAM,OAAQxL,MAAOsvB,IAG/BC,CACT,CC+DA,SAASC,GAAc/kB,GACrB,MAAMmhB,EAASnhB,EAAKmhB,OAEpB,OAAOA,QACHnhB,EAAKwB,SAASpL,OAAS,EACvB+qB,CACN,CChIA,MAAM6D,GAAM,EACNC,GAAQ,GAWP,SAASC,GAAU3vB,GACxB,MAAMsC,EAASkI,OAAOxK,GAChBykB,EAAS,YACf,IAAIwH,EAAQxH,EAAO2H,KAAK9pB,GACpBstB,EAAO,EAEX,MAAMC,EAAQ,GAEd,KAAO5D,GACL4D,EAAMvpB,KACJwpB,GAASxtB,EAAOL,MAAM2tB,EAAM3D,EAAM/qB,OAAQ0uB,EAAO,GAAG,GACpD3D,EAAM,IAGR2D,EAAO3D,EAAM/qB,MAAQ+qB,EAAM,GAAGprB,OAC9BorB,EAAQxH,EAAO2H,KAAK9pB,GAKtB,OAFAutB,EAAMvpB,KAAKwpB,GAASxtB,EAAOL,MAAM2tB,GAAOA,EAAO,GAAG,IAE3CC,EAAMhsB,KAAK,GACpB,CAYA,SAASisB,GAAS9vB,EAAOsB,EAAOC,GAC9B,IAAIgV,EAAa,EACbE,EAAWzW,EAAMa,OAErB,GAAIS,EAAO,CACT,IAAIsC,EAAO5D,EAAM+vB,YAAYxZ,GAE7B,KAAO3S,IAAS6rB,IAAO7rB,IAAS8rB,IAC9BnZ,IACA3S,EAAO5D,EAAM+vB,YAAYxZ,EAE7B,CAEA,GAAIhV,EAAK,CACP,IAAIqC,EAAO5D,EAAM+vB,YAAYtZ,EAAW,GAExC,KAAO7S,IAAS6rB,IAAO7rB,IAAS8rB,IAC9BjZ,IACA7S,EAAO5D,EAAM+vB,YAAYtZ,EAAW,EAExC,CAEA,OAAOA,EAAWF,EAAavW,EAAMiC,MAAMsU,EAAYE,GAAY,EACrE,CCxCO,MAAMuZ,GAAW,CACtBC,WCbK,SAAoB3Z,EAAO7L,GAEhC,MAAMtG,EAAS,CACbqH,KAAM,UACNmR,QAAS,aACTkS,WAAY,CAAC,EACb5iB,SAAUqK,EAAMhO,KAAKgO,EAAM5J,IAAIjC,IAAO,IAGxC,OADA6L,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,EDIE+rB,MEbK,SAAmB5Z,EAAO7L,GAE/B,MAAMtG,EAAS,CAACqH,KAAM,UAAWmR,QAAS,KAAMkS,WAAY,CAAC,EAAG5iB,SAAU,IAE1E,OADAqK,EAAM2Y,MAAMxkB,EAAMtG,GACX,CAACmS,EAAM6Y,UAAU1kB,EAAMtG,GAAS,CAACqH,KAAM,OAAQxL,MAAO,MAC/D,EFSE4D,KGbK,SAAc0S,EAAO7L,GAC1B,MAAMzK,EAAQyK,EAAKzK,MAAQyK,EAAKzK,MAAQ,KAAO,GAGzCorB,EAAO3gB,EAAK2gB,KAAO3gB,EAAK2gB,KAAKa,MAAM,uBAAyB,KAE5D4C,EAAa,CAAC,EAEhBzD,IACFyD,EAAWsB,UAAY,CAAC,YAAc/E,IAKxC,IAAIjnB,EAAS,CACXqH,KAAM,UACNmR,QAAS,OACTkS,aACA5iB,SAAU,CAAC,CAACT,KAAM,OAAQxL,WAa5B,OAVIyK,EAAKyU,OACP/a,EAAO2B,KAAO,CAACoZ,KAAMzU,EAAKyU,OAG5B5I,EAAM2Y,MAAMxkB,EAAMtG,GAClBA,EAASmS,EAAM6Y,UAAU1kB,EAAMtG,GAG/BA,EAAS,CAACqH,KAAM,UAAWmR,QAAS,MAAOkS,WAAY,CAAC,EAAG5iB,SAAU,CAAC9H,IACtEmS,EAAM2Y,MAAMxkB,EAAMtG,GACXA,CACT,EHlBEisB,OIfK,SAAuB9Z,EAAO7L,GAEnC,MAAMtG,EAAS,CACbqH,KAAM,UACNmR,QAAS,MACTkS,WAAY,CAAC,EACb5iB,SAAUqK,EAAM5J,IAAIjC,IAGtB,OADA6L,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,EJMEiiB,SKjBK,SAAkB9P,EAAO7L,GAE9B,MAAMtG,EAAS,CACbqH,KAAM,UACNmR,QAAS,KACTkS,WAAY,CAAC,EACb5iB,SAAUqK,EAAM5J,IAAIjC,IAGtB,OADA6L,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,ELQEmqB,kBAAiB,GACjB+B,SMXK,SAAkB/Z,EAAO7L,GAC9B,MAAM6lB,EAAeha,EAAMga,aAC3B,IAAIC,EAAK,EAET,KAAOA,KAAMD,GAAcC,IAE3B,MAAMxV,EAAavQ,OAAO+lB,GAS1B,OAPAD,EAAavV,GAAc,CACzBvP,KAAM,qBACNuP,aACA9O,SAAU,CAAC,CAACT,KAAM,YAAaS,SAAUxB,EAAKwB,WAC9CjL,SAAUyJ,EAAKzJ,UAGVstB,GAAkBhY,EAAO,CAC9B9K,KAAM,oBACNuP,aACA/Z,SAAUyJ,EAAKzJ,UAEnB,ENREkb,QOpBK,SAAiB5F,EAAO7L,GAE7B,MAAMtG,EAAS,CACbqH,KAAM,UACNmR,QAAS,IAAMlS,EAAK6gB,MACpBuD,WAAY,CAAC,EACb5iB,SAAUqK,EAAM5J,IAAIjC,IAGtB,OADA6L,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,EPWEoiB,KQnBK,SAAcjQ,EAAO7L,GAC1B,GAAI6L,EAAMka,UAAW,CAEnB,MAAMrsB,EAAS,CAACqH,KAAM,MAAOxL,MAAOyK,EAAKzK,OAEzC,OADAsW,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,CAGA,OAAO,IACT,ERUEssB,eSjBK,SAAwBna,EAAO7L,GACpC,MAAMgN,EAAMnB,EAAMwE,WAAWrQ,EAAKsQ,YAElC,IAAKtD,EACH,OAAO2X,GAAO9Y,EAAO7L,GAIvB,MAAMokB,EAAa,CAACtuB,IAAKosB,GAAalV,EAAI9U,KAAO,IAAKqJ,IAAKvB,EAAKuB,KAE9C,OAAdyL,EAAI4T,YAAgCtpB,IAAd0V,EAAI4T,QAC5BwD,EAAWxD,MAAQ5T,EAAI4T,OAIzB,MAAMlnB,EAAS,CAACqH,KAAM,UAAWmR,QAAS,MAAOkS,aAAY5iB,SAAU,IAEvE,OADAqK,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,ETAEuiB,MUpBK,SAAepQ,EAAO7L,GAE3B,MAAMokB,EAAa,CAACtuB,IAAKosB,GAAaliB,EAAK9H,MAE1B,OAAb8H,EAAKuB,UAA6BjK,IAAb0I,EAAKuB,MAC5B6iB,EAAW7iB,IAAMvB,EAAKuB,KAGL,OAAfvB,EAAK4gB,YAAiCtpB,IAAf0I,EAAK4gB,QAC9BwD,EAAWxD,MAAQ5gB,EAAK4gB,OAI1B,MAAMlnB,EAAS,CAACqH,KAAM,UAAWmR,QAAS,MAAOkS,aAAY5iB,SAAU,IAEvE,OADAqK,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,EVKEusB,WWvBK,SAAoBpa,EAAO7L,GAEhC,MAAMkK,EAAO,CAACnJ,KAAM,OAAQxL,MAAOyK,EAAKzK,MAAM2a,QAAQ,YAAa,MACnErE,EAAM2Y,MAAMxkB,EAAMkK,GAGlB,MAAMxQ,EAAS,CACbqH,KAAM,UACNmR,QAAS,OACTkS,WAAY,CAAC,EACb5iB,SAAU,CAAC0I,IAGb,OADA2B,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,EXUEwsB,cYpBK,SAAuBra,EAAO7L,GACnC,MAAMgN,EAAMnB,EAAMwE,WAAWrQ,EAAKsQ,YAElC,IAAKtD,EACH,OAAO2X,GAAO9Y,EAAO7L,GAIvB,MAAMokB,EAAa,CAAC5pB,KAAM0nB,GAAalV,EAAI9U,KAAO,KAEhC,OAAd8U,EAAI4T,YAAgCtpB,IAAd0V,EAAI4T,QAC5BwD,EAAWxD,MAAQ5T,EAAI4T,OAIzB,MAAMlnB,EAAS,CACbqH,KAAM,UACNmR,QAAS,IACTkS,aACA5iB,SAAUqK,EAAM5J,IAAIjC,IAGtB,OADA6L,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,EZFEohB,KavBK,SAAcjP,EAAO7L,GAE1B,MAAMokB,EAAa,CAAC5pB,KAAM0nB,GAAaliB,EAAK9H,MAEzB,OAAf8H,EAAK4gB,YAAiCtpB,IAAf0I,EAAK4gB,QAC9BwD,EAAWxD,MAAQ5gB,EAAK4gB,OAI1B,MAAMlnB,EAAS,CACbqH,KAAM,UACNmR,QAAS,IACTkS,aACA5iB,SAAUqK,EAAM5J,IAAIjC,IAGtB,OADA6L,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,EbOEwiB,SFfK,SAAkBrQ,EAAO7L,EAAMyjB,GACpC,MAAM0C,EAAUta,EAAM5J,IAAIjC,GACpBomB,EAAQ3C,EAyEhB,SAAmBzjB,GACjB,IAAIomB,GAAQ,EACZ,GAAkB,SAAdpmB,EAAKe,KAAiB,CACxBqlB,EAAQpmB,EAAKmhB,SAAU,EACvB,MAAM3f,EAAWxB,EAAKwB,SACtB,IAAI/K,GAAS,EAEb,MAAQ2vB,KAAW3vB,EAAQ+K,EAASpL,QAClCgwB,EAAQrB,GAAcvjB,EAAS/K,GAEnC,CAEA,OAAO2vB,CACT,CAtFyBC,CAAU5C,GAAUsB,GAAc/kB,GAEnDokB,EAAa,CAAC,EAEd5iB,EAAW,GAEjB,GAA4B,kBAAjBxB,EAAKohB,QAAuB,CACrC,MAAMjV,EAAOga,EAAQ,GAErB,IAAI3U,EAEArF,GAAsB,YAAdA,EAAKpL,MAAuC,MAAjBoL,EAAK+F,QAC1CV,EAAYrF,GAEZqF,EAAY,CAACzQ,KAAM,UAAWmR,QAAS,IAAKkS,WAAY,CAAC,EAAG5iB,SAAU,IACtE2kB,EAAQpkB,QAAQyP,IAGdA,EAAUhQ,SAASpL,OAAS,GAC9Bob,EAAUhQ,SAASO,QAAQ,CAAChB,KAAM,OAAQxL,MAAO,MAGnDic,EAAUhQ,SAASO,QAAQ,CACzBhB,KAAM,UACNmR,QAAS,QACTkS,WAAY,CAACrjB,KAAM,WAAYqgB,QAASphB,EAAKohB,QAASkF,UAAU,GAChE9kB,SAAU,KAKZ4iB,EAAWsB,UAAY,CAAC,iBAC1B,CAEA,IAAIjvB,GAAS,EAEb,OAASA,EAAQ0vB,EAAQ/vB,QAAQ,CAC/B,MAAMmwB,EAAQJ,EAAQ1vB,IAIpB2vB,GACU,IAAV3vB,GACe,YAAf8vB,EAAMxlB,MACY,MAAlBwlB,EAAMrU,UAEN1Q,EAAS3F,KAAK,CAACkF,KAAM,OAAQxL,MAAO,OAGnB,YAAfgxB,EAAMxlB,MAAwC,MAAlBwlB,EAAMrU,SAAoBkU,EAGxD5kB,EAAS3F,KAAK0qB,GAFd/kB,EAAS3F,QAAQ0qB,EAAM/kB,SAI3B,CAEA,MAAM+H,EAAO4c,EAAQA,EAAQ/vB,OAAS,GAGlCmT,IAAS6c,GAAuB,YAAd7c,EAAKxI,MAAuC,MAAjBwI,EAAK2I,UACpD1Q,EAAS3F,KAAK,CAACkF,KAAM,OAAQxL,MAAO,OAItC,MAAMmE,EAAS,CAACqH,KAAM,UAAWmR,QAAS,KAAMkS,aAAY5iB,YAE5D,OADAqK,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,EErDEgI,Kc3BK,SAAcmK,EAAO7L,GAE1B,MAAMokB,EAAa,CAAC,EACd+B,EAAUta,EAAM5J,IAAIjC,GAC1B,IAAIvJ,GAAS,EAOb,IAL0B,iBAAfuJ,EAAKnJ,OAAqC,IAAfmJ,EAAKnJ,QACzCutB,EAAWvtB,MAAQmJ,EAAKnJ,SAIjBJ,EAAQ0vB,EAAQ/vB,QAAQ,CAC/B,MAAMmwB,EAAQJ,EAAQ1vB,GAEtB,GACiB,YAAf8vB,EAAMxlB,MACY,OAAlBwlB,EAAMrU,SACNqU,EAAMnC,YACN3vB,MAAMF,QAAQgyB,EAAMnC,WAAWsB,YAC/Ba,EAAMnC,WAAWsB,UAAU/pB,SAAS,kBACpC,CACAyoB,EAAWsB,UAAY,CAAC,sBACxB,KACF,CACF,CAGA,MAAMhsB,EAAS,CACbqH,KAAM,UACNmR,QAASlS,EAAKkhB,QAAU,KAAO,KAC/BkD,aACA5iB,SAAUqK,EAAMhO,KAAKsoB,GAAS,IAGhC,OADAta,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,EdPE8X,Ue7BK,SAAmB3F,EAAO7L,GAE/B,MAAMtG,EAAS,CACbqH,KAAM,UACNmR,QAAS,IACTkS,WAAY,CAAC,EACb5iB,SAAUqK,EAAM5J,IAAIjC,IAGtB,OADA6L,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,EfoBE8sB,KgB7BK,SAAc3a,EAAO7L,GAE1B,MAAMtG,EAAS,CAACqH,KAAM,OAAQS,SAAUqK,EAAMhO,KAAKgO,EAAM5J,IAAIjC,KAE7D,OADA6L,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,EhByBEojB,OiB/BK,SAAgBjR,EAAO7L,GAE5B,MAAMtG,EAAS,CACbqH,KAAM,UACNmR,QAAS,SACTkS,WAAY,CAAC,EACb5iB,SAAUqK,EAAM5J,IAAIjC,IAGtB,OADA6L,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,EjBsBE+sB,MkB9BK,SAAe5a,EAAO7L,GAC3B,MAAM0mB,EAAO7a,EAAM5J,IAAIjC,GACjB2mB,EAAWD,EAAKta,QAEhBwa,EAAe,GAErB,GAAID,EAAU,CAEZ,MAAMxa,EAAO,CACXpL,KAAM,UACNmR,QAAS,QACTkS,WAAY,CAAC,EACb5iB,SAAUqK,EAAMhO,KAAK,CAAC8oB,IAAW,IAEnC9a,EAAM2Y,MAAMxkB,EAAKwB,SAAS,GAAI2K,GAC9Bya,EAAa/qB,KAAKsQ,EACpB,CAEA,GAAIua,EAAKtwB,OAAS,EAAG,CAEnB,MAAMywB,EAAO,CACX9lB,KAAM,UACNmR,QAAS,QACTkS,WAAY,CAAC,EACb5iB,SAAUqK,EAAMhO,KAAK6oB,GAAM,IAGvB7vB,EAAQ6sB,GAAW1jB,EAAKwB,SAAS,IACjC1K,EAAM6sB,GAAS3jB,EAAKwB,SAASxB,EAAKwB,SAASpL,OAAS,IACtDS,EAAMH,MAAQI,EAAIJ,OAAMmwB,EAAKtwB,SAAW,CAACM,QAAOC,QACpD8vB,EAAa/qB,KAAKgrB,EACpB,CAGA,MAAMntB,EAAS,CACbqH,KAAM,UACNmR,QAAS,QACTkS,WAAY,CAAC,EACb5iB,SAAUqK,EAAMhO,KAAK+oB,GAAc,IAGrC,OADA/a,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,ElBXEotB,UmBjCK,SAAmBjb,EAAO7L,GAI/B,MAAMtG,EAAS,CACbqH,KAAM,UACNmR,QAAS,KACTkS,WAAY,CAAC,EACb5iB,SAAUqK,EAAM5J,IAAIjC,IAGtB,OADA6L,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,EnBsBEqtB,SoBtBK,SAAkBlb,EAAO7L,EAAMyjB,GACpC,MAAMuD,EAAWvD,EAASA,EAAOjiB,cAAWlK,EAGtC4a,EAAuB,KADZ8U,EAAWA,EAASzvB,QAAQyI,GAAQ,GACpB,KAAO,KAClCinB,EAAQxD,GAA0B,UAAhBA,EAAO1iB,KAAmB0iB,EAAOwD,WAAQ3vB,EAC3DlB,EAAS6wB,EAAQA,EAAM7wB,OAAS4J,EAAKwB,SAASpL,OACpD,IAAI8wB,GAAa,EAEjB,MAAMC,EAAQ,GAEd,OAASD,EAAY9wB,GAAQ,CAE3B,MAAMgxB,EAAOpnB,EAAKwB,SAAS0lB,GAErB9C,EAAa,CAAC,EACdiD,EAAaJ,EAAQA,EAAMC,QAAa5vB,EAE1C+vB,IACFjD,EAAW6C,MAAQI,GAIrB,IAAI3tB,EAAS,CAACqH,KAAM,UAAWmR,UAASkS,aAAY5iB,SAAU,IAE1D4lB,IACF1tB,EAAO8H,SAAWqK,EAAM5J,IAAImlB,GAC5Bvb,EAAM2Y,MAAM4C,EAAM1tB,GAClBA,EAASmS,EAAM6Y,UAAU1kB,EAAMtG,IAGjCytB,EAAMtrB,KAAKnC,EACb,CAGA,MAAMA,EAAS,CACbqH,KAAM,UACNmR,QAAS,KACTkS,WAAY,CAAC,EACb5iB,SAAUqK,EAAMhO,KAAKspB,GAAO,IAG9B,OADAtb,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,EpBpBEwQ,KqBhCK,SAAc2B,EAAO7L,GAE1B,MAAMtG,EAAS,CAACqH,KAAM,OAAQxL,MAAO2vB,GAAUnlB,OAAOC,EAAKzK,SAE3D,OADAsW,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,ErB4BEiU,csBpCK,SAAuB9B,EAAO7L,GAEnC,MAAMtG,EAAS,CACbqH,KAAM,UACNmR,QAAS,KACTkS,WAAY,CAAC,EACb5iB,SAAU,IAGZ,OADAqK,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,EtB2BE4tB,KAAMC,GACNC,KAAMD,GACNlX,WAAYkX,GACZE,mBAAoBF,IAItB,SAASA,KAEP,OAAO,IACT,CuBwGA,MAAM,GAAM,CAAC,EAAEtzB,eAYR,SAASyzB,GAAYnnB,EAAMpL,GAChC,MAAM8J,EAAW9J,GAAW,CAAC,EACvB4wB,EAAY9mB,EAAS0oB,qBAAsB,EAE3C9B,EAAe,CAAC,EA2DtB,OAnDAha,EAAMka,UAAYA,EAElBla,EAAMwY,mBACuB/sB,IAA3B2H,EAASolB,eAA0D,OAA3BplB,EAASolB,cAC7C,gBACAplB,EAASolB,cAEfxY,EAAM+b,cAAgB3oB,EAAS2oB,eAAiB,YAEhD/b,EAAMgc,qBAAuB5oB,EAAS4oB,sBAAwB,KAE9Dhc,EAAMic,wBAA0B7oB,EAAS6oB,yBAA2B,CAClEpC,UAAW,CAAC,YAGd7Z,EAAMkc,kBAAoB9oB,EAAS8oB,mBAAqB,kBAExDlc,EAAMmc,eAAiB/oB,EAAS+oB,eAEhCnc,EAAMoc,YAAchpB,EAASgpB,YAE7Bpc,EAAM0Z,SAAW,IAAIA,MAAatmB,EAASsmB,UAI3C1Z,EAAMwE,W5BxLD,SAAqB9P,GAE1B,MAAM2nB,EAAQn0B,OAAO0Z,OAAO,MAE5B,IAAKlN,IAASA,EAAKQ,KACjB,MAAM,IAAI/J,MAAM,wCAUlB,OAPA,GAAMuJ,EAAM,cAAe8P,IACzB,MAAMyT,EAAKF,GAAMvT,EAAWC,YACxBwT,IAAO,GAAIpvB,KAAKwzB,EAAOpE,KACzBoE,EAAMpE,GAAMzT,EACd,IAMF,SAAoBC,GAClB,MAAMwT,EAAKF,GAAMtT,GAEjB,OAAOwT,GAAM,GAAIpvB,KAAKwzB,EAAOpE,GAAMoE,EAAMpE,GAAM,IACjD,CACF,C4BiKqBqE,CAAY5nB,GAC/BsL,EAAMga,aAAeA,EAErBha,EAAMmY,cAAgB,GAEtBnY,EAAMqY,eAAiB,CAAC,EAExBrY,EAAM2Y,MAAQA,GACd3Y,EAAM6Y,UAAYA,GAClB7Y,EAAMzK,IAsGN,SAAkBpB,EAAMyjB,GAEtB,OAAO,GAAI5X,EAAO7L,EAAMyjB,EAC1B,EAxGA5X,EAAM5J,IAkHN,SAAkBwhB,GAEhB,OAAO,GAAI5X,EAAO4X,EACpB,EApHA5X,EAAMhO,KAAO,GAEbgO,EAAMuc,QAAUA,EAEhBhF,GAAM7iB,EAAM,sBAAuB8P,IACjC,MAAMyT,EAAK/jB,OAAOsQ,EAAWC,YAAYF,cAIpC,GAAI1b,KAAKmxB,EAAc/B,KAC1B+B,EAAa/B,GAAMzT,EACrB,IAIKxE,EAWP,SAASuc,EAAQhmB,EAAMC,GAErB,GAAID,GAAQ,SAAUA,GAAQA,EAAK/G,KAAM,CAEvC,MAAMA,EAAO+G,EAAK/G,KAEdA,EAAKgtB,QACY,YAAfhmB,EAAMtB,OACRsB,EAAQ,CACNtB,KAAM,UACNmR,QAAS,GACTkS,WAAY,CAAC,EACb5iB,SAAU,KAIda,EAAM6P,QAAU7W,EAAKgtB,OAGJ,YAAfhmB,EAAMtB,MAAsB1F,EAAKitB,cACnCjmB,EAAM+hB,WAAa,IAAI/hB,EAAM+hB,cAAe/oB,EAAKitB,cAG/C,aAAcjmB,GAASA,EAAMb,UAAYnG,EAAKktB,YAChDlmB,EAAMb,SAAWnG,EAAKktB,UAE1B,CAEA,GAAInmB,EAAM,CACR,MAAMomB,EAAM,SAAUpmB,EAAOA,EAAO,CAAC7L,SAAU6L,ICpQ9C,SAAmBpC,GACxB,QACGA,GACAA,EAAKzJ,UACLyJ,EAAKzJ,SAASM,OACdmJ,EAAKzJ,SAASM,MAAMH,MACpBsJ,EAAKzJ,SAASM,MAAMF,QACpBqJ,EAAKzJ,SAASO,KACdkJ,EAAKzJ,SAASO,IAAIJ,MAClBsJ,EAAKzJ,SAASO,IAAIH,OAEvB,ED2PW8xB,CAAUD,KAEbnmB,EAAM9L,SAAW,CAACM,MAAO6sB,GAAW8E,GAAM1xB,IAAK6sB,GAAS6E,IAE5D,CAEA,OAAOnmB,CACT,CAUA,SAASwJ,EAAM7L,EAAMkS,EAASwW,EAAOlnB,GAOnC,OANI/M,MAAMF,QAAQm0B,KAChBlnB,EAAWknB,EACXA,EAAQ,CAAC,GAIJN,EAAQpoB,EAAM,CACnBe,KAAM,UACNmR,UACAkS,WAAYsE,GAAS,CAAC,EACtBlnB,SAAUA,GAAY,IAE1B,CA8BF,CAYA,SAASgjB,GAAM1iB,EAAM6mB,GACf7mB,EAAKvL,WAAUoyB,EAAGpyB,ShCpTjB,SAAkByJ,GACvB,MAAO,CAACnJ,MAAO6sB,GAAW1jB,GAAOlJ,IAAK6sB,GAAS3jB,GACjD,CgCkTmC,CAAS8B,GAC5C,CAcA,SAAS4iB,GAAU5iB,EAAM6mB,GAEvB,IAAIjvB,EAASivB,EAGb,GAAI7mB,GAAQA,EAAKzG,KAAM,CACrB,MAAMgtB,EAAQvmB,EAAKzG,KAAKgtB,MAClBE,EAAYzmB,EAAKzG,KAAKktB,UACtBD,EAAcxmB,EAAKzG,KAAKitB,YAET,iBAAVD,IAGW,YAAhB3uB,EAAOqH,KACTrH,EAAOwY,QAAUmW,EAOjB3uB,EAAS,CACPqH,KAAM,UACNmR,QAASmW,EACTjE,WAAY,CAAC,EACb5iB,SAAU,KAeI,YAAhB9H,EAAOqH,MAAsBunB,IAC/B5uB,EAAO0qB,WAAa,IAAI1qB,EAAO0qB,cAAekE,IAI9C,aAAc5uB,GACdA,EAAO8H,UADP,MAEA+mB,IAIA7uB,EAAO8H,SAAW+mB,EAEtB,CAEA,OAAO7uB,CACT,CAeO,SAAS,GAAImS,EAAO7L,EAAMyjB,GAC/B,MAAM1iB,EAAOf,GAAQA,EAAKe,KAG1B,IAAKA,EACH,MAAM,IAAI/J,MAAM,uBAAyBgJ,EAAO,KAGlD,OAAI,GAAItL,KAAKmX,EAAM0Z,SAAUxkB,GACpB8K,EAAM0Z,SAASxkB,GAAM8K,EAAO7L,EAAMyjB,GAGvC5X,EAAMoc,aAAepc,EAAMoc,YAAYtsB,SAASoF,GAG3C,aAAcf,EAAO,IAAIA,EAAMwB,SAAU,GAAIqK,EAAO7L,IAASA,EAGlE6L,EAAMmc,eACDnc,EAAMmc,eAAenc,EAAO7L,EAAMyjB,GAiE7C,SAA+B5X,EAAO7L,GACpC,MAAM3E,EAAO2E,EAAK3E,MAAQ,CAAC,EAErB3B,IACJ,UAAWsG,IACT,GAAItL,KAAK2G,EAAM,gBAAkB,GAAI3G,KAAK2G,EAAM,aAE9C,CACE0F,KAAM,UACNmR,QAAS,MACTkS,WAAY,CAAC,EACb5iB,SAAU,GAAIqK,EAAO7L,IALvB,CAACe,KAAM,OAAQxL,MAAOyK,EAAKzK,OASjC,OADAsW,EAAM2Y,MAAMxkB,EAAMtG,GACXmS,EAAM6Y,UAAU1kB,EAAMtG,EAC/B,CA9ESkvB,CAAsB/c,EAAO7L,EACtC,CAaO,SAAS,GAAI6L,EAAO4X,GAEzB,MAAM5mB,EAAS,GAEf,GAAI,aAAc4mB,EAAQ,CACxB,MAAMoF,EAAQpF,EAAOjiB,SACrB,IAAI/K,GAAS,EACb,OAASA,EAAQoyB,EAAMzyB,QAAQ,CAC7B,MAAMsD,EAAS,GAAImS,EAAOgd,EAAMpyB,GAAQgtB,GAGxC,GAAI/pB,EAAQ,CACV,GAAIjD,GAAmC,UAA1BoyB,EAAMpyB,EAAQ,GAAGsK,OACvBtM,MAAMF,QAAQmF,IAA2B,SAAhBA,EAAOqH,OACnCrH,EAAOnE,MAAQmE,EAAOnE,MAAM2a,QAAQ,OAAQ,MAGzCzb,MAAMF,QAAQmF,IAA2B,YAAhBA,EAAOqH,MAAoB,CACvD,MAAMoL,EAAOzS,EAAO8H,SAAS,GAEzB2K,GAAsB,SAAdA,EAAKpL,OACfoL,EAAK5W,MAAQ4W,EAAK5W,MAAM2a,QAAQ,OAAQ,IAE5C,CAGEzb,MAAMF,QAAQmF,GAChBmD,EAAOhB,QAAQnC,GAEfmD,EAAOhB,KAAKnC,EAEhB,CACF,CACF,CAEA,OAAOmD,CACT,CA0CO,SAAS,GAAKgsB,EAAOzC,GAE1B,MAAM1sB,EAAS,GACf,IAAIjD,GAAS,EAMb,IAJI2vB,GACF1sB,EAAOmC,KAAK,CAACkF,KAAM,OAAQxL,MAAO,SAG3BkB,EAAQoyB,EAAMzyB,QACjBK,GAAOiD,EAAOmC,KAAK,CAACkF,KAAM,OAAQxL,MAAO,OAC7CmE,EAAOmC,KAAKgtB,EAAMpyB,IAOpB,OAJI2vB,GAASyC,EAAMzyB,OAAS,GAC1BsD,EAAOmC,KAAK,CAACkF,KAAM,OAAQxL,MAAO,OAG7BmE,CACT,CEheO,SAASovB,GAAOvoB,EAAMpL,GAC3B,MAAM0W,EAAQ6b,GAAYnnB,EAAMpL,GAC1B6K,EAAO6L,EAAMzK,IAAIb,EAAM,MACvBwoB,EClFD,SAAgBld,GAErB,MAAMmd,EAAY,GAClB,IAAIvyB,GAAS,EAEb,OAASA,EAAQoV,EAAMmY,cAAc5tB,QAAQ,CAC3C,MAAM4W,EAAMnB,EAAMga,aAAaha,EAAMmY,cAAcvtB,IAEnD,IAAKuW,EACH,SAGF,MAAM7I,EAAU0H,EAAM5J,IAAI+K,GACpB8W,EAAK/jB,OAAOiN,EAAIsD,YAAYF,cAC5B2T,EAAS7B,GAAa4B,EAAG3T,eAC/B,IAAI8Y,EAAiB,EAErB,MAAMC,EAAiB,GAEvB,OAASD,GAAkBpd,EAAMqY,eAAeJ,IAAK,CAEnD,MAAMqF,EAAgB,CACpBpoB,KAAM,UACNmR,QAAS,IACTkS,WAAY,CACV5pB,KACE,IACAqR,EAAMwY,cACN,SACAN,GACCkF,EAAiB,EAAI,IAAMA,EAAiB,IAC/CG,qBAAqB,EACrB1D,UAAW,CAAC,yBACZ2D,UAAWxd,EAAMkc,mBAEnBvmB,SAAU,CAAC,CAACT,KAAM,OAAQxL,MAAO,OAG/B0zB,EAAiB,GACnBE,EAAc3nB,SAAS3F,KAAK,CAC1BkF,KAAM,UACNmR,QAAS,MACT1Q,SAAU,CAAC,CAACT,KAAM,OAAQxL,MAAOwK,OAAOkpB,OAIxCC,EAAe9yB,OAAS,GAC1B8yB,EAAertB,KAAK,CAACkF,KAAM,OAAQxL,MAAO,MAG5C2zB,EAAertB,KAAKstB,EACtB,CAEA,MAAM5f,EAAOpF,EAAQA,EAAQ/N,OAAS,GAEtC,GAAImT,GAAsB,YAAdA,EAAKxI,MAAuC,MAAjBwI,EAAK2I,QAAiB,CAC3D,MAAMoX,EAAW/f,EAAK/H,SAAS+H,EAAK/H,SAASpL,OAAS,GAClDkzB,GAA8B,SAAlBA,EAASvoB,KACvBuoB,EAAS/zB,OAAS,IAElBgU,EAAK/H,SAAS3F,KAAK,CAACkF,KAAM,OAAQxL,MAAO,MAG3CgU,EAAK/H,SAAS3F,QAAQqtB,EACxB,MACE/kB,EAAQtI,QAAQqtB,GAIlB,MAAMhN,EAAW,CACfnb,KAAM,UACNmR,QAAS,KACTkS,WAAY,CAACN,GAAIjY,EAAMwY,cAAgB,MAAQN,GAC/CviB,SAAUqK,EAAMhO,KAAKsG,GAAS,IAGhC0H,EAAM2Y,MAAMxX,EAAKkP,GAEjB8M,EAAUntB,KAAKqgB,EACjB,CAEA,GAAyB,IAArB8M,EAAU5yB,OAId,MAAO,CACL2K,KAAM,UACNmR,QAAS,UACTkS,WAAY,CAACmF,eAAe,EAAM7D,UAAW,CAAC,cAC9ClkB,SAAU,CACR,CACET,KAAM,UACNmR,QAASrG,EAAMgc,qBACfzD,WAAY,IAEPlqB,KAAKwF,MAAMxF,KAAKC,UAAU0R,EAAMic,0BACnChE,GAAI,kBAENtiB,SAAU,CAAC,CAACT,KAAM,OAAQxL,MAAOsW,EAAM+b,iBAEzC,CAAC7mB,KAAM,OAAQxL,MAAO,MACtB,CACEwL,KAAM,UACNmR,QAAS,KACTkS,WAAY,CAAC,EACb5iB,SAAUqK,EAAMhO,KAAKmrB,GAAW,IAElC,CAACjoB,KAAM,OAAQxL,MAAO,OAG5B,CD5Bei0B,CAAO3d,GAUpB,OARIkd,GAIF/oB,EAAKwB,SAAS3F,KAAK,CAACkF,KAAM,OAAQxL,MAAO,MAAOwzB,GAI3Ct0B,MAAMF,QAAQyL,GAAQ,CAACe,KAAM,OAAQS,SAAUxB,GAAQA,CAChE,CEjEA,OARE,SACYa,EAAa1L,GACrB,OAAO0L,GAAe,QAASA,EAcrC,SAAgBA,EAAa1L,GAC3B,MAAO,CAAC6K,EAAMjI,EAAMkF,KAClB4D,EAAYjE,IAAIksB,GAAO9oB,EAAM7K,GAAU4C,GAAO4C,IAC5CsC,EAAKtC,EAAK,GACX,CAEL,CAnBU8uB,CAAO5oB,EAAa1L,GA2B9B,SAAgBA,GAEd,OAAQ6K,GAAS8oB,GAAO9oB,EAAM7K,EAChC,CA7BUu0B,CAAO7oB,GAAe1L,EAE9B,kBCrCK,MAAMw0B,GAOX,WAAA30B,CAAY40B,EAAUC,EAAQ5E,GAC5BxtB,KAAKmyB,SAAWA,EAChBnyB,KAAKoyB,OAASA,EACV5E,IACFxtB,KAAKwtB,MAAQA,EAEjB,ECPK,SAAS6E,GAAM3B,EAAalD,GAEjC,MAAM2E,EAAW,CAAC,EAEZC,EAAS,CAAC,EAChB,IAAIpzB,GAAS,EAEb,OAASA,EAAQ0xB,EAAY/xB,QAC3BrC,OAAOsL,OAAOuqB,EAAUzB,EAAY1xB,GAAOmzB,UAC3C71B,OAAOsL,OAAOwqB,EAAQ1B,EAAY1xB,GAAOozB,QAG3C,OAAO,IAAIF,GAAOC,EAAUC,EAAQ5E,EACtC,CCrBO,SAAS,GAAU1vB,GACxB,OAAOA,EAAM4a,aACf,CFiBAwZ,GAAO31B,UAAU41B,SAAW,CAAC,EAE7BD,GAAO31B,UAAU61B,OAAS,CAAC,EAE3BF,GAAO31B,UAAUixB,MAAQ,KG3BlB,MAAM8E,GAMX,WAAA/0B,CAAY40B,EAAUI,GAEpBvyB,KAAKmyB,SAAWA,EAEhBnyB,KAAKuyB,UAAYA,CACnB,EAIFD,GAAK/1B,UAAUixB,MAAQ,KACvB8E,GAAK/1B,UAAUi2B,SAAU,EACzBF,GAAK/1B,UAAUk2B,YAAa,EAC5BH,GAAK/1B,UAAUm2B,mBAAoB,EACnCJ,GAAK/1B,UAAUo2B,QAAS,EACxBL,GAAK/1B,UAAUq2B,gBAAiB,EAChCN,GAAK/1B,UAAUs2B,gBAAiB,EAChCP,GAAK/1B,UAAUu2B,uBAAwB,EACvCR,GAAK/1B,UAAUw2B,iBAAkB,EACjCT,GAAK/1B,UAAU6c,SAAU,ECxBzB,IAAI4Z,GAAS,EAEN,MAAM,GAAUC,KACVR,GAAaQ,KACbP,GAAoBO,KACpBN,GAASM,KACTJ,GAAiBI,KACjBL,GAAiBK,KACjBH,GAAwBG,KAErC,SAASA,KACP,OAAO,KAAOD,EAChB,CCPA,MAAMhI,GAAS1uB,OAAO+M,KAAK,GAEpB,MAAM6pB,WAAoBZ,GAQ/B,WAAA/0B,CAAY40B,EAAUI,EAAWY,EAAM3F,GACrC,IAAIxuB,GAAS,EAMb,GAJAY,MAAMuyB,EAAUI,GAEhBa,GAAKpzB,KAAM,QAASwtB,GAEA,iBAAT2F,EACT,OAASn0B,EAAQgsB,GAAOrsB,QAAQ,CAC9B,MAAM+P,EAAQsc,GAAOhsB,GACrBo0B,GAAKpzB,KAAMgrB,GAAOhsB,IAASm0B,EAAO,EAAMzkB,MAAY,EAAMA,GAC5D,CAEJ,EAUF,SAAS0kB,GAAKhuB,EAAQhI,EAAKU,GACrBA,IAEFsH,EAAOhI,GAAOU,EAElB,CAZAo1B,GAAY32B,UAAU6c,SAAU,ECbhC,MAAM,GAAM,CAAC,EAAE5c,eAMR,SAASwZ,GAAO4C,GAErB,MAAMuZ,EAAW,CAAC,EAEZC,EAAS,CAAC,EAEhB,IAAInuB,EAEJ,IAAKA,KAAQ2U,EAAW+T,WACtB,GAAI,GAAI1vB,KAAK2b,EAAW+T,WAAY1oB,GAAO,CACzC,MAAMnG,EAAQ8a,EAAW+T,WAAW1oB,GAC9BO,EAAO,IAAI0uB,GACfjvB,EACA2U,EAAWya,UAAUza,EAAW0a,YAAc,CAAC,EAAGrvB,GAClDnG,EACA8a,EAAW4U,OAIX5U,EAAWma,iBACXna,EAAWma,gBAAgB7uB,SAASD,KAEpCO,EAAKuuB,iBAAkB,GAGzBZ,EAASluB,GAAQO,EAEjB4tB,EAAO,GAAUnuB,IAASA,EAC1BmuB,EAAO,GAAU5tB,EAAK+tB,YAActuB,CACtC,CAGF,OAAO,IAAIiuB,GAAOC,EAAUC,EAAQxZ,EAAW4U,MACjD,CCvDO,MAAM+F,GAAQvd,GAAO,CAC1BwX,MAAO,QACP,SAAA6F,CAAUte,EAAG9Q,GACX,MAAO,SAAWA,EAAKlE,MAAM,GAAG2Y,aAClC,EACAiU,WAAY,CACV6G,aAAc,KACdC,aAAc,KACdC,UAAW,KACXC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,UAAW,QCZFC,GAAM/d,GAAO,CACxBwX,MAAO,MACP,SAAA6F,CAAUte,EAAG9Q,GACX,MAAO,OAASA,EAAKlE,MAAM,GAAG2Y,aAChC,EACAiU,WAAY,CAACqH,QAAS,KAAMC,QAAS,KAAMC,SAAU,QCFhD,SAASC,GAAuBb,EAAYf,GACjD,OAAOA,KAAae,EAAaA,EAAWf,GAAaA,CAC3D,CCAO,SAAS6B,GAAyBd,EAAYnB,GACnD,OAAOgC,GAAuBb,EAAYnB,EAASzZ,cACrD,CCNO,MAAM2b,GAAQre,GAAO,CAC1BwX,MAAO,QACP8F,WAAY,CAACgB,WAAY,eACzBjB,UAAWe,GACXzH,WAAY,CAAC0H,MAAO,KAAME,WAAY,QCJ3BC,GAAOxe,GAAO,CACzB,SAAAqd,CAAUte,EAAG9Q,GACX,MAAgB,SAATA,EAAkBA,EAAO,QAAUA,EAAKlE,MAAM,GAAG2Y,aAC1D,EACAiU,WAAY,CACV8H,qBAAsB,KACtBC,WAAYjC,GACZkC,iBAAkB,KAClBC,SAAUnC,GACVoC,YAAapC,GACbqC,aAAcnC,GACdoC,aAAcpC,GACdqC,YAAarC,GACbsC,aAAcpC,GACdqC,YAAa,KACbpI,gBAAiB+F,GACjBsC,YAAa,KACbC,aAAc3C,GACd4C,eAAgBxC,GAChByC,iBAAkB,KAClBC,aAAc9C,GACd+C,WAAY3C,GACZ4C,YAAahD,GACbiD,aAAc,KACdC,WAAYlD,GACZmD,YAAa,KACbC,iBAAkB,KAClBjE,UAAW,KACXkE,eAAgBjD,GAChBkD,UAAWpD,GACXqD,SAAU,KACVC,UAAWxD,GACXyD,cAAezD,GACf0D,oBAAqB1D,GACrB2D,gBAAiB,KACjBC,SAAUxD,GACVyD,gBAAiB,KACjBC,aAAc5D,GACd6D,YAAa/D,GACbgE,aAAchE,GACdiE,aAAc,KACdC,aAAclE,GACdmE,oBAAqB/D,GACrBgE,aAAclE,GACdmE,aAAcnE,GACdoE,YAAapE,GACbqE,aAAcvE,GACdwE,YAAatE,GACbuE,SAAU,KACVC,aAAcxE,GACdyE,aAAczE,GACd0E,aAAc1E,GACd2E,cAAe,KACfC,KAAM,QC7CG,GAAOvhB,GAAO,CACzBwX,MAAO,OACP8F,WAAY,CACVkE,cAAe,iBACfC,UAAW,QACXC,QAAS,MACTC,UAAW,cAEbtE,UAAWe,GACXrB,gBAAiB,CAAC,UAAW,WAAY,QAAS,YAClDpG,WAAY,CAEViL,KAAM,KACNC,OAAQjF,GACRkF,cAAejF,GACfkF,UAAWlF,GACXmF,OAAQ,KACRC,MAAO,KACPC,gBAAiB,GACjBC,oBAAqB,GACrBC,eAAgB,GAChBtuB,IAAK,KACLuuB,GAAI,KACJC,MAAO,GACPC,eAAgB,KAChBC,aAAc3F,GACd4F,UAAW,GACXC,SAAU,GACVC,QAAS,GACTC,QAAS,KACTjP,QAAS,GACTkP,KAAM,KACN5K,UAAW4E,GACXiG,KAAMnG,GACNoG,QAAS,KACTrsB,QAAS,KACTssB,gBAAiBvG,GACjBwG,SAAU,GACVC,aAAcrG,GACdsG,OAAQxG,GAASC,GACjBwG,YAAa,KACbx1B,KAAM,KACNy1B,SAAU,KACVC,SAAU,KACVC,QAAS,GACTC,MAAO,GACPC,IAAK,KACLC,QAAS,KACT7K,SAAU,GACV8K,SAAUjH,GACVkH,UAAWnH,GACXoH,QAAS,KACTC,aAAc,KACdC,KAAM,KACNC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,eAAgB,GAChBC,WAAY,KACZC,QAASxH,GACTyH,OAAQ3H,GACR4H,OAAQ,GACRC,KAAM7H,GACN5vB,KAAM,KACN03B,SAAU,KACVC,QAAS7H,GACT8H,UAAW9H,GACXxG,GAAI,KACJuO,WAAY,KACZC,YAAa,KACbC,UAAW,KACXC,UAAW,KACXxP,GAAI,KACJyP,MAAO,GACPC,OAAQ,KACRC,SAAUrI,GACVsI,QAAStI,GACTuI,UAAW,GACXC,SAAUxI,GACVvc,KAAM,KACNoI,MAAO,KACPwK,KAAM,KACNoS,SAAU,KACVrxB,KAAM,KACNsxB,QAAS,KACTC,KAAM,GACNC,IAAK9I,GACL+I,SAAU,KACVvvB,IAAK,KACLwvB,UAAWhJ,GACXnU,MAAO,KACPod,OAAQ,KACRC,IAAK,KACLC,UAAWnJ,GACXoJ,SAAU,GACVC,MAAO,GACPr+B,KAAM,KACNs+B,MAAO,KACPC,SAAU,GACVC,WAAY,GACZC,QAAS,KACTC,aAAc,KACdC,WAAY,KACZC,cAAe,KACfC,cAAe,KACfC,eAAgB,KAChBC,OAAQ,KACRC,SAAU,KACVC,UAAW,KACXC,iBAAkB,KAClBC,SAAU,KACVC,QAAS,KACTC,QAAS,KACTC,cAAe,KACfC,cAAe,KACfC,kBAAmB,KACnBC,OAAQ,KACRC,YAAa,KACbC,MAAO,KACPC,WAAY,KACZC,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,OAAQ,KACRC,iBAAkB,KAClBC,UAAW,KACXC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,WAAY,KACZC,aAAc,KACdC,QAAS,KACTC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,QAAS,KACTC,iBAAkB,KAClBC,OAAQ,KACRC,aAAc,KACdC,iBAAkB,KAClBC,UAAW,KACXC,YAAa,KACbC,UAAW,KACXC,eAAgB,KAChBC,YAAa,KACbC,aAAc,KACdC,aAAc,KACdC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,OAAQ,KACRC,UAAW,KACXC,WAAY,KACZC,WAAY,KACZC,aAAc,KACdC,mBAAoB,KACpBC,QAAS,KACTC,SAAU,KACVC,SAAU,KACVC,YAAa,KACbC,0BAA2B,KAC3BC,SAAU,KACVC,UAAW,KACXC,SAAU,KACVC,aAAc,KACdC,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,UAAW,KACXC,aAAc,KACdC,SAAU,KACVC,qBAAsB,KACtBC,SAAU,KACVC,eAAgB,KAChBC,UAAW,KACXC,QAAS,KACTvqB,KAAM,GACNwqB,QAAShP,GACTiP,QAAS,KACTC,KAAMhP,GACNiP,YAAa,KACbC,YAAa,GACbC,OAAQ,KACRC,QAAS,KACTC,SAAU,GACVC,eAAgB,KAChBC,IAAKvP,GACLwP,SAAU,GACVC,SAAU,GACVrT,KAAM0D,GACN4P,QAAS5P,GACT6P,QAAS3P,GACT4P,MAAO,KACPC,OAAQ,GACRC,SAAU,GACVC,SAAU,GACVC,MAAO,KACPx2B,KAAMsmB,GACNmQ,MAAO,KACPC,KAAM,KACNC,KAAMrQ,GACNsQ,WAAYxQ,GACZp0B,IAAK,KACL6kC,OAAQ,KACRC,QAAS,KACTC,OAAQ,KACRhkC,MAAOuzB,GACPnH,KAAM,KACN6X,MAAO,KACPC,SAAU3Q,GACVl1B,OAAQ,KACR0rB,MAAO,KACPoa,UAAW,KACXj6B,KAAM,KACNk6B,cAAe,GACfC,OAAQ,KACR3lC,MAAO20B,GACPiR,MAAO/Q,GACPvsB,KAAM,KAINopB,MAAO,KACPmU,MAAO,KACPC,QAAS/Q,GACTgR,KAAM,KACNC,WAAY,KACZC,QAAS,KACTC,OAAQrR,GACRsR,YAAa,KACbC,aAAcvR,GACdwR,YAAa,KACbC,YAAa,KACb5mB,KAAM,KACN6mB,QAAS,KACTC,QAAS,KACTC,MAAO,KACP7iC,KAAM,KACN8iC,SAAU,KACVC,SAAU,KACVC,MAAO,KACPC,QAAS,GACTC,QAAS,GACTv0B,MAAO,KACPw0B,KAAM,KACNC,MAAO,KACPC,YAAa,KACbC,OAAQrS,GACRsS,WAAYtS,GACZtP,KAAM,KACN6hB,SAAU,KACVC,OAAQ,KACRC,aAAczS,GACd0S,YAAa1S,GACb2S,SAAU,GACVC,OAAQ,GACRC,QAAS,GACTC,OAAQ,GACRC,OAAQ,KACRC,QAAS,KACTC,OAAQ,KACRC,IAAK,KACLC,YAAanT,GACboT,MAAO,KACPC,OAAQ,KACRC,UAAWxT,GACXyT,QAAS,KACTC,QAAS,KACT1zB,KAAM,KACN2zB,UAAWzT,GACX0T,UAAW,KACXC,QAAS,KACTC,OAAQ,KACRC,MAAO,KACPC,OAAQ9T,GAGR+T,kBAAmB,KACnBC,YAAa,KACbC,SAAU,KACVC,wBAAyB,GACzBC,sBAAuB,GACvBv6B,OAAQ,KACR4lB,SAAU,KACVzD,QAASiE,GACToU,SAAU,KACVC,aAAc,QC1SLC,GAAMjxB,GAAO,CACxBwX,MAAO,MACP8F,WAAY,CACV4T,aAAc,gBACdC,kBAAmB,qBACnBC,WAAY,cACZC,cAAe,iBACfC,UAAW,aACXrZ,UAAW,QACXsZ,SAAU,YACVC,SAAU,YACVC,mBAAoB,sBACpBC,0BAA2B,8BAC3BC,aAAc,gBACdC,eAAgB,kBAChBxO,YAAa,cACbyO,SAAU,WACVC,iBAAkB,oBAClBC,iBAAkB,oBAClBC,YAAa,eACbC,SAAU,YACVC,WAAY,cACZC,aAAc,gBACdC,WAAY,cACZC,SAAU,YACVC,eAAgB,mBAChBC,YAAa,eACbC,UAAW,aACXC,YAAa,eACbC,WAAY,cACZC,UAAW,aACXC,2BAA4B,+BAC5BC,yBAA0B,6BAC1BpO,SAAU,WACVqO,UAAW,cACXC,aAAc,iBACdC,aAAc,iBACdC,eAAgB,kBAChBC,cAAe,iBACfC,cAAe,iBACfC,UAAW,aACXC,UAAW,aACXC,YAAa,eACbC,QAAS,WACTC,YAAa,gBACbC,aAAc,iBACdC,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,SAAU,YACVC,MAAO,SACPC,UAAW,cACXC,WAAY,eACZ5N,QAAS,UACT6N,WAAY,aACZ5N,aAAc,eACdG,cAAe,gBACf0N,QAAS,UACTvN,SAAU,WACVC,UAAW,YACXC,iBAAkB,mBAClBC,SAAU,WACVC,QAAS,UACTC,QAAS,UACTI,OAAQ,SACRC,YAAa,cACbC,MAAO,QACPC,WAAY,aACZC,OAAQ,SACRC,UAAW,YACXC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,OAAQ,SACRC,iBAAkB,mBAClBC,UAAW,YACXkM,MAAO,QACPjM,QAAS,UACTC,QAAS,UACTC,QAAS,UACTgM,UAAW,YACXC,WAAY,aACZ/L,aAAc,eACdC,QAAS,UACTC,UAAW,YACXC,UAAW,YACXC,WAAY,aACZC,QAAS,UACTE,OAAQ,SACRC,aAAc,eACdC,iBAAkB,mBAClBE,YAAa,cACbC,UAAW,YACXE,YAAa,cACbC,aAAc,eACdC,aAAc,eACdC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,UAAW,YACX4K,aAAc,eACd3K,UAAW,YACXC,SAAU,WACVC,WAAY,aACZC,WAAY,aACZC,QAAS,UACTC,QAAS,UACTC,OAAQ,SACRC,UAAW,YACXC,WAAY,aACZC,WAAY,aACZC,aAAc,eACdkK,SAAU,WACVhK,QAAS,UACTC,SAAU,WACVC,SAAU,WACVG,SAAU,WACVC,UAAW,YACXC,SAAU,WACV0J,OAAQ,SACRxJ,UAAW,YACXC,UAAW,YACXC,SAAU,WACVC,UAAW,YACXC,aAAc,eACdC,SAAU,WACVE,SAAU,WACVC,eAAgB,iBAChBC,UAAW,YACXgJ,OAAQ,SACRC,iBAAkB,oBAClBC,kBAAmB,qBACnBC,WAAY,cACZC,QAAS,WACTC,cAAe,iBACf3I,eAAgB,iBAChB4I,gBAAiB,mBACjBC,eAAgB,kBAChBC,UAAW,aACXC,YAAa,eACbC,sBAAuB,yBACvBC,uBAAwB,0BACxBC,gBAAiB,mBACjBC,iBAAkB,oBAClBC,cAAe,iBACfC,eAAgB,kBAChBC,iBAAkB,oBAClBC,cAAe,iBACfC,YAAa,eACbrI,SAAU,WACVsI,WAAY,cACZC,eAAgB,kBAChBC,cAAe,iBACfC,OAAQ,SACRC,kBAAmB,qBACnBC,mBAAoB,sBACpBC,YAAa,eACbC,aAAc,gBACdC,WAAY,eACZC,YAAa,eACbC,SAAU,YACVC,aAAc,gBACdC,cAAe,iBACfC,aAAc,gBACdC,SAAU,aACVC,YAAa,gBACbC,YAAa,gBACbC,YAAa,eACbC,YAAa,eACbC,QAAS,WAETC,cAAe,gBACfC,cAAe,iBAEjB5Z,UAAWc,GACXxH,WAAY,CACVugB,MAAOpa,GACPoU,aAAcvU,GACdwa,WAAY,KACZC,SAAU,KACVjG,kBAAmB,KACnBkG,WAAY1a,GACZ2a,UAAW3a,GACXyU,WAAY,KACZmG,OAAQ5a,GACR6a,cAAe,KACfC,cAAe,KACfC,QAAS/a,GACTgb,UAAW,KACXtG,cAAe,KACfuG,cAAe,KACfC,YAAa,KACbC,KAAM,KACNz1B,MAAO,KACP01B,KAAMpb,GACNqb,GAAI,KACJC,SAAU,KACV3G,UAAW3U,GACX1E,UAAW4E,GACXqb,KAAM,KACN3G,SAAU,KACV4G,cAAe,KACf3G,SAAU,KACV9C,MAAO,KACP+C,mBAAoB,KACpBC,0BAA2B,KAC3BC,aAAc,KACdC,eAAgB,KAChBl7B,QAAS,KACT0hC,kBAAmB,KACnBC,iBAAkB,KAClBjV,YAAa,KACbkV,OAAQ,KACRC,GAAI,KACJC,GAAI,KACJlkB,EAAG,KACHud,SAAU,KACV4G,cAAe,KACfC,QAAS/b,GACTgc,gBAAiBhc,GACjBic,UAAW,KACXC,QAAS,KACTC,IAAK,KACLC,QAASpc,GACTmV,iBAAkB,KAClBnO,SAAU,GACVqV,GAAI,KACJC,GAAI,KACJC,SAAU,KACVC,SAAU,KACVC,UAAWzc,GACXoV,iBAAkB,KAClB1oC,IAAK,KACLgR,MAAO,KACPg/B,SAAU1c,GACV2c,0BAA2B,KAC3BC,KAAM,KACNvH,YAAarV,GACbsV,SAAU,KACVuH,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbxH,WAAY,KACZC,aAAc,KACdwH,UAAW,KACXC,eAAgB,KAChBxH,WAAY,KACZC,SAAU,KACVC,eAAgB,KAChBC,YAAa,KACbC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZmH,OAAQ,KACRC,GAAI,KACJzlC,KAAM,KACN0lC,GAAI,KACJC,GAAI,KACJC,GAAIrd,GACJsd,GAAItd,GACJ+V,UAAW/V,GACXgW,2BAA4B,KAC5BC,yBAA0B,KAC1BsH,SAAU,KACVC,kBAAmB,KACnBC,cAAe,KACf9nB,QAAS,KACT+nB,QAAS3d,GACT4d,kBAAmB,KACnBC,WAAY,KACZlW,OAAQ,KACRv3B,KAAM,KACN03B,SAAU,KACVqO,UAAWnW,GACXoW,aAAcpW,GACdqW,aAAcrW,GACdtG,GAAI,KACJokB,YAAa9d,GACbsW,eAAgB,KAChByH,kBAAmB,KACnBC,GAAI,KACJC,IAAK,KACLC,UAAWle,GACXme,EAAGne,GACHoe,GAAIpe,GACJqe,GAAIre,GACJse,GAAIte,GACJue,GAAIve,GACJwe,aAAcre,GACdse,iBAAkB,KAClBC,UAAW,KACXC,WAAY,KACZC,SAAU,KACVC,QAAS,KACTtoB,KAAM,KACNuoB,aAAc,KACdvI,cAAe,KACfC,cAAe,KACfuI,kBAAmB/e,GACnBgf,MAAO,KACPvI,UAAW,KACXC,UAAW,KACXC,YAAa,KACbsI,aAAc,KACdC,YAAa,KACbC,YAAa,KACb3e,KAAM,KACN4e,iBAAkB,KAClBC,UAAW,KACXC,aAAc,KACd9lC,IAAK,KACLqS,MAAO,KACP0zB,uBAAwB,KACxBC,sBAAuB,KACvBC,UAAWzf,GACX0f,UAAW,KACXzW,OAAQ,KACRC,IAAK,KACLyW,KAAM,KACN30C,KAAM,KACN4rC,QAAS,KACTC,YAAa,KACbC,aAAc,KACdC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,SAAU,KACVC,MAAO,KACPC,UAAW,KACXC,WAAY,KACZuI,WAAY,KACZC,SAAU,KACVxjC,OAAQ,KACRotB,QAAS,KACT6N,WAAY,KACZ5N,aAAc,KACdG,cAAe,KACf0N,QAAS,KACTvN,SAAU,KACVC,UAAW,KACXC,iBAAkB,KAClBC,SAAU,KACVC,QAAS,KACTC,QAAS,KACTI,OAAQ,KACRC,YAAa,KACbC,MAAO,KACPC,WAAY,KACZC,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,OAAQ,KACRC,iBAAkB,KAClBC,UAAW,KACXkM,MAAO,KACPjM,QAAS,KACTC,QAAS,KACTC,QAAS,KACTgM,UAAW,KACXC,WAAY,KACZ/L,aAAc,KACdC,QAAS,KACTC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,QAAS,KACTE,OAAQ,KACRC,aAAc,KACdC,iBAAkB,KAClBE,YAAa,KACbC,UAAW,KACXE,YAAa,KACbC,aAAc,KACdC,aAAc,KACdC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,UAAW,KACX4K,aAAc,KACd3K,UAAW,KACXC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,OAAQ,KACRC,UAAW,KACXC,WAAY,KACZC,WAAY,KACZC,aAAc,KACdkK,SAAU,KACVhK,QAAS,KACTC,SAAU,KACVC,SAAU,KACVG,SAAU,KACVC,UAAW,KACXC,SAAU,KACV0J,OAAQ,KACRxJ,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,UAAW,KACXC,aAAc,KACdC,SAAU,KACVE,SAAU,KACVC,eAAgB,KAChBC,UAAW,KACXgJ,OAAQ,KACRgI,QAAS,KACTC,SAAU,KACVjvC,MAAO,KACPkvC,OAAQ,KACRC,YAAa,KACblzC,OAAQ,KACRmzC,SAAU,KACVC,QAAS,KACTpI,iBAAkB/X,GAClBgY,kBAAmBhY,GACnBiY,WAAY,KACZC,QAAS,KACTlqC,KAAM,KACNoyC,WAAYpgB,GACZqgB,oBAAqB,KACrBC,iBAAkB,KAClBC,aAAc,KACdC,MAAO,KACPtR,KAAMhP,GACNugB,MAAO,KACPpG,cAAe,KACflC,cAAe,KACfuI,OAAQ,KACRC,UAAW3gB,GACX4gB,UAAW5gB,GACX6gB,UAAW7gB,GACX8gB,cAAe,KACfC,oBAAqB,KACrBC,eAAgB,KAChBC,UAAW,KACXzhB,SAAUW,GACV+gB,EAAG,KACHC,OAAQ,KACR3R,eAAgB,KAChB4R,KAAM,KACNC,KAAM,KACN5R,IAAKtP,GACL+S,IAAK/S,GACLiY,gBAAiB,KACjBkJ,YAAa,KACbC,UAAW,KACXC,mBAAoBrhB,GACpBshB,iBAAkBthB,GAClBuhB,cAAevhB,GACfwhB,gBAAiBxhB,GACjBtL,SAAU,KACV+sB,QAAS,KACTtyC,OAAQ,KACRuyC,OAAQ,KACRC,GAAI,KACJC,GAAI,KACJC,MAAO,KACPC,KAAM,KACN5J,eAAgB,KAChB6J,KAAM,KACNC,MAAO,KACPC,aAAc,KACdC,iBAAkBriB,GAClBsiB,iBAAkBtiB,GAClBuiB,aAAc,KACdC,QAAS,KACTC,YAAa,KACbC,aAAc,KACdC,MAAO,KACPC,MAAO,KACPC,YAAa,KACbvK,UAAW,KACXC,YAAa,KACbC,sBAAuBxY,GACvByY,uBAAwBzY,GACxBrgB,OAAQ,KACRmjC,OAAQ,KACRpK,gBAAiBvY,GACjBwY,iBAAkB,KAClBC,cAAe,KACfC,eAAgB,KAChBC,iBAAkB9Y,GAClB+Y,cAAe/Y,GACfgZ,YAAa,KACbtI,MAAO,KACPqS,aAAc/iB,GACdgjB,aAAc,KACdC,oBAAqB,KACrBC,WAAY,KACZC,cAAe,KACfC,qBAAsB,KACtBC,eAAgBljB,GAChBwQ,SAAU3Q,GACVsjB,YAAa,KACbx4C,OAAQ,KACRy4C,QAASvjB,GACTwjB,QAASxjB,GACTiZ,WAAY,KACZC,eAAgB,KAChBC,cAAe,KACfsK,WAAY,KACZnJ,cAAe,KACf9jB,MAAO,KACPktB,kBAAmB,KACnB/sC,KAAM,KACNyiC,OAAQjZ,GACR5B,GAAI,KACJmC,UAAW,KACXijB,GAAI,KACJC,GAAI,KACJvK,kBAAmBrZ,GACnBsZ,mBAAoBtZ,GACpB6jB,QAAS,KACTtK,YAAa,KACbC,aAAc,KACdC,WAAYzZ,GACZvtB,OAAQ,KACRinC,YAAa1Z,GACb6Z,cAAe7Z,GACf8Z,aAAc,KACdH,SAAU3Z,GACV4Z,aAAc5Z,GACd2T,QAAS,KACToG,SAAU/Z,GACVga,YAAaha,GACbia,YAAaja,GACb8jB,QAAS,KACTC,WAAY,KACZC,WAAY,KACZjT,MAAO,KACPkT,OAAQ,KACR/J,YAAa,KACbC,YAAa,KACb+J,EAAG,KACHC,GAAI,KACJC,GAAI,KACJC,iBAAkB,KAClBjK,QAASpa,GACTskB,EAAG,KACHC,GAAI,KACJC,GAAI,KACJC,iBAAkB,KAClBC,EAAG,KACHC,WAAY,QCliBH,GAAOjlB,GAAM,CAAC0B,GAAKR,GAAOc,GAAOG,GAAM,IAAW,QAClD,GAAMnC,GAAM,CAAC0B,GAAKR,GAAOc,GAAOG,GAAMyS,IAAU,OCoJhD,GAOX,SAKYn7B,GACR,GAAIA,QACF,OAAO,GAGT,GAAoB,iBAATA,EACT,OA8ER,SAAqB4C,GACnB,OAAO,GAAYpF,GAKnB,SAASA,EAAKf,GACZ,OAAOA,GAAQA,EAAKe,OAASoF,CAC/B,CACF,CAvFe,CAAY5C,GAGrB,GAAoB,iBAATA,EACT,OAAO9O,MAAMF,QAAQgP,GAe7B,SAAoBif,GAElB,MAAMC,EAAS,GACf,IAAIhsB,GAAS,EAEb,OAASA,EAAQ+rB,EAAMpsB,QACrBqsB,EAAOhsB,GAAS,GAAQ+rB,EAAM/rB,IAGhC,OAAO,GAAYisB,GAOnB,SAASA,KAAOnlB,GACd,IAAI9G,GAAS,EAEb,OAASA,EAAQgsB,EAAOrsB,QACtB,GAAIqsB,EAAOhsB,GAAO/B,KAAK+C,QAAS8F,GAAa,OAAO,EAGtD,OAAO,CACT,CACF,CAxCqC,CAAWgG,GAgDhD,SAAsB4C,GACpB,OAAO,GAAYlE,GAMnB,SAASA,EAAIjC,GAEX,IAAInL,EAEJ,IAAKA,KAAOsR,EAEV,GAAInG,EAAKnL,KAASsR,EAAMtR,GAAM,OAAO,EAGvC,OAAO,CACT,CACF,CAlEwD,CAAa0O,GAG/D,GAAoB,mBAATA,EACT,OAAO,GAAYA,GAGrB,MAAM,IAAIvM,MAAM,+CAEpB,EAkFF,SAAS,GAAYmP,GACnB,OAQA,SAAmBnG,KAASzC,GAC1B,OAAO0D,QACLjB,GACkB,iBAATA,GACP,SAAUA,GAEViB,QAAQkF,EAAMzR,KAAK+C,KAAMuI,KAASzC,IAExC,CACF,CAEA,SAAS,KACP,OAAO,CACT,CC5NO,MAyCM,GAOX,SAQYgD,EAAMgD,EAAMuf,EAASC,GACT,mBAATxf,GAA0C,mBAAZuf,IACvCC,EAAUD,EAEVA,EAAUvf,EACVA,EAAO,MAGT,MAAMyf,EAAK,GAAQzf,GACb0f,EAAOF,GAAW,EAAI,GAS5B,SAASG,EAAQljB,EAAMvJ,EAAO0sB,GAG5B,MAAM5tB,EAAQyK,GAAwB,iBAATA,EAAoBA,EAAO,CAAC,EAEzD,GAA0B,iBAAfzK,EAAMwL,KAAmB,CAClC,MAAM3L,EAEqB,iBAAlBG,EAAM2c,QACT3c,EAAM2c,QAEc,iBAAf3c,EAAMH,KACXG,EAAMH,UACNkC,EAENvD,OAAOK,eAAegvB,EAAO,OAAQ,CACnC7tB,MACE,SAAiByK,EAAKe,MAAQ3L,EAAO,IAAMA,EAAO,IAAM,IAAO,KAErE,CAEA,OAAOguB,EAEP,SAASA,IAEP,IAEIC,EAEA5c,EAEA6c,EANA5pB,EAAS,GAQb,KAAK6J,GAAQyf,EAAGhjB,EAAMvJ,EAAO0sB,EAAQA,EAAQ/sB,OAAS,IAAM,SAC1DsD,EA0CZ,SAAkBnE,GAChB,GAAId,MAAMF,QAAQgB,GAChB,OAAOA,EAGT,GAAqB,iBAAVA,EACT,MAAO,CA5Ja,KA4JFA,GAGpB,MAAO,CAACA,EACV,CApDqB,CAASutB,EAAQ9iB,EAAMmjB,IAvGxB,QAyGJzpB,EAAO,IACT,OAAOA,EAKX,GAAIsG,EAAKwB,UA1GC,SA0GW9H,EAAO,GAO1B,IALA+M,GAAUsc,EAAU/iB,EAAKwB,SAASpL,QAAU,GAAK6sB,EAEjDK,EAAeH,EAAQK,OAAOxjB,GAGvByG,GAAU,GAAKA,EAASzG,EAAKwB,SAASpL,QAAQ,CAInD,GAFAitB,EAAYH,EAAQljB,EAAKwB,SAASiF,GAASA,EAAQ6c,EAAvCJ,GAxHN,QA0HFG,EAAU,GACZ,OAAOA,EAGT5c,EAC0B,iBAAjB4c,EAAU,GAAkBA,EAAU,GAAK5c,EAASwc,CAC/D,CAGF,OAAOvpB,CACT,CACF,CAvEAwpB,CAAQ3iB,OAAMjJ,EAAW,GAAzB4rB,EAyEJ,EC9EK,MAAM,GAOX,SAQY3iB,EAAMgD,EAAMuf,EAASC,GACT,mBAATxf,GAA0C,mBAAZuf,IACvCC,EAAUD,EACVA,EAAUvf,EACVA,EAAO,MAGT,GAAahD,EAAMgD,GAMnB,SAAkBvD,EAAMmjB,GACtB,MAAMM,EAASN,EAAQA,EAAQ/sB,OAAS,GACxC,OAAO0sB,EACL9iB,EACAyjB,EAASA,EAAOjiB,SAASjK,QAAQyI,GAAQ,KACzCyjB,EAEJ,GAbmCV,EAevC,EC5Ja,SAASisB,GAAa75C,GACnC,GAAIA,EAAQ85C,iBAAmB95C,EAAQ+5C,mBACrC,MAAM,IAAI32C,UACR,4EAIJ,GACEpD,EAAQ85C,iBACR95C,EAAQ+5C,oBACR/5C,EAAQg6C,aAER,OAAQ5uC,IACN,GAAMA,EAAM,WAAW,CAACP,EAAMvJ,EAAO24C,KACnC,MAAM3rB,EAAqC,EAE3C,IAAI9hB,EAYJ,GAVIxM,EAAQ85C,gBACVttC,GAAUxM,EAAQ85C,gBAAgBtzC,SAASqE,EAAKkS,SACvC/c,EAAQ+5C,qBACjBvtC,EAASxM,EAAQ+5C,mBAAmBvzC,SAASqE,EAAKkS,WAG/CvQ,GAAUxM,EAAQg6C,cAAiC,iBAAV14C,IAC5CkL,GAAUxM,EAAQg6C,aAAanvC,EAAMvJ,EAAOgtB,IAG1C9hB,GAA2B,iBAAVlL,EAOnB,OANItB,EAAQk6C,kBAAoBrvC,EAAKwB,SACnCiiB,EAAOjiB,SAASC,OAAOhL,EAAO,KAAMuJ,EAAKwB,UAEzCiiB,EAAOjiB,SAASC,OAAOhL,EAAO,GAGzBA,CAGFa,GACR,CAGP,iBCrDO,SAASg4C,GAAWC,GAEzB,MAAMh6C,EAEJg6C,GAA0B,iBAAVA,GAAqC,SAAfA,EAAMxuC,KAExCwuC,EAAMh6C,OAAS,GACfg6C,EAIN,MAAwB,iBAAVh6C,GAA4D,KAAtCA,EAAM2a,QAAQ,eAAgB,GACpE,CChBA,MAAMs/B,GAAQ,kBACRC,GAAO,UACPC,GAAM,SAOL,SAASC,GAAKC,EAAQr6C,GAC3B,MAAMs0B,EAAS,GAAUt0B,GACzB,IAAImG,EAAOnG,EACPs6C,EAAO9lB,GAEX,GAAIF,KAAU+lB,EAAO/lB,OACnB,OAAO+lB,EAAOhmB,SAASgmB,EAAO/lB,OAAOA,IAGvC,GAAIA,EAAOzzB,OAAS,GAA4B,SAAvByzB,EAAOryB,MAAM,EAAG,IAAiBg4C,GAAMjsC,KAAKhO,GAAQ,CAE3E,GAAwB,MAApBA,EAAMu6C,OAAO,GAAY,CAE3B,MAAMC,EAAOx6C,EAAMiC,MAAM,GAAG0Y,QAAQu/B,GAAMO,IAC1Ct0C,EAAO,OAASq0C,EAAKD,OAAO,GAAG1/B,cAAgB2/B,EAAKv4C,MAAM,EAC5D,KAAO,CAEL,MAAMu4C,EAAOx6C,EAAMiC,MAAM,GAEzB,IAAKi4C,GAAKlsC,KAAKwsC,GAAO,CACpB,IAAIE,EAASF,EAAK7/B,QAAQw/B,GAAKQ,IAEN,MAArBD,EAAOH,OAAO,KAChBG,EAAS,IAAMA,GAGjB16C,EAAQ,OAAS06C,CACnB,CACF,CAEAJ,EAAOllB,EACT,CAEA,OAAO,IAAIklB,EAAKn0C,EAAMnG,EACxB,CAMA,SAAS26C,GAAM71B,GACb,MAAO,IAAMA,EAAGlK,aAClB,CAMA,SAAS6/B,GAAU31B,GACjB,OAAOA,EAAGy1B,OAAO,GAAG1/B,aACtB,CC1DO,MAAM+/B,GAAc,CACzBpU,QAAS,UACTuD,SAAU,WACV5M,OAAQ,SACRoQ,gBAAiB,kBACjBC,iBAAkB,mBAClBC,cAAe,gBACfC,eAAgB,iBAChBC,iBAAkB,mBAClBM,OAAQ,SACRvY,aAAc,eACdC,aAAc,eACdC,UAAW,YACXC,UAAW,YACXC,UAAW,YACXC,WAAY,aACZC,UAAW,YACXS,WAAY,cClBP,SAAS,GAAMz2B,GACpB,MAAM66C,EAAQrwC,OAAOxK,GAAS,IAAI86C,OAClC,OAAOD,EAAQA,EAAME,MAAM,iBAAmB,EAChD,CAUO,SAASn2C,GAAU0C,GACxB,OAAOA,EAAOzD,KAAK,KAAKi3C,MAC1B,CCDO,SAAS,GAAM96C,GAEpB,MAAMg7C,EAAS,GACTH,EAAQrwC,OAAOxK,GAAS,IAC9B,IAAIkB,EAAQ25C,EAAM74C,QAAQ,KACtBV,EAAQ,EAERC,GAAM,EAEV,MAAQA,GAAK,EACI,IAAXL,IACFA,EAAQ25C,EAAMh6C,OACdU,GAAM,GAGR,MAAM6N,EAAQyrC,EAAM54C,MAAMX,EAAOJ,GAAO45C,QAEpC1rC,GAAU7N,GACZy5C,EAAO10C,KAAK8I,GAGd9N,EAAQJ,EAAQ,EAChBA,EAAQ25C,EAAM74C,QAAQ,IAAKV,EAC7B,CAEA,OAAO05C,CACT,CAYO,SAAS,GAAU1zC,EAAQ1H,GAChC,MAAM8J,EAAW9J,GAAW,CAAC,EAK7B,OAF4C,KAA9B0H,EAAOA,EAAOzG,OAAS,GAAY,IAAIyG,EAAQ,IAAMA,GAGhEzD,MACE6F,EAASuxC,SAAW,IAAM,IACzB,MACsB,IAArBvxC,EAASwxC,QAAoB,GAAK,MAEtCJ,MACL,KCvEA,YCFA,MAAMK,GAAY,CAAC,OAAQ,QAAS,SAAU,OAMvC,SAASC,GAAeC,GAC7B,MAAM14C,GAAO04C,GAAO,IAAIP,OAClBQ,EAAQ34C,EAAI43C,OAAO,GAEzB,GAAc,MAAVe,GAA2B,MAAVA,EACnB,OAAO34C,EAGT,MAAM44C,EAAQ54C,EAAIX,QAAQ,KAC1B,IAAe,IAAXu5C,EACF,OAAO54C,EAGT,IAAIzB,GAAS,EAEb,OAASA,EAAQi6C,GAAUt6C,QAAQ,CACjC,MAAMwE,EAAW81C,GAAUj6C,GAE3B,GACEq6C,IAAUl2C,EAASxE,QACnB8B,EAAIV,MAAM,EAAGoD,EAASxE,QAAQ+Z,gBAAkBvV,EAEhD,OAAO1C,CAEX,CAGA,OADAzB,EAAQyB,EAAIX,QAAQ,MACL,IAAXd,GAAgBq6C,EAAQr6C,EACnByB,GAGTzB,EAAQyB,EAAIX,QAAQ,MACL,IAAXd,GAAgBq6C,EAAQr6C,EACnByB,EAIF,qBACT,CCmEA,MAAM,GAAM,CAAC,EAAEjE,eAIT88C,GAAgB,IAAIC,IAAI,CAAC,QAAS,QAAS,QAAS,QAAS,OAM5D,SAASC,GAAgBzoC,EAASxI,GAEvC,MAAMwB,EAAW,GACjB,IAEI+kB,EAFA2qB,GAAc,EAIlB,OAASA,EAAalxC,EAAKwB,SAASpL,QAClCmwB,EAAQvmB,EAAKwB,SAAS0vC,GAEH,YAAf3qB,EAAMxlB,KACRS,EAAS3F,KAAKs1C,GAAQ3oC,EAAS+d,EAAO2qB,EAAYlxC,IAC1B,SAAfumB,EAAMxlB,KASC,YAAdf,EAAKe,MACJgwC,GAAcK,IAAIpxC,EAAKkS,UACvBo9B,GAAW/oB,IAEZ/kB,EAAS3F,KAAK0qB,EAAMhxB,OAEE,QAAfgxB,EAAMxlB,MAAmByH,EAAQrT,QAAQk8C,UAElD7vC,EAAS3F,KAAK0qB,EAAMhxB,OAIxB,OAAOiM,CACT,CAQA,SAAS2vC,GAAQ3oC,EAASxI,EAAMvJ,EAAOgtB,GACrC,MAAMtuB,EAAUqT,EAAQrT,QAClB21B,OACyBxzB,IAA7BnC,EAAQm8C,iBACJX,GACAx7C,EAAQm8C,iBACRC,EAAe/oC,EAAQonC,OAGvBx6C,EAAO4K,EAAKkS,QAEZkS,EAAa,CAAC,EACpB,IAEIwF,EAFAgmB,EAAS2B,EASb,GAL2B,SAAvBA,EAAatsB,OAA6B,QAAT7vB,IACnCw6C,EAAS,GACTpnC,EAAQonC,OAASA,GAGf5vC,EAAKokB,WACP,IAAKwF,KAAY5pB,EAAKokB,WAChB,GAAI1vB,KAAKsL,EAAKokB,WAAYwF,IAC5B4nB,GAAYptB,EAAYwF,EAAU5pB,EAAKokB,WAAWwF,GAAWphB,GAKtD,OAATpT,GAA0B,OAATA,GACnBoT,EAAQipC,YAGV,MAAMjwC,EAAWyvC,GAAgBzoC,EAASxI,GAE7B,OAAT5K,GAA0B,OAATA,GACnBoT,EAAQipC,YAIVjpC,EAAQonC,OAAS2B,EAIjB,MAAMh7C,EAAWyJ,EAAKzJ,UAAY,CAChCM,MAAO,CAACH,KAAM,KAAMC,OAAQ,KAAM8P,OAAQ,MAC1C3P,IAAK,CAACJ,KAAM,KAAMC,OAAQ,KAAM8P,OAAQ,OAEpCirC,EACJv8C,EAAQw8C,YAAc,GAAIj9C,KAAKS,EAAQw8C,WAAYv8C,GAC/CD,EAAQw8C,WAAWv8C,GACnBA,EACAw8C,EAA6B,iBAAdF,GAA0BA,IAAc,WAE7D,IAAK,sBAA2BA,GAC9B,MAAM,IAAIn5C,UACR,wBAAwBnD,wCAsD5B,GAlDAgvB,EAAWvvB,IAAM4B,EAEJ,MAATrB,GAAgBD,EAAQ08C,aAC1BztB,EAAWlvB,OACqB,mBAAvBC,EAAQ08C,WACX18C,EAAQ08C,WACN9xC,OAAOqkB,EAAW5pB,MAAQ,IAC1BwF,EAAKwB,SACuB,iBAArB4iB,EAAWxD,MAAqBwD,EAAWxD,MAAQ,MAE5DzrB,EAAQ08C,YAGH,MAATz8C,GAAgB01B,IAClB1G,EAAW5pB,KAAOswB,EAChB/qB,OAAOqkB,EAAW5pB,MAAQ,IAC1BwF,EAAKwB,SACuB,iBAArB4iB,EAAWxD,MAAqBwD,EAAWxD,MAAQ,OAK3DgxB,GACQ,SAATx8C,GACgB,YAAhBquB,EAAO1iB,MACY,QAAnB0iB,EAAOvR,UAEPkS,EAAW0tB,QAAS,GAInBF,GACS,OAATx8C,GACU,OAATA,GACS,OAATA,GACS,OAATA,GACS,OAATA,GACS,OAATA,IAEFgvB,EAAW2tB,MAAQhzC,OAAOmb,SAAS9kB,EAAK06C,OAAO,GAAI,KAGxC,QAAT16C,GAAkBD,EAAQ68C,oBAC5B5tB,EAAWtuB,IAAMX,EAAQ68C,kBACvBjyC,OAAOqkB,EAAWtuB,KAAO,IACzBiK,OAAOqkB,EAAW7iB,KAAO,IACG,iBAArB6iB,EAAWxD,MAAqBwD,EAAWxD,MAAQ,QAIzDgxB,GAAkB,OAATx8C,GAAiC,YAAhBquB,EAAO1iB,KAAoB,CACxD,MAAMqvC,EA0DV,SAAyBpwC,GACvB,IAAIvJ,GAAS,EAEb,OAASA,EAAQuJ,EAAKwB,SAASpL,QAAQ,CACrC,MAAMmwB,EAAQvmB,EAAKwB,SAAS/K,GAE5B,GAAmB,YAAf8vB,EAAMxlB,MAAwC,UAAlBwlB,EAAMrU,QACpC,OAAOqU,CAEX,CAEA,OAAO,IACT,CAtEkB0rB,CAAgBjyC,GAC9BokB,EAAWhD,QACTgvB,GAASA,EAAMhsB,WAAanjB,QAAQmvC,EAAMhsB,WAAWhD,SAAW,KAClEgD,EAAW3tB,MAAQy7C,GAAuBzuB,EAAQzjB,GAClDokB,EAAWlD,QAA6B,OAAnBuC,EAAOvR,OAC9B,CA+JF,IAAyBtb,EAnHvB,OA1CKg7C,GAAmB,OAATx8C,GAA0B,OAATA,IAC9BgvB,EAAWlD,QAAmB,OAAT9rB,EACrBgvB,EAAWvD,MAAQrY,EAAQipC,WAGhB,OAATr8C,GAA0B,OAATA,IACfgvB,EAAW6C,QACR7C,EAAW0W,QAAO1W,EAAW0W,MAAQ,CAAC,GAE3C1W,EAAW0W,MAAMqX,UAAY/tB,EAAW6C,aACjC7C,EAAW6C,OAGf2qB,IACHxtB,EAAWguB,SAAoB,OAATh9C,IAIrBw8C,GAAkB,OAATx8C,GAAiC,YAAhBquB,EAAO1iB,OACpCqjB,EAAWguB,SAAWnxC,QAA2B,UAAnBwiB,EAAOvR,UAInC/c,EAAQk9C,YACVjuB,EAAW,kBAsIN,EADgBxtB,EArI0BL,GAuI3CM,MAAMH,KACV,IACAE,EAAIC,MAAMF,OACV,IACAC,EAAIE,IAAIJ,KACR,IACAE,EAAIE,IAAIH,QAEP8E,IAAIsE,QACJ3G,KAAK,MA7IHw4C,GAASz8C,EAAQm9C,eACpBluB,EAAWmuB,eAAiBvyC,EAAKzJ,WAI9Bq7C,GAASz8C,EAAQq9C,sBACpBpuB,EAAW3tB,MAAQy7C,GAAuBzuB,EAAQzjB,GAClDokB,EAAWquB,aAAeP,GAAuBzuB,IAG9CmuB,IACHxtB,EAAWpkB,KAAOA,GAIbwB,EAASpL,OAAS,EACrB,gBAAoBs7C,EAAWttB,EAAY5iB,GAC3C,gBAAoBkwC,EAAWttB,EACrC,CAyBA,SAAS8tB,GAAuBzuB,EAAQzjB,GACtC,IAAIvJ,GAAS,EACTi8C,EAAQ,EAEZ,OAASj8C,EAAQgtB,EAAOjiB,SAASpL,QAC3BqtB,EAAOjiB,SAAS/K,KAAWuJ,GACK,YAAhCyjB,EAAOjiB,SAAS/K,GAAOsK,MAAoB2xC,IAGjD,OAAOA,CACT,CAQA,SAASlB,GAAY9oB,EAAOhtB,EAAMnG,EAAOizB,GACvC,MAAMvsB,EAAO0zC,GAAKnnB,EAAIonB,OAAQl0C,GAC9B,IAAIhC,EAASnE,EAITmE,SAA2CA,GAAWA,IAMtDjF,MAAMF,QAAQmF,KAChBA,EAASuC,EAAKouB,eAAiB,GAAO3wB,GAAU,GAAOA,IAGnC,UAAlBuC,EAAK2tB,UAA0C,iBAAXlwB,IACtCA,EAkBJ,SAAoBnE,GAElB,MAAMmE,EAAS,CAAC,EAEhB,IACE,GAAMnE,EAAOiH,EACf,CAAE,MAEF,CAEA,OAAO9C,EAMP,SAAS8C,EAASpH,EAAMu9C,GACtB,MAAMpK,EAAyB,SAArBnzC,EAAKoC,MAAM,EAAG,GAAgB,MAAMpC,EAAKoC,MAAM,KAAOpC,EAChEsE,EAAO6uC,EAAEr4B,QAAQ,YAAa0iC,KAAkBD,CAClD,CACF,CAtCaE,CAAWn5C,IAGlBuC,EAAKgpB,OAAShpB,EAAK2tB,SACrBlB,EACE,GAAIh0B,KAAKy7C,GAAal0C,EAAK2tB,UACvBumB,GAAYl0C,EAAK2tB,UACjB3tB,EAAK2tB,UACPlwB,EACKuC,EAAK+tB,YACdtB,EAAMzsB,EAAK+tB,WAAatwB,GAE5B,CAgCA,SAASk5C,GAAcpmC,EAAG8N,GACxB,OAAOA,EAAGlK,aACZ,CC5YA,MAAM,GAAM,CAAC,EAAEnc,eACT6+C,GACJ,oEAGIC,GAAa,CACjBvzC,QAAS,CAACmpB,GAAI,gBAAiB7E,GAAI,mCACnCkvB,UAAW,CAACrqB,GAAI,aAAc7E,GAAI,kCAClCmvB,WAAY,CAACnvB,GAAI,wCACjB6D,mBAAoB,CAAC7D,GAAI,wCACzBovB,WAAY,CAACpvB,GAAI,wCACjBjsB,OAAQ,CAAC8wB,GAAI,WAAY7E,GAAI,6BAC7BqvB,UAAW,CACTxqB,GAAI,eACJ7E,GAAI,sDAENsvB,aAAc,CACZzqB,GAAI,kBACJ7E,GAAI,sDAENuvB,gBAAiB,CACf1qB,GAAI,qBACJ7E,GAAI,sDAENwvB,iBAAkB,CAChB3qB,GAAI,sBACJ7E,GAAI,mDAUD,SAASyvB,GAAcp+C,GAC5B,IAAK,MAAMN,KAAOk+C,GAChB,GAAI,GAAIr+C,KAAKq+C,GAAYl+C,IAAQ,GAAIH,KAAKS,EAASN,GAAM,CACvD,MAAM2+C,EAAcT,GAAWl+C,GAC/B4+C,QAAQC,KACN,oCACEF,EAAY7qB,GAAK,SAAS6qB,EAAY7qB,kBAAoB,cACtD9zB,aAAei+C,MAAaU,EAAY1vB,6BAEzCivB,GAAWl+C,EACpB,CAGF,MAAM0J,EAAYP,IACfF,IAAImkB,IACJnkB,IAAI3I,EAAQw+C,eAAiB,IAC7B71C,IAAI,GAAc,IACd3I,EAAQy+C,oBACXjsB,oBAAoB,IAErB7pB,IAAI3I,EAAQ0+C,eAAiB,IAC7B/1C,IAAIkxC,GAAc75C,GAEf4C,EAAO,IAAIoD,EAEe,iBAArBhG,EAAQqM,SACjBzJ,EAAKxC,MAAQJ,EAAQqM,cACSlK,IAArBnC,EAAQqM,UAA+C,OAArBrM,EAAQqM,UACnDiyC,QAAQC,KACN,0EAA0Ev+C,EAAQqM,eAItF,MAAMsyC,EAAWv1C,EAAUiC,QAAQjC,EAAUmB,MAAM3H,GAAOA,GAE1D,GAAsB,SAAlB+7C,EAAS/yC,KACX,MAAM,IAAIxI,UAAU,0BAItB,IAAImB,EAAS,gBACX,WACA,CAAC,EACDu3C,GAAgB,CAAC97C,UAASy6C,OAAQ,GAAM6B,UAAW,GAAIqC,IAOzD,OAJI3+C,EAAQuwB,YACVhsB,EAAS,gBAAoB,MAAO,CAACgsB,UAAWvwB,EAAQuwB,WAAYhsB,IAG/DA,CACT,CAEA65C,GAAcQ,UAAY,CAExBvyC,SAAU,UAEVkkB,UAAW,UAEXypB,aAAc,QACdF,gBAAiB,WAAkB,WACnCC,mBAAoB,WAAkB,WACtCG,iBAAkB,QAElBsE,cAAe,WACb,aAAoB,CAClB,UACA,QACA,WACE,aAAoB,CAClB,QACA,UACA,UACA,QACA,WAGE,cAMVE,cAAe,WACb,aAAoB,CAClB,UACA,QACA,WACE,aAAoB,CAClB,QACA,UACA,UACA,QACA,WAGE,cAOVxB,UAAW,QACXC,aAAc,QACdjB,SAAU,QACVmB,oBAAqB,QACrBlB,iBAAkB,aAAoB,CAAC,QAAgB,UACvDO,WAAY,aAAoB,CAAC,QAAgB,YACjDG,kBAAmB,QACnBL,WAAY,WC1FP,MAyEM,GAOX,SAKYpuC,GACR,GAAIA,QACF,OAAO,GAGT,GAAoB,iBAATA,EACT,OA8ER,SAAqB4C,GACnB,OAAO,GAAYpF,GAKnB,SAASA,EAAKf,GACZ,OAAOA,GAAQA,EAAKe,OAASoF,CAC/B,CACF,CAvFe,CAAY5C,GAGrB,GAAoB,iBAATA,EACT,OAAO9O,MAAMF,QAAQgP,GAe7B,SAAoBif,GAElB,MAAMC,EAAS,GACf,IAAIhsB,GAAS,EAEb,OAASA,EAAQ+rB,EAAMpsB,QACrBqsB,EAAOhsB,GAAS,GAAQ+rB,EAAM/rB,IAGhC,OAAO,GAAYisB,GAOnB,SAASA,KAAOnlB,GACd,IAAI9G,GAAS,EAEb,OAASA,EAAQgsB,EAAOrsB,QACtB,GAAIqsB,EAAOhsB,GAAO/B,KAAK+C,QAAS8F,GAAa,OAAO,EAGtD,OAAO,CACT,CACF,CAxCqC,CAAWgG,GAgDhD,SAAsB4C,GACpB,OAAO,GAAYlE,GAMnB,SAASA,EAAIjC,GAEX,IAAInL,EAEJ,IAAKA,KAAOsR,EAEV,GAAInG,EAAKnL,KAASsR,EAAMtR,GAAM,OAAO,EAGvC,OAAO,CACT,CACF,CAlEwD,CAAa0O,GAG/D,GAAoB,mBAATA,EACT,OAAO,GAAYA,GAGrB,MAAM,IAAIvM,MAAM,+CAEpB,EAkFF,SAAS,GAAYmP,GACnB,OAQA,SAAmBnG,KAASzC,GAC1B,OAAO0D,QACLjB,GACkB,iBAATA,GACP,SAAUA,GAEViB,QAAQkF,EAAMzR,KAAK+C,KAAMuI,KAASzC,IAExC,CACF,CAEA,SAAS,KACP,OAAO,CACT,CC5NO,MAyCM,GAOX,SAQYgD,EAAMgD,EAAMuf,EAASC,GACT,mBAATxf,GAA0C,mBAAZuf,IACvCC,EAAUD,EAEVA,EAAUvf,EACVA,EAAO,MAGT,MAAMyf,EAAK,GAAQzf,GACb0f,EAAOF,GAAW,EAAI,GAS5B,SAASG,EAAQljB,EAAMvJ,EAAO0sB,GAG5B,MAAM5tB,EAAQyK,GAAwB,iBAATA,EAAoBA,EAAO,CAAC,EAEzD,GAA0B,iBAAfzK,EAAMwL,KAAmB,CAClC,MAAM3L,EAEqB,iBAAlBG,EAAM2c,QACT3c,EAAM2c,QAEc,iBAAf3c,EAAMH,KACXG,EAAMH,UACNkC,EAENvD,OAAOK,eAAegvB,EAAO,OAAQ,CACnC7tB,MACE,SAAiByK,EAAKe,MAAQ3L,EAAO,IAAMA,EAAO,IAAM,IAAO,KAErE,CAEA,OAAOguB,EAEP,SAASA,IAEP,IAEIC,EAEA5c,EAEA6c,EANA5pB,EAAS,GAQb,KAAK6J,GAAQyf,EAAGhjB,EAAMvJ,EAAO0sB,EAAQA,EAAQ/sB,OAAS,IAAM,SAC1DsD,EA0CZ,SAAkBnE,GAChB,GAAId,MAAMF,QAAQgB,GAChB,OAAOA,EAGT,GAAqB,iBAAVA,EACT,MAAO,CA5Ja,KA4JFA,GAGpB,MAAO,CAACA,EACV,CApDqB,CAASutB,EAAQ9iB,EAAMmjB,IAvGxB,QAyGJzpB,EAAO,IACT,OAAOA,EAKX,GAAIsG,EAAKwB,UA1GC,SA0GW9H,EAAO,GAO1B,IALA+M,GAAUsc,EAAU/iB,EAAKwB,SAASpL,QAAU,GAAK6sB,EAEjDK,EAAeH,EAAQK,OAAOxjB,GAGvByG,GAAU,GAAKA,EAASzG,EAAKwB,SAASpL,QAAQ,CAInD,GAFAitB,EAAYH,EAAQljB,EAAKwB,SAASiF,GAASA,EAAQ6c,EAAvCJ,GAxHN,QA0HFG,EAAU,GACZ,OAAOA,EAGT5c,EAC0B,iBAAjB4c,EAAU,GAAkBA,EAAU,GAAK5c,EAASwc,CAC/D,CAGF,OAAOvpB,CACT,CACF,CAvEAwpB,CAAQ3iB,OAAMjJ,EAAW,GAAzB4rB,EAyEJ,ECxJF,MAAM,GAAM,CAAC,EAAEjvB,eAqBF+/C,GAOX,SASYzzC,EAAMovC,EAAMz/B,EAAS/a,GAE7B,IAAI8J,EAEA2wC,EAEgB,iBAATD,GAAqBA,aAAgBsE,QAE9CrE,EAAS,CAAC,CAACD,EAAMz/B,IACjBjR,EAAW9J,IAEXy6C,EAASD,EAET1wC,EAAWiR,GAGRjR,IACHA,EAAW,CAAC,GAGd,MAAMi1C,EAAU,GAAQj1C,EAASsoB,QAAU,IACrC4sB,EA+HZ,SAAiBvE,GAEf,MAAMl2C,EAAS,GAEf,GAAsB,iBAAXk2C,EACT,MAAM,IAAIr3C,UAAU,sCAGtB,GAAI9D,MAAMF,QAAQq7C,GAAS,CACzB,IAAIn5C,GAAS,EAEb,OAASA,EAAQm5C,EAAOx5C,QACtBsD,EAAOmC,KAAK,CACVu4C,GAAaxE,EAAOn5C,GAAO,IAC3B49C,GAAWzE,EAAOn5C,GAAO,KAG/B,KAAO,CAEL,IAAI5B,EAEJ,IAAKA,KAAO+6C,EACN,GAAIl7C,KAAKk7C,EAAQ/6C,IACnB6E,EAAOmC,KAAK,CAACu4C,GAAav/C,GAAMw/C,GAAWzE,EAAO/6C,KAGxD,CAEA,OAAO6E,CACT,CA5JoB46C,CAAQ1E,GACtB,IAAI2E,GAAa,EAEjB,OAASA,EAAYJ,EAAM/9C,QACzB,GAAamK,EAAM,OAAQuiB,GAI7B,OAAOviB,EAGP,SAASuiB,EAAQ9iB,EAAMmjB,GACrB,IAEIqxB,EAFA/9C,GAAS,EAIb,OAASA,EAAQ0sB,EAAQ/sB,QAAQ,CAC/B,MAAMqtB,EAASN,EAAQ1sB,GAEvB,GACEy9C,EACEzwB,EAEA+wB,EAAcA,EAAYhzC,SAASjK,QAAQksB,QAAUnsB,EACrDk9C,GAGF,OAGFA,EAAc/wB,CAChB,CAEA,GAAI+wB,EACF,OAcJ,SAAiBx0C,EAAMmjB,GACrB,MAAMM,EAASN,EAAQA,EAAQ/sB,OAAS,GAClCu5C,EAAOwE,EAAMI,GAAW,GACxBrkC,EAAUikC,EAAMI,GAAW,GACjC,IAAI19C,EAAQ,EAEZ,MAAMJ,EAAQgtB,EAAOjiB,SAASjK,QAAQyI,GACtC,IAAIy0C,GAAS,EAET5rB,EAAQ,GAEZ8mB,EAAKjuB,UAAY,EAEjB,IAAIF,EAAQmuB,EAAKhuB,KAAK3hB,EAAKzK,OAE3B,KAAOisB,GAAO,CACZ,MAAMjrB,EAAWirB,EAAM/qB,MAEjBi+C,EAAc,CAClBj+C,MAAO+qB,EAAM/qB,MACb25C,MAAO5uB,EAAM4uB,MAEbz4C,MAAO,IAAIwrB,EAASnjB,IAEtB,IAAIzK,EAAQ2a,KAAWsR,EAAOkzB,GAyB9B,GAvBqB,iBAAVn/C,IACTA,EAAQA,EAAMa,OAAS,EAAI,CAAC2K,KAAM,OAAQxL,cAAS+B,IAIvC,IAAV/B,IACEsB,IAAUN,GACZsyB,EAAMhtB,KAAK,CACTkF,KAAM,OACNxL,MAAOyK,EAAKzK,MAAMiC,MAAMX,EAAON,KAI/B9B,MAAMF,QAAQgB,GAChBszB,EAAMhtB,QAAQtG,GACLA,GACTszB,EAAMhtB,KAAKtG,GAGbsB,EAAQN,EAAWirB,EAAM,GAAGprB,OAC5Bq+C,GAAS,IAGN9E,EAAKgF,OACR,MAGFnzB,EAAQmuB,EAAKhuB,KAAK3hB,EAAKzK,MACzB,CAEIk/C,GACE59C,EAAQmJ,EAAKzK,MAAMa,QACrByyB,EAAMhtB,KAAK,CAACkF,KAAM,OAAQxL,MAAOyK,EAAKzK,MAAMiC,MAAMX,KAGpD4sB,EAAOjiB,SAASC,OAAOhL,EAAO,KAAMoyB,IAEpCA,EAAQ,CAAC7oB,GAGX,OAAOvJ,EAAQoyB,EAAMzyB,MACvB,CAjFW4pB,CAAQhgB,EAAMmjB,EAEzB,CAiFJ,EAiDF,SAASixB,GAAazE,GACpB,MAAuB,iBAATA,EAAoB,IAAIsE,OCrSzB,SAA4BlqC,GAC1C,GAAsB,iBAAXA,EACV,MAAM,IAAIxR,UAAU,qBAKrB,OAAOwR,EACLmG,QAAQ,sBAAuB,QAC/BA,QAAQ,KAAM,QACjB,CD2R+C,CAAOy/B,GAAO,KAAOA,CACpE,CAUA,SAAS0E,GAAWnkC,GAClB,MAA0B,mBAAZA,EAAyBA,EAAU,IAAMA,CACzD,CE9RO,SAAS0kC,GAAer0C,GAC7ByzC,GAAezzC,EAAM,YAAa2P,GACpC,CAOA,SAASA,KACP,MAAO,CAACnP,KAAM,QAChB,CCnBe,SAAS8zC,KACtB,OAAOD,EACT,CCdO,MCODE,GAAsB,iBAATjwC,KAAoBA,KAAOkwC,WAuEjCC,GAAcC,GArEN,EAACC,EAAG1oC,KACvB,MAAMsjB,EAAK,CAACqlB,EAAK1+C,KACfy+C,EAAEE,IAAI3+C,EAAO0+C,GACNA,GAGHE,EAAS5+C,IACb,GAAIy+C,EAAE9D,IAAI36C,GACR,OAAOy+C,EAAEI,IAAI7+C,GAEf,MAAOsK,EAAMxL,GAASiX,EAAE/V,GACxB,OAAQsK,GACN,KDpBoB,ECqBpB,KDtBoB,ECuBlB,OAAO+uB,EAAGv6B,EAAOkB,GACnB,KDtBoB,ECsBR,CACV,MAAMjC,EAAMs7B,EAAG,GAAIr5B,GACnB,IAAK,MAAMA,KAASlB,EAClBf,EAAIqH,KAAKw5C,EAAO5+C,IAClB,OAAOjC,CACT,CACA,KD3BoB,EC2BP,CACX,MAAM2oC,EAASrN,EAAG,CAAC,EAAGr5B,GACtB,IAAK,MAAO5B,EAAK4B,KAAUlB,EACzB4nC,EAAOkY,EAAOxgD,IAAQwgD,EAAO5+C,GAC/B,OAAO0mC,CACT,CACA,KDhCoB,ECiClB,OAAOrN,EAAG,IAAIylB,KAAKhgD,GAAQkB,GAC7B,KDjCoB,ECiCP,CACX,MAAM,OAACoB,EAAM,MAAE29C,GAASjgD,EACxB,OAAOu6B,EAAG,IAAImkB,OAAOp8C,EAAQ29C,GAAQ/+C,EACvC,CACA,KDpCoB,ECoCV,CACR,MAAMgF,EAAMq0B,EAAG,IAAI2lB,IAAKh/C,GACxB,IAAK,MAAO5B,EAAK4B,KAAUlB,EACzBkG,EAAI25C,IAAIC,EAAOxgD,GAAMwgD,EAAO5+C,IAC9B,OAAOgF,CACT,CACA,KDzCoB,ECyCV,CACR,MAAM25C,EAAMtlB,EAAG,IAAIkhB,IAAKv6C,GACxB,IAAK,MAAMA,KAASlB,EAClB6/C,EAAI91C,IAAI+1C,EAAO5+C,IACjB,OAAO2+C,CACT,CACA,KD9CoB,EC8CR,CACV,MAAM,KAAChgD,EAAI,QAAEsC,GAAWnC,EACxB,OAAOu6B,EAAG,IAAIglB,GAAI1/C,GAAMsC,GAAUjB,EACpC,CACA,KDjDoB,ECkDlB,OAAOq5B,EAAG4lB,OAAOngD,GAAQkB,GAC3B,IAAK,SACH,OAAOq5B,EAAG/7B,OAAO2hD,OAAOngD,IAASkB,GAErC,OAAOq5B,EAAG,IAAIglB,GAAI/zC,GAAMxL,GAAQkB,EAAM,EAGxC,OAAO4+C,CAAM,EAY0BM,CAAa,IAAIF,IAAKR,EAAtBU,CAAkC,GCvErEC,GAAQ,IAEPzhD,SAAQ,IAAI,CAAC,GACb2M,KAAI,IAAI/M,OAETyvC,GAASjuC,IACb,MAAMwL,SAAcxL,EACpB,GAAa,WAATwL,IAAsBxL,EACxB,MAAO,CFde,EEcHwL,GAErB,MAAM80C,EAAW,GAASnhD,KAAKa,GAAOiC,MAAM,GAAI,GAChD,OAAQq+C,GACN,IAAK,QACH,MAAO,CFlBa,EEkBLD,IACjB,IAAK,SACH,MAAO,CFnBa,EEmBJA,IAClB,IAAK,OACH,MAAO,CFpBa,EEoBNA,IAChB,IAAK,SACH,MAAO,CFrBa,EEqBJA,IAClB,IAAK,MACH,MAAO,CFtBa,EEsBPA,IACf,IAAK,MACH,MAAO,CFvBa,EEuBPA,IAGjB,OAAIC,EAASl6C,SAAS,SACb,CFhCe,EEgCPk6C,GAEbA,EAASl6C,SAAS,SACb,CF7Be,EE6BPk6C,GAEV,CFpCiB,EEoCRA,EAAS,EAGrBC,GAAa,EAAEC,EAAMh1C,KFzCD,IE0CxBg1C,IACU,aAATh1C,GAAgC,WAATA,GAiHZi1C,GAAY,CAACzgD,GAAQ0gD,OAAMC,SAAS,CAAC,KACjD,MAAM1pC,EAAI,GACV,MAhHiB,EAAC2pC,EAAQF,EAAMf,EAAG1oC,KAEnC,MAAMsjB,EAAK,CAACqlB,EAAK5/C,KACf,MAAMkB,EAAQ+V,EAAE3Q,KAAKs5C,GAAO,EAE5B,OADAD,EAAEE,IAAI7/C,EAAOkB,GACNA,CAAK,EAGR2/C,EAAO7gD,IACX,GAAI2/C,EAAE9D,IAAI77C,GACR,OAAO2/C,EAAEI,IAAI//C,GAEf,IAAKwgD,EAAMh1C,GAAQyiC,GAAOjuC,GAC1B,OAAQwgD,GACN,KF5DoB,EE4DJ,CACd,IAAIt2C,EAAQlK,EACZ,OAAQwL,GACN,IAAK,SACHg1C,EFxDc,EEyDdt2C,EAAQlK,EAAMpB,WACd,MACF,IAAK,WACL,IAAK,SACH,GAAIgiD,EACF,MAAM,IAAI59C,UAAU,uBAAyBwI,GAC/CtB,EAAQ,KACR,MACF,IAAK,YACH,OAAOqwB,EAAG,EF3EI,GE2EIv6B,GAEtB,OAAOu6B,EAAG,CAACimB,EAAMt2C,GAAQlK,EAC3B,CACA,KF7EoB,EE6ER,CACV,GAAIwL,EACF,OAAO+uB,EAAG,CAAC/uB,EAAM,IAAIxL,IAASA,GAEhC,MAAMf,EAAM,GACNiC,EAAQq5B,EAAG,CAACimB,EAAMvhD,GAAMe,GAC9B,IAAK,MAAMkK,KAASlK,EAClBf,EAAIqH,KAAKu6C,EAAK32C,IAChB,OAAOhJ,CACT,CACA,KFtFoB,EEsFP,CACX,GAAIsK,EACF,OAAQA,GACN,IAAK,SACH,OAAO+uB,EAAG,CAAC/uB,EAAMxL,EAAMpB,YAAaoB,GACtC,IAAK,UACL,IAAK,SACL,IAAK,SACH,OAAOu6B,EAAG,CAAC/uB,EAAMxL,EAAM8gD,WAAY9gD,GAIzC,GAAI0gD,GAAS,WAAY1gD,EACvB,OAAO6gD,EAAK7gD,EAAM+gD,UAEpB,MAAMC,EAAU,GACV9/C,EAAQq5B,EAAG,CAACimB,EAAMQ,GAAUhhD,GAClC,IAAK,MAAMV,KAAO,GAAKU,IACjB4gD,GAAWL,GAAWtS,GAAOjuC,EAAMV,MACrC0hD,EAAQ16C,KAAK,CAACu6C,EAAKvhD,GAAMuhD,EAAK7gD,EAAMV,MAExC,OAAO4B,CACT,CACA,KF5GoB,EE6GlB,OAAOq5B,EAAG,CAACimB,EAAMxgD,EAAMihD,eAAgBjhD,GACzC,KF7GoB,EE6GP,CACX,MAAM,OAACsC,EAAM,MAAE29C,GAASjgD,EACxB,OAAOu6B,EAAG,CAACimB,EAAM,CAACl+C,SAAQ29C,UAASjgD,EACrC,CACA,KFhHoB,EEgHV,CACR,MAAMghD,EAAU,GACV9/C,EAAQq5B,EAAG,CAACimB,EAAMQ,GAAUhhD,GAClC,IAAK,MAAOV,EAAK4K,KAAUlK,GACrB4gD,IAAYL,GAAWtS,GAAO3uC,MAASihD,GAAWtS,GAAO/jC,MAC3D82C,EAAQ16C,KAAK,CAACu6C,EAAKvhD,GAAMuhD,EAAK32C,KAElC,OAAOhJ,CACT,CACA,KFxHoB,EEwHV,CACR,MAAM8/C,EAAU,GACV9/C,EAAQq5B,EAAG,CAACimB,EAAMQ,GAAUhhD,GAClC,IAAK,MAAMkK,KAASlK,GACd4gD,GAAWL,GAAWtS,GAAO/jC,KAC/B82C,EAAQ16C,KAAKu6C,EAAK32C,IAEtB,OAAOhJ,CACT,EAGF,MAAM,QAACiB,GAAWnC,EAClB,OAAOu6B,EAAG,CAACimB,EAAM,CAAC3gD,KAAM2L,EAAMrJ,YAAWnC,EAAM,EAGjD,OAAO6gD,CAAI,EAiBJK,GAAaR,GAAQC,KAAUD,EAAM,IAAIR,IAAKjpC,EAA9CiqC,CAAiDlhD,GAAQiX,CAAC,EChJnE,OAA0C,mBAApBkqC,gBAEpB,CAACh0B,EAAKvtB,IACJA,IAAY,SAAUA,GAAW,UAAWA,GAC1C6/C,GAAYgB,GAAUtzB,EAAKvtB,IAAYuhD,gBAAgBh0B,GAE3D,CAACA,EAAKvtB,IAAY6/C,GAAYgB,GAAUtzB,EAAKvtB,ICG/C,MAAM,GAAS,QCkBf,MAAMwhD,GAAc,IAAI3F,IAAI,CAAC,SAAU,OAAQ,QAAS,WAElD,GAAM,CAAC,EAAE/8C,eAYR,SAAS2iD,GAAQhH,EAAQiH,EAAgBC,GAC9C,MAAM/tC,EAAS+tC,GAqRjB,SAAyBj6C,GAEvB,MAAMnD,EAAS,CAAC,EAChB,IAAIjD,GAAS,EAEb,OAASA,EAAQoG,EAAOzG,QACtBsD,EAAOmD,EAAOpG,GAAO0Z,eAAiBtT,EAAOpG,GAG/C,OAAOiD,CACT,CA/RkCq9C,CAAgBD,GA4EhD,OA9CA,SAAWE,EAAU5yB,KAAe5iB,GAClC,IAEIxB,EAFAvJ,GAAS,EAIb,GAAIugD,QAA6C,CAC/Ch3C,EAAO,CAACe,KAAM,OAAQS,SAAU,IAEhC,MAAM+kB,EAA6B,EACnC/kB,EAASO,QAAQwkB,EACnB,MASE,GARAvmB,EDtDC,SAAuBg3C,EAAUH,GACtC,MAAMthD,EAAQyhD,GAAY,GAEpBtuB,EAAQ,CAAC,EACf,IAEIhkB,EAEAwN,EAJArb,EAAQ,EAMZ,KAAOA,EAAQtB,EAAMa,QAAQ,CAC3B,GAAOsrB,UAAY7qB,EACnB,MAAM2qB,EAAQ,GAAOG,KAAKpsB,GACpB0hD,EAAW1hD,EAAMiC,MAAMX,EAAO2qB,EAAQA,EAAM/qB,MAAQlB,EAAMa,QAE5D6gD,IACGvyC,EAEmB,MAAbA,EACTgkB,EAAM5E,GAAKmzB,EACFxiD,MAAMF,QAAQm0B,EAAMhD,WAC7BgD,EAAMhD,UAAU7pB,KAAKo7C,GAErBvuB,EAAMhD,UAAY,CAACuxB,GANnB/kC,EAAU+kC,EASZpgD,GAASogD,EAAS7gD,QAGhBorB,IACF9c,EAAW8c,EAAM,GACjB3qB,IAEJ,CAEA,MAAO,CACLkK,KAAM,UAENmR,QAASA,GAAW2kC,GAAkB,MACtCzyB,WAAYsE,EACZlnB,SAAU,GAEd,CCYa01C,CAAcF,EAAUH,GAE/B72C,EAAKkS,QAAUlS,EAAKkS,QAAQ/B,cACxBpH,GAAU,GAAIrU,KAAKqU,EAAQ/I,EAAKkS,WAClClS,EAAKkS,QAAUnJ,EAAO/I,EAAKkS,UA4CnC,SAAsB3c,EAAOH,GAC3B,GACEG,SAEiB,iBAAVA,GACPd,MAAMF,QAAQgB,GAEd,OAAO,EAGT,GAAa,UAATH,IAAqBG,EAAMwL,MAA8B,iBAAfxL,EAAMwL,KAClD,OAAO,EAGT,GAAI,aAAcxL,GAASd,MAAMF,QAAQgB,EAAMiM,UAC7C,OAAO,EAGT,GAAa,WAATpM,EACF,OAAOuhD,GAAYvF,IAAI77C,EAAMwL,KAAKoP,eAGpC,QAAS,UAAW5a,EACtB,CA/DU4hD,CAAa/yB,EAAYpkB,EAAKkS,SAAU,CAE1C,IAAIrd,EAEJ,IAAKA,KAAOuvB,EACN,GAAI1vB,KAAK0vB,EAAYvvB,IACvB,GAAY+6C,EAAQ5vC,EAAKokB,WAAYvvB,EAAKuvB,EAAWvvB,GAG3D,MACE2M,EAASO,QAAQqiB,GAKrB,OAAS3tB,EAAQ+K,EAASpL,QACxBghD,GAASp3C,EAAKwB,SAAUA,EAAS/K,IAQnC,MALkB,YAAduJ,EAAKe,MAAuC,aAAjBf,EAAKkS,UAClClS,EAAKmE,QAAU,CAACpD,KAAM,OAAQS,SAAUxB,EAAKwB,UAC7CxB,EAAKwB,SAAW,IAGXxB,CACT,CAGF,CAiDA,SAAS,GAAY4vC,EAAQxrB,EAAYvvB,EAAKU,GAC5C,MAAM0G,EAAO0zC,GAAKC,EAAQ/6C,GAC1B,IAEI6E,EAFAjD,GAAS,EAKb,GAAIlB,QAAJ,CAEA,GAAqB,iBAAVA,EAAoB,CAE7B,GAAIwJ,OAAOs4C,MAAM9hD,GAAQ,OAEzBmE,EAASnE,CACX,MAGEmE,EADwB,kBAAVnE,EACLA,EAGe,iBAAVA,EACV0G,EAAKquB,eACE,GAAO/0B,GACP0G,EAAKouB,eACL,GAAO90B,GACP0G,EAAKsuB,sBACL,GAAO,GAAOh1B,GAAO6D,KAAK,MAE1Bk+C,GAAer7C,EAAMA,EAAK2tB,SAAUr0B,GAEtCd,MAAMF,QAAQgB,GACdA,EAAMiuB,SAEY,UAAlBvnB,EAAK2tB,SA+FlB,SAAer0B,GAEb,MAAMmE,EAAS,GAEf,IAAI7E,EAEJ,IAAKA,KAAOU,EACN,GAAIb,KAAKa,EAAOV,IAClB6E,EAAOmC,KAAK,CAAChH,EAAKU,EAAMV,IAAMuE,KAAK,OAIvC,OAAOM,EAAON,KAAK,KACrB,CA5GyC0hC,CAAMvlC,GAASwK,OAAOxK,GAG7D,GAAId,MAAMF,QAAQmF,GAAS,CAEzB,MAAM69C,EAAc,GAEpB,OAAS9gD,EAAQiD,EAAOtD,QAAQ,CAE9B,MAAMb,EACJ+hD,GAAer7C,EAAMA,EAAK2tB,SAAUlwB,EAAOjD,IAE7C8gD,EAAY9gD,GAASlB,CACvB,CAEAmE,EAAS69C,CACX,CAGA,GAAsB,cAAlBt7C,EAAK2tB,UAA4Bn1B,MAAMF,QAAQ6vB,EAAWsB,WAAY,CAExE,MAAMnwB,EAAuC,EAC7CmE,EAAS0qB,EAAWsB,UAAUlC,OAAOjuB,EACvC,CAEA6uB,EAAWnoB,EAAK2tB,UAAYlwB,CAnDe,CAoD7C,CAUA,SAAS09C,GAASvuB,EAAOtzB,GACvB,IAAIkB,GAAS,EAEb,GAAIlB,cAEG,GAAqB,iBAAVA,GAAuC,iBAAVA,EAC7CszB,EAAMhtB,KAAK,CAACkF,KAAM,OAAQxL,MAAOwK,OAAOxK,UACnC,GAAId,MAAMF,QAAQgB,GACvB,OAASkB,EAAQlB,EAAMa,QACrBghD,GAASvuB,EAAOtzB,EAAMkB,QAEnB,IAAqB,iBAAVlB,KAAsB,SAAUA,GAOhD,MAAM,IAAIyB,MAAM,yCAA2CzB,EAAQ,KANhD,SAAfA,EAAMwL,KACRq2C,GAASvuB,EAAOtzB,EAAMiM,UAEtBqnB,EAAMhtB,KAAKtG,EAIf,CACF,CAcA,SAAS+hD,GAAer7C,EAAM7G,EAAMG,GAClC,GAAqB,iBAAVA,EAAoB,CAC7B,GAAI0G,EAAKmuB,QAAU70B,IAAUwJ,OAAOs4C,MAAMt4C,OAAOxJ,IAC/C,OAAOwJ,OAAOxJ,GAGhB,IACG0G,EAAKguB,SAAWhuB,EAAKkuB,qBACX,KAAV50B,GAAgB,GAAUA,KAAW,GAAUH,IAEhD,OAAO,CAEX,CAEA,OAAOG,CACT,CC7SO,MC+BMiiD,GAAIZ,GAAQ,GAAM,OAIlBa,GAAIb,GAAQ,GAAK,IDnCU,CACtC,WACA,cACA,eACA,eACA,gBACA,mBACA,WACA,UACA,gBACA,sBACA,cACA,mBACA,oBACA,oBACA,iBACA,eACA,UACA,UACA,UACA,UACA,UACA,iBACA,UACA,UACA,cACA,eACA,WACA,eACA,qBACA,cACA,SACA,eACA,gBACA,WACA,iBACA,iBACA,aACA,WACA,aEMI,GAAS,YCxCR,MAAMc,GAAgB,CAC3B57B,KAAM,+BACN67B,OAAQ,qCACRjZ,IAAK,6BACL1T,MAAO,+BACPQ,IAAK,uCACLM,MAAO,iCC2DH,GAAM,CAAC,EAAE73B,eAGT2jD,GAAQ7jD,OAAOC,UAoCrB,SAAS,GAAI6X,EAAO7L,GAElB,IAAItG,EAEJ,OAAQsG,EAAK63C,UACX,IAAK,WAAY,CACf,MAAMr7B,EAAqC,EAG3C,OAFA9iB,EAAS,CAACqH,KAAM,UAAWxL,MAAOinB,EAAUnhB,MAC5C,GAAMwQ,EAAO2Q,EAAW9iB,GACjBA,CACT,CAEA,IAAK,YACL,IAAK,qBAAsB,CACzB,MAAM8iB,EAA2D,EAC3Ds7B,EACJ,SAAUt7B,IACa,WAAnBA,EAAUutB,MAAwC,mBAAnBvtB,EAAUutB,MAS/C,GANArwC,EAAS,CACPqH,KAAM,OACNS,SAAU,GAAIqK,EAAO7L,EAAK+3C,YAC1B18C,KAAM,CAACy8C,eAGLjsC,EAAM9T,MAAQ8T,EAAMmsC,SAAU,CAChC,MAAMr4C,EAAMI,OAAO8L,EAAM9T,MACnBkgD,EF7EP,SAAkBlgD,GACvB,MAAMxC,EAAQwK,OAAOhI,GAOfmgD,EAAU,GAIhB,IAFA,GAAOx2B,UAAY,EAEZ,GAAOne,KAAKhO,IACjB2iD,EAAQr8C,KAAK,GAAO6lB,WAKtB,OAFAw2B,EAAQr8C,KAAKtG,EAAMa,OAAS,GAErB,CAAC+hD,QAGR,SAAiB1xC,GACf,IAAIhQ,GAAS,EAEb,GACoB,iBAAXgQ,GACPA,GAAU,GACVA,EAASyxC,EAAQA,EAAQ9hD,OAAS,GAElC,OAASK,EAAQyhD,EAAQ9hD,QACvB,GAAI8hD,EAAQzhD,GAASgQ,EACnB,MAAO,CACL/P,KAAMD,EAAQ,EACdE,OAAQ8P,GAAUhQ,EAAQ,EAAIyhD,EAAQzhD,EAAQ,GAAK,GAAK,EACxDgQ,SAKV,EArBiB2xC,SAwBjB,SAAkB5hD,GAChB,MAAME,EAAOF,GAASA,EAAME,KACtBC,EAASH,GAASA,EAAMG,OAE9B,GACkB,iBAATD,GACW,iBAAXC,IACNoI,OAAOs4C,MAAM3gD,KACbqI,OAAOs4C,MAAM1gD,IACdD,EAAO,KAAKwhD,EACZ,CACA,MAAMzxC,GAAUyxC,EAAQxhD,EAAO,IAAM,GAAKC,EAAS,GAAK,EAExD,GAAI8P,GAAU,GAAKA,EAASyxC,EAAQA,EAAQ9hD,OAAS,GACnD,OAAOqQ,CAEX,CACF,EACF,CEiBoB,CAAS9G,GACf9I,EAAQohD,EAAIE,QAAQ,GACpBrhD,EAAMmhD,EAAIE,QAAQx4C,EAAIvJ,QAI5BsD,EAAOnD,SAAW,CAACM,QAAOC,MAC5B,CAEA,OAAO4C,CACT,CAEA,IAAK,gBAIH,OAFAA,EAAS,CAACqH,KAAM,WAChB,GAAM8K,EAF0C,EAExBnS,GACjBA,EAGT,IAAK,QAAS,CACZ,MAAM8iB,EAAkC,EAGxC,OAFA9iB,EAAS,CAACqH,KAAM,OAAQxL,MAAOinB,EAAUjnB,OACzC,GAAMsW,EAAO2Q,EAAW9iB,GACjBA,CACT,CAGA,QAGE,OADAA,EAwCN,SAAiBmS,EAAO7L,GACtB,MAAM4vC,EAAS/jC,EAAM+jC,OAErB/jC,EAAM+jC,OAAS5vC,EAAKq4C,eAAiBX,GAAchZ,IAAM,GAAM,GAG/D,IAAIjoC,GAAS,EAEb,MAAMiyB,EAAQ,CAAC,EAEf,OAASjyB,EAAQuJ,EAAKs4C,MAAMliD,QAAQ,CAClC,MAAM4zB,EAAYhqB,EAAKs4C,MAAM7hD,GACvBrB,GACH40B,EAAUhmB,OAASgmB,EAAUhmB,OAAS,IAAM,IAAMgmB,EAAU50B,KAC1D,GAAIV,KAAKkjD,GAAOxiD,KACnBszB,EAAMtzB,GAAQ40B,EAAUz0B,MAE5B,CAGA,MAAM4H,EAA4B,QAAvB0O,EAAM+jC,OAAO3qB,MAAkBwyB,GAAID,GACxC99C,EAASyD,EAAG6C,EAAKkS,QAASwW,EAAO,GAAI7c,EAAO7L,EAAK+3C,aAIvD,GAHA,GAAMlsC,EAAO7L,EAAMtG,GAGI,aAAnBA,EAAOwY,QAAwB,CACjC,MAAMsK,EAAsC,EACtC5lB,EAAM4lB,EAAU+7B,mBAChBC,EAAW5hD,GAAOA,EAAI4hD,UAAY,GAAS5hD,EAAI4hD,UAC/CC,EAAS7hD,GAAOA,EAAI6hD,QAAU,GAAS7hD,EAAI6hD,QAG3Ct0C,EAA+B,GAAI0H,EAAO2Q,EAAUrY,SAEtDq0C,GAAYC,GAAU5sC,EAAM9T,OAC9BoM,EAAQ5N,SAAW,CAACM,MAAO2hD,EAAS1hD,IAAKA,IAAK2hD,EAAO5hD,QAGvD6C,EAAOyK,QAAUA,CACnB,CAIA,OAFA0H,EAAM+jC,OAASA,EAERl2C,CACT,CApFe,CAAQmS,EAD0B,GAEpCnS,EAGb,CAYA,SAAS,GAAImS,EAAOgd,GAClB,IAAIpyB,GAAS,EAEb,MAAM0vB,EAAU,GAEhB,OAAS1vB,EAAQoyB,EAAMzyB,QAAQ,CAE7B,MAAMsD,EAAqC,GAAImS,EAAOgd,EAAMpyB,IAC5D0vB,EAAQtqB,KAAKnC,EACf,CAEA,OAAOysB,CACT,CAsEA,SAAS,GAAMta,EAAO/J,EAAM6mB,GAC1B,GAAI,uBAAwB7mB,GAAQA,EAAKy2C,oBAAsB1sC,EAAM9T,KAAM,CACzE,MAAMxB,EAqBV,SAAwBsV,EAAO7L,EAAMg4C,GACnC,MAAMt+C,EAAS,GAASs+C,GAExB,GAAkB,YAAdh4C,EAAKe,KAAoB,CAC3B,MAAMwI,EAAOvJ,EAAKwB,SAASxB,EAAKwB,SAASpL,OAAS,GAclD,GATEsD,IACCs+C,EAASS,QACVlvC,GACAA,EAAKhT,UACLgT,EAAKhT,SAASO,MAEd4C,EAAO5C,IAAM/C,OAAOsL,OAAO,CAAC,EAAGkK,EAAKhT,SAASO,MAG3C+U,EAAM6sC,QAAS,CAEjB,MAAMhwB,EAAQ,CAAC,EAEf,IAAI7zB,EAEJ,GAAImjD,EAASM,MACX,IAAKzjD,KAAOmjD,EAASM,MACf,GAAI5jD,KAAKsjD,EAASM,MAAOzjD,KAC3B6zB,EAAMinB,GAAK9jC,EAAM+jC,OAAQ/6C,GAAK+0B,UAAY,GACxCouB,EAASM,MAAMzjD,KAMhBmjD,EAASQ,SAChB,MAAMG,EAAU,GAASX,EAASQ,UAC5BI,EAAUZ,EAASS,OAAS,GAAST,EAASS,aAAUnhD,EAExD+D,EAAO,CAACs9C,WACVC,IAASv9C,EAAKu9C,QAAUA,GAC5Bv9C,EAAK+oB,WAAasE,EAElB1oB,EAAK3E,KAAO,CAAC9E,SAAU8E,EACzB,CACF,CAEA,OAAO3B,CACT,CApEqBm/C,CAAehtC,EAAO8c,EAAI7mB,EAAKy2C,oBAE5ChiD,IACFsV,EAAMmsC,UAAW,EACjBrvB,EAAGpyB,SAAWA,EAElB,CACF,CAuEA,SAAS,GAAS0hD,GAChB,MAAMphD,EAAQ,GAAM,CAClBH,KAAMuhD,EAAIa,UACVniD,OAAQshD,EAAIc,SACZtyC,OAAQwxC,EAAIpL,cAER/1C,EAAM,GAAM,CAChBJ,KAAMuhD,EAAIe,QACVriD,OAAQshD,EAAIgB,OACZxyC,OAAQwxC,EAAIiB,YAKd,OAAOriD,GAASC,EAAM,CAACD,QAAOC,YAAOQ,CACvC,CAUA,SAAS,GAAMd,GACb,OAAOA,EAAME,MAAQF,EAAMG,OAASH,OAAQc,CAC9C,CClUA,MAAM,GAAM,CAAC,EAAErD,eAcR,SAASklD,GAAOtkD,EAAKM,GAC1B,MAAM8J,EAAW9J,GAAW,CAAC,EA8B7B,SAASiM,EAAI7L,KAAUgI,GAErB,IAAIJ,EAAKiE,EAAIg4C,QACb,MAAM7zB,EAAWnkB,EAAImkB,SAErB,GAAIhwB,GAAS,GAAIb,KAAKa,EAAOV,GAAM,CAEjC,MAAMivB,EAAK/jB,OAAOxK,EAAMV,IAExBsI,EAAK,GAAIzI,KAAK6wB,EAAUzB,GAAMyB,EAASzB,GAAM1iB,EAAIi4C,OACnD,CAEA,GAAIl8C,EACF,OAAOA,EAAGzI,KAAK+C,KAAMlC,KAAUgI,EAEnC,CAOA,OALA6D,EAAImkB,SAAWtmB,EAASsmB,UAAY,CAAC,EACrCnkB,EAAIg4C,QAAUn6C,EAASm6C,QACvBh4C,EAAIi4C,QAAUp6C,EAASo6C,QAGhBj4C,CACT,CCxEA,MAAM,GAAe,CAAC,EAEhB,GAAM,CAAC,EAAEnN,eAET,GAAMklD,GAAO,OAAQ,CAAC5zB,SAAU,CAACiB,KA0BvC,SAAcxmB,EAAM4vC,GAElB,MAAMl2C,EAAS,CACbm+C,SAAU,YAEV9N,MAAO/pC,EAAK3E,MAAQ,CAAC,GAAGy8C,WAAa,SAAW,YAChDC,WAAY,IAId,OAFAr+C,EAAOq+C,WAAa,GAAI/3C,EAAKwB,SAAU9H,EAAQk2C,GAC/C,GAAM5vC,EAAMtG,GACLA,CACT,EArC2C,QAuH3C,SAAiBsG,EAAM4vC,GACrB,MAAM2B,EAAe3B,EACrB,IAAI0J,EAAgB/H,EAGJ,YAAdvxC,EAAKe,MAC0B,QAA/Bf,EAAKkS,QAAQ/B,eACU,SAAvBohC,EAAatsB,QAEbq0B,EAAgB,IAIlB,MAAMhB,EAAQ,GAEd,IAAI58C,EAEJ,GAAIsE,EAAKokB,WACP,IAAK1oB,KAAQsE,EAAKokB,WAChB,GAAa,aAAT1oB,GAAuB,GAAIhH,KAAKsL,EAAKokB,WAAY1oB,GAAO,CAC1D,MAAMhC,EAAS6/C,GACbD,EACA59C,EACAsE,EAAKokB,WAAW1oB,IAGdhC,GACF4+C,EAAMz8C,KAAKnC,EAEf,CAIJ,MAAMurB,EAAQq0B,EAAcr0B,MAK5B,MAAMvrB,EAAS,CACbm+C,SAAU73C,EAAKkS,QACfA,QAASlS,EAAKkS,QACdomC,QAEAD,aAAcX,GAAczyB,GAC5B8yB,WAAY,GACZyB,WAAY,MAEd9/C,EAAOq+C,WAAa,GAAI/3C,EAAKwB,SAAU9H,EAAQ4/C,GAC/C,GAAMt5C,EAAMtG,GAES,aAAjBsG,EAAKkS,SAA0BlS,EAAKmE,UAEtCzK,EAAOyK,QA5HX,SAAkBnE,EAAM4vC,GAEtB,MAAMl2C,EAAS,CAACm+C,SAAU,qBAAsBE,WAAY,IAG5D,OAFAr+C,EAAOq+C,WAAa,GAAI/3C,EAAKwB,SAAU9H,EAAQk2C,GAC/C,GAAM5vC,EAAMtG,GACLA,CACT,CAsHqBunB,CAASjhB,EAAKmE,QAASm1C,IAG1C,OAAO5/C,CACT,EA/KoD,KAiFpD,SAAcsG,GAEZ,MAAMtG,EAAS,CACbm+C,SAAU,QACVtiD,MAAOyK,EAAKzK,MACZikD,WAAY,MAGd,OADA,GAAMx5C,EAAMtG,GACLA,CACT,EA1F0D,QAkG1D,SAAiBsG,GAEf,MAAMtG,EAAS,CACbm+C,SAAU,WACVx8C,KAAM2E,EAAKzK,MACXikD,WAAY,MAKd,OAFA,GAAMx5C,EAAMtG,GAELA,CACT,EA7G0D,QA6D1D,SAAiBsG,GAEf,MAAMtG,EAAS,CACbm+C,SAAU,gBACVziD,KAAM,OACNqkD,SAAU,GACVC,SAAU,GACVF,WAAY,MAId,OADA,GAAMx5C,EAAMtG,GACLA,CACT,KAoHA,SAAS6/C,GAAe3J,EAAQl0C,EAAMnG,GACpC,MAAM0G,EAAO0zC,GAAKC,EAAQl0C,GAG1B,IACY,IAAVnG,SACAA,GAEkB,iBAAVA,GAAsBwJ,OAAOs4C,MAAM9hD,KACzCA,GAAS0G,EAAKguB,QAEhB,OAGEx1B,MAAMF,QAAQgB,KAGhBA,EAAQ0G,EAAKouB,eAAiB,GAAO90B,GAAS,GAAOA,IAIvD,MAAMy0B,EAAY,CAChB50B,KAAM6G,EAAK+tB,UACXz0B,OAAiB,IAAVA,EAAiB,GAAKwK,OAAOxK,IAGtC,GAAI0G,EAAKgpB,OAAwB,SAAfhpB,EAAKgpB,OAAmC,QAAfhpB,EAAKgpB,MAAiB,CAC/D,MAAMxuB,EAAQuzB,EAAU50B,KAAKmC,QAAQ,KAEjCd,EAAQ,EACVuzB,EAAUhmB,OAAS,IAEnBgmB,EAAU50B,KAAO40B,EAAU50B,KAAKoC,MAAMf,EAAQ,GAC9CuzB,EAAUhmB,OAAS/H,EAAK+tB,UAAUxyB,MAAM,EAAGf,IAG7CuzB,EAAU3rB,UAAYq5C,GAAcz7C,EAAKgpB,MAC3C,CAEA,OAAO+E,CACT,CAcA,SAAS,GAAIxoB,EAAUg4C,EAAY5J,GACjC,IAAIn5C,GAAS,EAEb,MAAM0vB,EAAU,GAEhB,GAAI3kB,EACF,OAAS/K,EAAQ+K,EAASpL,QAAQ,CAEhC,MAAMmwB,EAAQ,GAAI/kB,EAAS/K,GAAQm5C,GAEnCrpB,EAAMizB,WAAaA,EAEnBrzB,EAAQtqB,KAAK0qB,EACf,CAGF,OAAOJ,CACT,CAYA,SAAS,GAAMrkB,EAAM6mB,GACnB,MAAMpyB,EAAWuL,EAAKvL,SAElBA,GAAYA,EAASM,OAASN,EAASO,MAC3BP,EAASM,MAAM4P,OACflQ,EAASO,IAAI2P,OAE3BkiB,EAAG4vB,mBAAqB,CACtBO,UAAWviD,EAASM,MAAMH,KAC1BqiD,SAAUxiD,EAASM,MAAMF,OACzBk2C,YAAat2C,EAASM,MAAM4P,OAC5BuyC,QAASziD,EAASO,IAAIJ,KACtBuiD,OAAQ1iD,EAASO,IAAIH,OACrBuiD,UAAW3iD,EAASO,IAAI2P,QAG9B,CC5UO,MAAMkzC,GAAmB,CAC9B,OACA,OACA,WACA,UACA,KACA,MACA,UACA,QACA,QACA,KACA,QACA,MACA,QACA,SACA,OACA,OACA,QACA,SACA,QACA,OCzBIC,GAAwB,IAAI5I,IAAI,CAClC,MAAO,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAC9E,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OACxE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACxE,QAAS,QAAS,UAET6I,GAAwB,IAC9B,IAAIC,IACX,SAAWA,GACPA,EAAYA,EAAiB,KAAK,GAAK,MACvCA,EAAYA,EAAkB,KAAI,GAAK,OACvCA,EAAYA,EAAwB,WAAI,GAAK,aAC7CA,EAAYA,EAA6B,gBAAI,IAAM,kBACnDA,EAAYA,EAAuB,UAAI,IAAM,YAC7CA,EAAYA,EAAuB,UAAI,IAAM,YAC7CA,EAAYA,EAAmB,MAAI,IAAM,QACzCA,EAAYA,EAA8B,iBAAI,IAAM,mBACpDA,EAAYA,EAA4B,eAAI,IAAM,iBAClDA,EAAYA,EAAyB,YAAI,IAAM,cAC/CA,EAAYA,EAAuB,UAAI,IAAM,YAC7CA,EAAYA,EAAwB,WAAI,IAAM,aAC9CA,EAAYA,EAA0B,aAAI,IAAM,eAChDA,EAAYA,EAAqB,QAAI,IAAM,UAC3CA,EAAYA,EAAqB,QAAI,IAAM,UAC3CA,EAAYA,EAAqB,QAAI,IAAM,UAC3CA,EAAYA,EAAuB,UAAI,IAAM,YAC7CA,EAAYA,EAA4B,eAAI,IAAM,iBAClDA,EAAYA,EAAyB,YAAI,IAAM,cAC/CA,EAAYA,EAA+B,kBAAI,IAAM,oBACrDA,EAAYA,EAA2B,cAAI,IAAM,gBACjDA,EAAYA,EAA6B,gBAAI,IAAM,kBACnDA,EAAYA,EAA6B,gBAAI,IAAM,kBACnDA,EAAYA,EAA6B,gBAAI,IAAM,kBACnDA,EAAYA,EAA6B,gBAAI,IAAM,kBACnDA,EAAYA,EAAkC,qBAAI,IAAM,uBACxDA,EAAYA,EAA0B,aAAI,IAAM,eAChDA,EAAYA,EAA2B,cAAI,IAAM,gBACjDA,EAAYA,EAA2B,cAAI,KAAO,gBAClDA,EAAYA,EAA2B,cAAI,KAAO,gBAClDA,EAAYA,EAA2B,cAAI,KAAO,gBAClDA,EAAYA,EAAmC,sBAAI,OAAS,uBAC/D,CAjCD,CAiCGA,GAAcA,KAAgBA,GAAc,CAAC,IACzC,MAAMC,GACE,KADFA,GAEI,UAFJA,GAGA,UAHAA,GAID,SAJCA,GAKD,SALCA,GAMD,SAGL,SAASC,GAAYC,GACxB,OAAOA,GAAM,OAASA,GAAM,KAChC,CAQO,SAASC,GAAmBD,GAC/B,OAAgB,KAAPA,GAAsB,KAAPA,GAAsB,KAAPA,GAAsB,IAAPA,GAAsB,KAAPA,GAAeA,GAAM,GAAQA,GAAM,IACnGA,GAAM,KAAQA,GAAM,GAC7B,CACO,SAASE,GAAqBF,GACjC,OAAQA,GAAM,OAASA,GAAM,OAAUL,GAAsBxI,IAAI6I,EACrE,CCnEO,IAAIG,IACX,SAAWA,GACPA,EAAmC,8BAAI,oCACvCA,EAA+B,0BAAI,+BACnCA,EAA4B,uBAAI,4BAChCA,EAAmD,8CAAI,wDACvDA,EAA0B,qBAAI,0BAC9BA,EAA+B,0BAAI,gCACnCA,EAA4B,uBAAI,4BAChCA,EAA6B,wBAAI,4BACjCA,EAA4C,uCAAI,+CAChDA,EAAoC,+BAAI,sCACxCA,EAA6C,wCAAI,+CACjDA,EAAuB,kBAAI,uBAC3BA,EAAwC,mCAAI,yCAC5CA,EAAoC,+BAAI,oCACxCA,EAA6C,wCAAI,8CACjDA,EAAqD,gDAAI,uDACzDA,EAAiD,4CAAI,mDACrDA,EAAsB,iBAAI,sBAC1BA,EAAc,SAAI,aAClBA,EAA2B,sBAAI,0BAC/BA,EAAwC,mCAAI,wCAC5CA,EAAgD,2CAAI,kDACpDA,EAA+D,0DAAI,mEACnEA,EAAgD,2CAAI,kDACpDA,EAA+C,0CAAI,iDACnDA,EAA+C,0CAAI,iDACnDA,EAAoC,+BAAI,oCACxCA,EAAoC,+BAAI,oCACxCA,EAAmC,8BAAI,mCACvCA,EAAmC,8BAAI,mCACvCA,EAAwB,mBAAI,wBAC5BA,EAA8B,yBAAI,6BAClCA,EAAoC,+BAAI,uCACxCA,EAAkB,aAAI,iBACtBA,EAAmB,cAAI,iBACvBA,EAAiC,4BAAI,kCACrCA,EAAkB,aAAI,iBACtBA,EAA8B,yBAAI,6BAClCA,EAAgB,WAAI,eACpBA,EAAgD,2CAAI,mDACpDA,EAA4B,uBAAI,2BAChCA,EAAiC,4BAAI,gCACrCA,EAA2C,sCAAI,4CAC/CA,EAA+B,0BAAI,8BACnCA,EAAoC,+BAAI,mCACxCA,EAAwC,mCAAI,yCAC5CA,EAAwB,mBAAI,uBAC5BA,EAA8C,yCAAI,gDAClDA,EAAwB,mBAAI,sBAC5BA,EAA0B,qBAAI,yBAC9BA,EAAoB,eAAI,kBACxBA,EAAsB,iBAAI,oBAC1BA,EAAsC,iCAAI,wCAC1CA,EAA2C,sCAAI,8CAC/CA,EAAuC,kCAAI,yCAC3CA,EAA8B,yBAAI,+BAClCA,EAA+B,0BAAI,+BACnCA,EAAqC,gCAAI,uCACzCA,EAA0B,qBAAI,0BAC9BA,EAAwC,mCAAI,2CAC/C,CA7DD,CA6DGA,GAAMA,KAAQA,GAAM,CAAC,ICvDjB,MAAMC,GACT,WAAArlD,CAAYgrB,GACRvoB,KAAKuoB,QAAUA,EACfvoB,KAAKqkB,KAAO,GACZrkB,KAAKb,KAAO,EAEZa,KAAK6iD,YAAc,EACnB7iD,KAAK8iD,SAAW,GAChB9iD,KAAK+iD,iBAAkB,EACvB/iD,KAAKgjD,kBAAmB,EACxBhjD,KAAKijD,eAAgB,EACrBjjD,KAAKkjD,gBAfoB,MAgBzBljD,KAAKmjD,OAAQ,EACbnjD,KAAKojD,aAAe,EACpBpjD,KAAKqjD,kBAAoB,EACzBrjD,KAAKf,KAAO,EAEZe,KAAKsjD,eAAiB,CAC1B,CAEA,OAAIC,GACA,OAAOvjD,KAAKb,IAAMa,KAAKojD,aAAe97C,OAAOtH,KAAK6iD,aAAe7iD,KAAKb,IAC1E,CACA,UAAI6P,GACA,OAAOhP,KAAKqjD,kBAAoBrjD,KAAKb,GACzC,CACA,QAAAqkD,CAAS9hD,GACL,MAAM,KAAEzC,EAAI,IAAEskD,EAAG,OAAEv0C,GAAWhP,KAC9B,MAAO,CACH0B,OACA2/C,UAAWpiD,EACXsiD,QAAStiD,EACTqiD,SAAUiC,EACV/B,OAAQ+B,EACRnO,YAAapmC,EACbyyC,UAAWzyC,EAEnB,CACA,IAAAy0C,CAAK/hD,GACG1B,KAAKuoB,QAAQm7B,cAAgB1jD,KAAKsjD,gBAAkBtjD,KAAKgP,SACzDhP,KAAKsjD,cAAgBtjD,KAAKgP,OAC1BhP,KAAKuoB,QAAQm7B,aAAa1jD,KAAKwjD,SAAS9hD,IAEhD,CACA,OAAAiiD,GACI3jD,KAAK8iD,SAAS1+C,KAAKpE,KAAK6iD,YACxB7iD,KAAK6iD,WAAa7iD,KAAKb,GAC3B,CACA,iBAAAykD,CAAkBpB,GAEd,GAAIxiD,KAAKb,MAAQa,KAAKqkB,KAAK1lB,OAAS,EAAG,CACnC,MAAMklD,EAAS7jD,KAAKqkB,KAAKpjB,WAAWjB,KAAKb,IAAM,GAC/C,GFLL,SAAyBqjD,GAC5B,OAAOA,GAAM,OAASA,GAAM,KAChC,CEGgBsB,CAAgBD,GAKhB,OAHA7jD,KAAKb,MAELa,KAAK2jD,UFLM,MEMsBnB,EFN/B,OAAgB,KEMmBqB,CAE7C,MAEK,IAAK7jD,KAAKgjD,iBAEX,OADAhjD,KAAKijD,eAAgB,EACd,GAAEc,IAIb,OADA/jD,KAAKyjD,KAAKd,GAAIqB,wBACPxB,CACX,CACA,mBAAAyB,GACI,OAAOjkD,KAAKb,IAAMa,KAAKkjD,eAC3B,CACA,eAAAgB,GACQlkD,KAAKikD,wBACLjkD,KAAKqkB,KAAOrkB,KAAKqkB,KAAK8/B,UAAUnkD,KAAKb,KACrCa,KAAKojD,cAAgBpjD,KAAKb,IAC1Ba,KAAKqjD,mBAAqBrjD,KAAKb,IAC/Ba,KAAKb,IAAM,EACXa,KAAK6iD,YAAc,EACnB7iD,KAAK8iD,SAASnkD,OAAS,EAE/B,CACA,KAAA+Q,CAAMuD,EAAOmxC,GACLpkD,KAAKqkB,KAAK1lB,OAAS,EACnBqB,KAAKqkB,MAAQpR,EAGbjT,KAAKqkB,KAAOpR,EAEhBjT,KAAKijD,eAAgB,EACrBjjD,KAAKgjD,iBAAmBoB,CAC5B,CACA,sBAAAC,CAAuBpxC,GACnBjT,KAAKqkB,KAAOrkB,KAAKqkB,KAAK8/B,UAAU,EAAGnkD,KAAKb,IAAM,GAAK8T,EAAQjT,KAAKqkB,KAAK8/B,UAAUnkD,KAAKb,IAAM,GAC1Fa,KAAKijD,eAAgB,CACzB,CACA,UAAAqB,CAAW1iB,EAASyd,GAEhB,GAAIr/C,KAAKb,IAAMyiC,EAAQjjC,OAASqB,KAAKqkB,KAAK1lB,OAEtC,OADAqB,KAAKijD,eAAiBjjD,KAAKgjD,kBACpB,EAEX,GAAI3D,EACA,OAAOr/C,KAAKqkB,KAAKigC,WAAW1iB,EAAS5hC,KAAKb,KAE9C,IAAK,IAAIT,EAAI,EAAGA,EAAIkjC,EAAQjjC,OAAQD,IAAK,CAErC,IADgD,GAArCsB,KAAKqkB,KAAKpjB,WAAWjB,KAAKb,IAAMT,MAChCkjC,EAAQ3gC,WAAWvC,GAC1B,OAAO,CAEf,CACA,OAAO,CACX,CACA,IAAA6lD,CAAKv1C,GACD,MAAM7P,EAAMa,KAAKb,IAAM6P,EACvB,GAAI7P,GAAOa,KAAKqkB,KAAK1lB,OAEjB,OADAqB,KAAKijD,eAAiBjjD,KAAKgjD,iBACpB,GAAEe,IAEb,MAAMriD,EAAO1B,KAAKqkB,KAAKpjB,WAAW9B,GAClC,OAAOuC,IAAS,GAAE8iD,gBAAkB,GAAEC,UAAY/iD,CACtD,CACA,OAAAgjD,GAQI,GAPA1kD,KAAKb,MAEDa,KAAKmjD,QACLnjD,KAAKmjD,OAAQ,EACbnjD,KAAKf,OACLe,KAAKojD,aAAepjD,KAAKb,KAEzBa,KAAKb,KAAOa,KAAKqkB,KAAK1lB,OAEtB,OADAqB,KAAKijD,eAAiBjjD,KAAKgjD,iBACpB,GAAEe,IAEb,IAAIvB,EAAKxiD,KAAKqkB,KAAKpjB,WAAWjB,KAAKb,KAEnC,GAAIqjD,IAAO,GAAEgC,gBAGT,OAFAxkD,KAAKmjD,OAAQ,EACbnjD,KAAK+iD,iBAAkB,EAChB,GAAE0B,UAIb,GAAIjC,IAAO,GAAEiC,YACTzkD,KAAKmjD,OAAQ,EACTnjD,KAAK+iD,iBAKL,OAHA/iD,KAAKf,OACLe,KAAK+iD,iBAAkB,EACvB/iD,KAAK2jD,UACE3jD,KAAK0kD,UAGpB1kD,KAAK+iD,iBAAkB,EACnBR,GAAYC,KACZA,EAAKxiD,KAAK4jD,kBAAkBpB,IAahC,OARyD,OAA9BxiD,KAAKuoB,QAAQm7B,cACnClB,EAAK,IAAQA,EAAK,KACnBA,IAAO,GAAEiC,WACTjC,IAAO,GAAEgC,iBACRhC,EAAK,KAAQA,EAAK,OAEnBxiD,KAAK2kD,+BAA+BnC,GAEjCA,CACX,CACA,8BAAAmC,CAA+BnC,GACvBC,GAAmBD,GACnBxiD,KAAKyjD,KAAKd,GAAIiC,+BAETlC,GAAqBF,IAC1BxiD,KAAKyjD,KAAKd,GAAIkC,0BAEtB,CACA,OAAAC,CAAQ7J,GAEJ,IADAj7C,KAAKb,KAAO87C,EACLj7C,KAAKb,IAAMa,KAAK6iD,YACnB7iD,KAAK6iD,WAAa7iD,KAAK8iD,SAASv9C,MAChCvF,KAAKb,MAETa,KAAKmjD,OAAQ,CACjB,EChMG,IAAI4B,GAYJ,SAASC,GAAa93C,EAAO+3C,GAChC,IAAK,IAAIvmD,EAAIwO,EAAM2zC,MAAMliD,OAAS,EAAGD,GAAK,EAAGA,IACzC,GAAIwO,EAAM2zC,MAAMniD,GAAGf,OAASsnD,EACxB,OAAO/3C,EAAM2zC,MAAMniD,GAAGZ,MAG9B,OAAO,IACX,EAlBA,SAAWinD,GACPA,EAAUA,EAAqB,UAAI,GAAK,YACxCA,EAAUA,EAA0B,eAAI,GAAK,iBAC7CA,EAAUA,EAAgC,qBAAI,GAAK,uBACnDA,EAAUA,EAAqB,UAAI,GAAK,YACxCA,EAAUA,EAAmB,QAAI,GAAK,UACtCA,EAAUA,EAAmB,QAAI,GAAK,UACtCA,EAAUA,EAAmB,QAAI,GAAK,UACtCA,EAAUA,EAAe,IAAI,GAAK,MAClCA,EAAUA,EAAuB,YAAI,GAAK,aAC7C,CAVD,CAUGA,GAAYA,KAAcA,GAAY,CAAC,ICV1C,ICAIG,GDAJ,OAAmBC,YAEnB,2keACKtM,MAAM,IACN70C,KAAKohD,GAAMA,EAAEnkD,WAAW,MEJ7B,OAAmBkkD,YAEnB,sCACKtM,MAAM,IACN70C,KAAKohD,GAAMA,EAAEnkD,WAAW,MDH7B,MAAMokD,GAAY,IAAIrH,IAAI,CACtB,CAAC,EAAG,OAEJ,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,KACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,KACN,CAAC,IAAK,MACN,CAAC,IAAK,KACN,CAAC,IAAK,MACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,MACN,CAAC,IAAK,KACN,CAAC,IAAK,MACN,CAAC,IAAK,KACN,CAAC,IAAK,MACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,OAKGsH,GAEmB,QAA/BJ,GAAK58C,OAAOg9C,qBAAkC,IAAPJ,GAAgBA,GAAK,SAAUK,GACnE,IAAI9/C,EAAS,GAOb,OANI8/C,EAAY,QACZA,GAAa,MACb9/C,GAAU6C,OAAOyD,aAAew5C,IAAc,GAAM,KAAS,OAC7DA,EAAY,MAAsB,KAAZA,GAE1B9/C,GAAU6C,OAAOyD,aAAaw5C,GACvB9/C,CACX,EAMO,SAAS+/C,GAAiBD,GAC7B,IAAIL,EACJ,OAAKK,GAAa,OAAUA,GAAa,OAAWA,EAAY,QACrD,MAEgC,QAAnCL,EAAKG,GAAUxH,IAAI0H,UAA+B,IAAPL,EAAgBA,EAAKK,CAC5E,CErDA,IAAIE,IACJ,SAAWA,GACPA,EAAUA,EAAe,IAAI,IAAM,MACnCA,EAAUA,EAAgB,KAAI,IAAM,OACpCA,EAAUA,EAAkB,OAAI,IAAM,SACtCA,EAAUA,EAAgB,KAAI,IAAM,OACpCA,EAAUA,EAAgB,KAAI,IAAM,OACpCA,EAAUA,EAAmB,QAAI,IAAM,UACvCA,EAAUA,EAAmB,QAAI,KAAO,UACxCA,EAAUA,EAAmB,QAAI,KAAO,UACxCA,EAAUA,EAAmB,QAAI,KAAO,UACxCA,EAAUA,EAAmB,QAAI,IAAM,UACvCA,EAAUA,EAAmB,QAAI,IAAM,UACvCA,EAAUA,EAAmB,QAAI,IAAM,SAC1C,CAbD,CAaGA,KAAcA,GAAY,CAAC,IAGvB,IAAIC,GA2BPC,GAQOC,GA7BX,SAASC,GAASnkD,GACd,OAAOA,GAAQ+jD,GAAUK,MAAQpkD,GAAQ+jD,GAAUM,IACvD,CACA,SAASC,GAAuBtkD,GAC5B,OAASA,GAAQ+jD,GAAUQ,SAAWvkD,GAAQ+jD,GAAUS,SACnDxkD,GAAQ+jD,GAAUU,SAAWzkD,GAAQ+jD,GAAUW,OACxD,CAYA,SAASC,GAA8B3kD,GACnC,OAAOA,IAAS+jD,GAAUa,QAZ9B,SAA6B5kD,GACzB,OAASA,GAAQ+jD,GAAUQ,SAAWvkD,GAAQ+jD,GAAUc,SACnD7kD,GAAQ+jD,GAAUU,SAAWzkD,GAAQ+jD,GAAUe,SAChDX,GAASnkD,EACjB,CAQwC+kD,CAAoB/kD,EAC5D,EAzBA,SAAWgkD,GACPA,EAAaA,EAA2B,aAAI,OAAS,eACrDA,EAAaA,EAA4B,cAAI,OAAS,gBACtDA,EAAaA,EAAyB,WAAI,KAAO,YACpD,CAJD,CAIGA,KAAiBA,GAAe,CAAC,IAuBpC,SAAWC,GACPA,EAAmBA,EAAgC,YAAI,GAAK,cAC5DA,EAAmBA,EAAiC,aAAI,GAAK,eAC7DA,EAAmBA,EAAmC,eAAI,GAAK,iBAC/DA,EAAmBA,EAA+B,WAAI,GAAK,aAC3DA,EAAmBA,EAAgC,YAAI,GAAK,aAC/D,CAND,CAMGA,KAAuBA,GAAqB,CAAC,IAEhD,SAAWC,GAEPA,EAAaA,EAAqB,OAAI,GAAK,SAE3CA,EAAaA,EAAqB,OAAI,GAAK,SAE3CA,EAAaA,EAAwB,UAAI,GAAK,WACjD,CAPD,CAOGA,KAAiBA,GAAe,CAAC,IAI7B,MAAMc,GACT,WAAAnpD,CAEAopD,EAUAC,EAEAC,GACI7mD,KAAK2mD,WAAaA,EAClB3mD,KAAK4mD,cAAgBA,EACrB5mD,KAAK6mD,OAASA,EAEd7mD,KAAKoU,MAAQuxC,GAAmBmB,YAEhC9mD,KAAKwT,SAAW,EAOhBxT,KAAKiC,OAAS,EAEdjC,KAAK+mD,UAAY,EAEjB/mD,KAAKgnD,OAAS,EAEdhnD,KAAKinD,WAAarB,GAAasB,MACnC,CAEA,WAAAC,CAAYF,GACRjnD,KAAKinD,WAAaA,EAClBjnD,KAAKoU,MAAQuxC,GAAmBmB,YAChC9mD,KAAKiC,OAAS,EACdjC,KAAK+mD,UAAY,EACjB/mD,KAAKgnD,OAAS,EACdhnD,KAAKwT,SAAW,CACpB,CAYA,KAAA9D,CAAM03C,EAAKp4C,GACP,OAAQhP,KAAKoU,OACT,KAAKuxC,GAAmBmB,YACpB,OAAIM,EAAInmD,WAAW+N,KAAYy2C,GAAU4B,KACrCrnD,KAAKoU,MAAQuxC,GAAmB2B,aAChCtnD,KAAKwT,UAAY,EACVxT,KAAKunD,kBAAkBH,EAAKp4C,EAAS,KAEhDhP,KAAKoU,MAAQuxC,GAAmB6B,YACzBxnD,KAAKynD,iBAAiBL,EAAKp4C,IAEtC,KAAK22C,GAAmB2B,aACpB,OAAOtnD,KAAKunD,kBAAkBH,EAAKp4C,GAEvC,KAAK22C,GAAmB+B,eACpB,OAAO1nD,KAAK2nD,oBAAoBP,EAAKp4C,GAEzC,KAAK22C,GAAmBiC,WACpB,OAAO5nD,KAAK6nD,gBAAgBT,EAAKp4C,GAErC,KAAK22C,GAAmB6B,YACpB,OAAOxnD,KAAKynD,iBAAiBL,EAAKp4C,GAG9C,CAUA,iBAAAu4C,CAAkBH,EAAKp4C,GACnB,OAAIA,GAAUo4C,EAAIzoD,QACN,GA7IC,GA+IRyoD,EAAInmD,WAAW+N,MAA4By2C,GAAUqC,SACtD9nD,KAAKoU,MAAQuxC,GAAmBiC,WAChC5nD,KAAKwT,UAAY,EACVxT,KAAK6nD,gBAAgBT,EAAKp4C,EAAS,KAE9ChP,KAAKoU,MAAQuxC,GAAmB+B,eACzB1nD,KAAK2nD,oBAAoBP,EAAKp4C,GACzC,CACA,kBAAA+4C,CAAmBX,EAAKhoD,EAAOC,EAAKmH,GAChC,GAAIpH,IAAUC,EAAK,CACf,MAAM2oD,EAAa3oD,EAAMD,EACzBY,KAAKiC,OACDjC,KAAKiC,OAASkoB,KAAK89B,IAAIzhD,EAAMwhD,GACzBvlC,SAAS2kC,EAAIc,OAAO9oD,EAAO4oD,GAAaxhD,GAChDxG,KAAKwT,UAAYw0C,CACrB,CACJ,CAUA,eAAAH,CAAgBT,EAAKp4C,GACjB,MAAMm5C,EAAWn5C,EACjB,KAAOA,EAASo4C,EAAIzoD,QAAQ,CACxB,MAAM6e,EAAO4pC,EAAInmD,WAAW+N,GAC5B,IAAI62C,GAASroC,KAASwoC,GAAuBxoC,GAKzC,OADAxd,KAAK+nD,mBAAmBX,EAAKe,EAAUn5C,EAAQ,IACxChP,KAAKooD,kBAAkB5qC,EAAM,GAJpCxO,GAAU,CAMlB,CAEA,OADAhP,KAAK+nD,mBAAmBX,EAAKe,EAAUn5C,EAAQ,KACvC,CACZ,CAUA,mBAAA24C,CAAoBP,EAAKp4C,GACrB,MAAMm5C,EAAWn5C,EACjB,KAAOA,EAASo4C,EAAIzoD,QAAQ,CACxB,MAAM6e,EAAO4pC,EAAInmD,WAAW+N,GAC5B,IAAI62C,GAASroC,GAKT,OADAxd,KAAK+nD,mBAAmBX,EAAKe,EAAUn5C,EAAQ,IACxChP,KAAKooD,kBAAkB5qC,EAAM,GAJpCxO,GAAU,CAMlB,CAEA,OADAhP,KAAK+nD,mBAAmBX,EAAKe,EAAUn5C,EAAQ,KACvC,CACZ,CAcA,iBAAAo5C,CAAkBC,EAAQC,GACtB,IAAIpD,EAEJ,GAAIllD,KAAKwT,UAAY80C,EAEjB,OADuB,QAAtBpD,EAAKllD,KAAK6mD,cAA2B,IAAP3B,GAAyBA,EAAGqD,2CAA2CvoD,KAAKwT,UACpG,EAGX,GAAI60C,IAAW5C,GAAU+C,KACrBxoD,KAAKwT,UAAY,OAEhB,GAAIxT,KAAKinD,aAAerB,GAAasB,OACtC,OAAO,EASX,OAPAlnD,KAAK4mD,cAAcpB,GAAiBxlD,KAAKiC,QAASjC,KAAKwT,UACnDxT,KAAK6mD,SACDwB,IAAW5C,GAAU+C,MACrBxoD,KAAK6mD,OAAO4B,0CAEhBzoD,KAAK6mD,OAAO6B,kCAAkC1oD,KAAKiC,SAEhDjC,KAAKwT,QAChB,CAUA,gBAAAi0C,CAAiBL,EAAKp4C,GAClB,MAAM,WAAE23C,GAAe3mD,KACvB,IAAIqR,EAAUs1C,EAAW3mD,KAAK+mD,WAE1B4B,GAAet3C,EAAUq0C,GAAakD,eAAiB,GAC3D,KAAO55C,EAASo4C,EAAIzoD,OAAQqQ,IAAUhP,KAAKgnD,SAAU,CACjD,MAAMxpC,EAAO4pC,EAAInmD,WAAW+N,GAE5B,GADAhP,KAAK+mD,UAAY8B,GAAgBlC,EAAYt1C,EAASrR,KAAK+mD,UAAY58B,KAAKhe,IAAI,EAAGw8C,GAAcnrC,GAC7Fxd,KAAK+mD,UAAY,EACjB,OAAuB,IAAhB/mD,KAAKiC,QAEPjC,KAAKinD,aAAerB,GAAakD,YAEb,IAAhBH,GAEGtC,GAA8B7oC,IACpC,EACAxd,KAAK+oD,+BAKf,GAHA13C,EAAUs1C,EAAW3mD,KAAK+mD,WAC1B4B,GAAet3C,EAAUq0C,GAAakD,eAAiB,GAEnC,IAAhBD,EAAmB,CAEnB,GAAInrC,IAASioC,GAAU+C,KACnB,OAAOxoD,KAAKgpD,oBAAoBhpD,KAAK+mD,UAAW4B,EAAa3oD,KAAKwT,SAAWxT,KAAKgnD,QAGlFhnD,KAAKinD,aAAerB,GAAasB,SACjClnD,KAAKiC,OAASjC,KAAK+mD,UACnB/mD,KAAKwT,UAAYxT,KAAKgnD,OACtBhnD,KAAKgnD,OAAS,EAEtB,CACJ,CACA,OAAQ,CACZ,CAMA,4BAAA+B,GACI,IAAI7D,EACJ,MAAM,OAAEjjD,EAAM,WAAE0kD,GAAe3mD,KACzB2oD,GAAehC,EAAW1kD,GAAUyjD,GAAakD,eAAiB,GAGxE,OAFA5oD,KAAKgpD,oBAAoB/mD,EAAQ0mD,EAAa3oD,KAAKwT,UAC5B,QAAtB0xC,EAAKllD,KAAK6mD,cAA2B,IAAP3B,GAAyBA,EAAGuD,0CACpDzoD,KAAKwT,QAChB,CAUA,mBAAAw1C,CAAoB/mD,EAAQ0mD,EAAan1C,GACrC,MAAM,WAAEmzC,GAAe3mD,KAQvB,OAPAA,KAAK4mD,cAA8B,IAAhB+B,EACbhC,EAAW1kD,IAAWyjD,GAAakD,aACnCjC,EAAW1kD,EAAS,GAAIuR,GACV,IAAhBm1C,GAEA3oD,KAAK4mD,cAAcD,EAAW1kD,EAAS,GAAIuR,GAExCA,CACX,CAQA,GAAAnU,GACI,IAAI6lD,EACJ,OAAQllD,KAAKoU,OACT,KAAKuxC,GAAmB6B,YAEpB,OAAuB,IAAhBxnD,KAAKiC,QACPjC,KAAKinD,aAAerB,GAAakD,WAC9B9oD,KAAKiC,SAAWjC,KAAK+mD,UAEvB,EADA/mD,KAAK+oD,+BAIf,KAAKpD,GAAmB+B,eACpB,OAAO1nD,KAAKooD,kBAAkB,EAAG,GAErC,KAAKzC,GAAmBiC,WACpB,OAAO5nD,KAAKooD,kBAAkB,EAAG,GAErC,KAAKzC,GAAmB2B,aAEpB,OADuB,QAAtBpC,EAAKllD,KAAK6mD,cAA2B,IAAP3B,GAAyBA,EAAGqD,2CAA2CvoD,KAAKwT,UACpG,EAEX,KAAKmyC,GAAmBmB,YAEpB,OAAO,EAGnB,EAQJ,SAASmC,GAAWtC,GAChB,IAAIuC,EAAM,GACV,MAAMC,EAAU,IAAIzC,GAAcC,GAAaS,GAAS8B,GAAO5D,GAAc8B,KAC7E,OAAO,SAAwBA,EAAKH,GAChC,IAAIh9B,EAAY,EACZjb,EAAS,EACb,MAAQA,EAASo4C,EAAItnD,QAAQ,IAAKkP,KAAY,GAAG,CAC7Ck6C,GAAO9B,EAAIrnD,MAAMkqB,EAAWjb,GAC5Bm6C,EAAQhC,YAAYF,GACpB,MAAMmC,EAAMD,EAAQz5C,MAAM03C,EAE1Bp4C,EAAS,GACT,GAAIo6C,EAAM,EAAG,CACTn/B,EAAYjb,EAASm6C,EAAQ9pD,MAC7B,KACJ,CACA4qB,EAAYjb,EAASo6C,EAErBp6C,EAAiB,IAARo6C,EAAYn/B,EAAY,EAAIA,CACzC,CACA,MAAMhoB,EAASinD,EAAM9B,EAAIrnD,MAAMkqB,GAG/B,OADAi/B,EAAM,GACCjnD,CACX,CACJ,CAWO,SAAS4mD,GAAgBlC,EAAYt1C,EAASg4C,EAAS7rC,GAC1D,MAAM8rC,GAAej4C,EAAUq0C,GAAa6D,gBAAkB,EACxDC,EAAan4C,EAAUq0C,GAAa+D,WAE1C,GAAoB,IAAhBH,EACA,OAAsB,IAAfE,GAAoBhsC,IAASgsC,EAAaH,GAAW,EAGhE,GAAIG,EAAY,CACZ,MAAM1rD,EAAQ0f,EAAOgsC,EACrB,OAAO1rD,EAAQ,GAAKA,GAASwrD,GACtB,EACD3C,EAAW0C,EAAUvrD,GAAS,CACxC,CAGA,IAAI4rD,EAAKL,EACLM,EAAKD,EAAKJ,EAAc,EAC5B,KAAOI,GAAMC,GAAI,CACb,MAAMC,EAAOF,EAAKC,IAAQ,EACpBE,EAASlD,EAAWiD,GAC1B,GAAIC,EAASrsC,EACTksC,EAAKE,EAAM,MAEV,MAAIC,EAASrsC,GAId,OAAOmpC,EAAWiD,EAAMN,GAHxBK,EAAKC,EAAM,CAIf,CACJ,CACA,OAAQ,CACZ,CACoBX,GAAW,IACZA,GAAW,ICxcvB,IAAI,GASAa,GAgBAC,GAMAC,GAkIAC,IAhKX,SAAWC,GACPA,EAAS,KAAI,+BACbA,EAAW,OAAI,qCACfA,EAAQ,IAAI,6BACZA,EAAU,MAAI,+BACdA,EAAQ,IAAI,uCACZA,EAAU,MAAI,+BACjB,CAPD,CAOG,GAAK,KAAO,GAAK,CAAC,IAErB,SAAWJ,GACPA,EAAY,KAAI,OAChBA,EAAc,OAAI,SAClBA,EAAgB,SAAI,WACpBA,EAAc,OAAI,SAClBA,EAAY,KAAI,OAChBA,EAAa,MAAI,QACjBA,EAAY,KAAI,OAChBA,EAAY,KAAI,MACnB,CATD,CASGA,GAAQA,KAAUA,GAAQ,CAAC,IAO9B,SAAWC,GACPA,EAAyB,UAAI,YAC7BA,EAAsB,OAAI,SAC1BA,EAA8B,eAAI,gBACrC,CAJD,CAIGA,GAAgBA,KAAkBA,GAAgB,CAAC,IAEtD,SAAWC,GACPA,EAAa,EAAI,IACjBA,EAAmB,QAAI,UACvBA,EAA0B,eAAI,iBAC9BA,EAAkB,OAAI,SACtBA,EAAgB,KAAI,OACpBA,EAAmB,QAAI,UACvBA,EAAiB,MAAI,QACrBA,EAAa,EAAI,IACjBA,EAAgB,KAAI,OACpBA,EAAoB,SAAI,WACxBA,EAAmB,QAAI,UACvBA,EAAe,IAAI,MACnBA,EAAsB,WAAI,aAC1BA,EAAgB,KAAI,OACpBA,EAAc,GAAI,KAClBA,EAAkB,OAAI,SACtBA,EAAmB,QAAI,UACvBA,EAAkB,OAAI,SACtBA,EAAgB,KAAI,OACpBA,EAAe,IAAI,MACnBA,EAAoB,SAAI,WACxBA,EAAc,GAAI,KAClBA,EAAgB,KAAI,OACpBA,EAAmB,QAAI,UACvBA,EAAkB,OAAI,SACtBA,EAAe,IAAI,MACnBA,EAAe,IAAI,MACnBA,EAAc,GAAI,KAClBA,EAAc,GAAI,KAClBA,EAAc,GAAI,KAClBA,EAAiB,MAAI,QACrBA,EAAoB,SAAI,WACxBA,EAAsB,WAAI,aAC1BA,EAAkB,OAAI,SACtBA,EAAgB,KAAI,OACpBA,EAAkB,OAAI,SACtBA,EAA0B,eAAI,gBAC9BA,EAAgB,KAAI,OACpBA,EAAiB,MAAI,QACrBA,EAAoB,SAAI,WACxBA,EAAc,GAAI,KAClBA,EAAc,GAAI,KAClBA,EAAc,GAAI,KAClBA,EAAc,GAAI,KAClBA,EAAc,GAAI,KAClBA,EAAc,GAAI,KAClBA,EAAgB,KAAI,OACpBA,EAAkB,OAAI,SACtBA,EAAkB,OAAI,SACtBA,EAAc,GAAI,KAClBA,EAAgB,KAAI,OACpBA,EAAa,EAAI,IACjBA,EAAe,IAAI,MACnBA,EAAiB,MAAI,QACrBA,EAAiB,MAAI,QACrBA,EAAkB,OAAI,SACtBA,EAAkB,OAAI,SACtBA,EAAiB,MAAI,QACrBA,EAAc,GAAI,KAClBA,EAAgB,KAAI,OACpBA,EAAmB,QAAI,UACvBA,EAAgB,KAAI,OACpBA,EAAsB,WAAI,aAC1BA,EAAmB,QAAI,UACvBA,EAAgB,KAAI,OACpBA,EAAgB,KAAI,OACpBA,EAAgB,KAAI,OACpBA,EAAkB,OAAI,SACtBA,EAAc,GAAI,KAClBA,EAAc,GAAI,KAClBA,EAAc,GAAI,KAClBA,EAAc,GAAI,KAClBA,EAAiB,MAAI,QACrBA,EAAe,IAAI,MACnBA,EAAgB,KAAI,OACpBA,EAAoB,SAAI,WACxBA,EAAmB,QAAI,UACvBA,EAAoB,SAAI,WACxBA,EAAkB,OAAI,SACtBA,EAAc,GAAI,KAClBA,EAAoB,SAAI,WACxBA,EAAkB,OAAI,SACtBA,EAAa,EAAI,IACjBA,EAAiB,MAAI,QACrBA,EAAqB,UAAI,YACzBA,EAAe,IAAI,MACnBA,EAAc,GAAI,KAClBA,EAAc,GAAI,KAClBA,EAAc,GAAI,KAClBA,EAAe,IAAI,MACnBA,EAAgB,KAAI,OACpBA,EAAa,EAAI,IACjBA,EAAkB,OAAI,SACtBA,EAAmB,QAAI,UACvBA,EAAkB,OAAI,SACtBA,EAAkB,OAAI,SACtBA,EAAiB,MAAI,QACrBA,EAAgB,KAAI,OACpBA,EAAkB,OAAI,SACtBA,EAAkB,OAAI,SACtBA,EAAiB,MAAI,QACrBA,EAAe,IAAI,MACnBA,EAAmB,QAAI,UACvBA,EAAe,IAAI,MACnBA,EAAiB,MAAI,QACrBA,EAAiB,MAAI,QACrBA,EAAoB,SAAI,WACxBA,EAAoB,SAAI,WACxBA,EAAiB,MAAI,QACrBA,EAAc,GAAI,KAClBA,EAAc,GAAI,KAClBA,EAAiB,MAAI,QACrBA,EAAiB,MAAI,QACrBA,EAAc,GAAI,KAClBA,EAAiB,MAAI,QACrBA,EAAc,GAAI,KAClBA,EAAa,EAAI,IACjBA,EAAc,GAAI,KAClBA,EAAe,IAAI,MACnBA,EAAe,IAAI,MACnBA,EAAe,IAAI,MACnBA,EAAe,IAAI,KACtB,CA3HD,CA2HGA,GAAYA,KAAcA,GAAY,CAAC,IAO1C,SAAWC,GACPA,EAAOA,EAAgB,QAAI,GAAK,UAChCA,EAAOA,EAAU,EAAI,GAAK,IAC1BA,EAAOA,EAAgB,QAAI,GAAK,UAChCA,EAAOA,EAAuB,eAAI,GAAK,iBACvCA,EAAOA,EAAe,OAAI,GAAK,SAC/BA,EAAOA,EAAa,KAAI,GAAK,OAC7BA,EAAOA,EAAgB,QAAI,GAAK,UAChCA,EAAOA,EAAc,MAAI,GAAK,QAC9BA,EAAOA,EAAU,EAAI,GAAK,IAC1BA,EAAOA,EAAa,KAAI,GAAK,OAC7BA,EAAOA,EAAiB,SAAI,IAAM,WAClCA,EAAOA,EAAgB,QAAI,IAAM,UACjCA,EAAOA,EAAY,IAAI,IAAM,MAC7BA,EAAOA,EAAmB,WAAI,IAAM,aACpCA,EAAOA,EAAa,KAAI,IAAM,OAC9BA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAe,OAAI,IAAM,SAChCA,EAAOA,EAAgB,QAAI,IAAM,UACjCA,EAAOA,EAAe,OAAI,IAAM,SAChCA,EAAOA,EAAa,KAAI,IAAM,OAC9BA,EAAOA,EAAY,IAAI,IAAM,MAC7BA,EAAOA,EAAiB,SAAI,IAAM,WAClCA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAa,KAAI,IAAM,OAC9BA,EAAOA,EAAgB,QAAI,IAAM,UACjCA,EAAOA,EAAe,OAAI,IAAM,SAChCA,EAAOA,EAAY,IAAI,IAAM,MAC7BA,EAAOA,EAAY,IAAI,IAAM,MAC7BA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAc,MAAI,IAAM,QAC/BA,EAAOA,EAAiB,SAAI,IAAM,WAClCA,EAAOA,EAAmB,WAAI,IAAM,aACpCA,EAAOA,EAAe,OAAI,IAAM,SAChCA,EAAOA,EAAa,KAAI,IAAM,OAC9BA,EAAOA,EAAe,OAAI,IAAM,SAChCA,EAAOA,EAAuB,eAAI,IAAM,iBACxCA,EAAOA,EAAa,KAAI,IAAM,OAC9BA,EAAOA,EAAc,MAAI,IAAM,QAC/BA,EAAOA,EAAiB,SAAI,IAAM,WAClCA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAa,KAAI,IAAM,OAC9BA,EAAOA,EAAe,OAAI,IAAM,SAChCA,EAAOA,EAAe,OAAI,IAAM,SAChCA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAa,KAAI,IAAM,OAC9BA,EAAOA,EAAU,EAAI,IAAM,IAC3BA,EAAOA,EAAY,IAAI,IAAM,MAC7BA,EAAOA,EAAc,MAAI,IAAM,QAC/BA,EAAOA,EAAc,MAAI,IAAM,QAC/BA,EAAOA,EAAe,OAAI,IAAM,SAChCA,EAAOA,EAAe,OAAI,IAAM,SAChCA,EAAOA,EAAc,MAAI,IAAM,QAC/BA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAa,KAAI,IAAM,OAC9BA,EAAOA,EAAgB,QAAI,IAAM,UACjCA,EAAOA,EAAa,KAAI,IAAM,OAC9BA,EAAOA,EAAmB,WAAI,IAAM,aACpCA,EAAOA,EAAgB,QAAI,IAAM,UACjCA,EAAOA,EAAa,KAAI,IAAM,OAC9BA,EAAOA,EAAa,KAAI,IAAM,OAC9BA,EAAOA,EAAa,KAAI,IAAM,OAC9BA,EAAOA,EAAe,OAAI,IAAM,SAChCA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAc,MAAI,IAAM,QAC/BA,EAAOA,EAAY,IAAI,IAAM,MAC7BA,EAAOA,EAAa,KAAI,IAAM,OAC9BA,EAAOA,EAAiB,SAAI,IAAM,WAClCA,EAAOA,EAAgB,QAAI,IAAM,UACjCA,EAAOA,EAAiB,SAAI,IAAM,WAClCA,EAAOA,EAAe,OAAI,IAAM,SAChCA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAiB,SAAI,IAAM,WAClCA,EAAOA,EAAe,OAAI,IAAM,SAChCA,EAAOA,EAAU,EAAI,IAAM,IAC3BA,EAAOA,EAAc,MAAI,IAAM,QAC/BA,EAAOA,EAAkB,UAAI,IAAM,YACnCA,EAAOA,EAAY,IAAI,IAAM,MAC7BA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAW,GAAI,IAAM,KAC5BA,EAAOA,EAAY,IAAI,IAAM,MAC7BA,EAAOA,EAAa,KAAI,IAAM,OAC9BA,EAAOA,EAAU,EAAI,IAAM,IAC3BA,EAAOA,EAAe,OAAI,IAAM,SAChCA,EAAOA,EAAgB,QAAI,IAAM,UACjCA,EAAOA,EAAe,OAAI,IAAM,SAChCA,EAAOA,EAAe,OAAI,IAAM,SAChCA,EAAOA,EAAc,MAAI,IAAM,QAC/BA,EAAOA,EAAa,KAAI,IAAM,OAC9BA,EAAOA,EAAe,OAAI,IAAM,SAChCA,EAAOA,EAAe,OAAI,KAAO,SACjCA,EAAOA,EAAc,MAAI,KAAO,QAChCA,EAAOA,EAAY,IAAI,KAAO,MAC9BA,EAAOA,EAAgB,QAAI,KAAO,UAClCA,EAAOA,EAAY,IAAI,KAAO,MAC9BA,EAAOA,EAAc,MAAI,KAAO,QAChCA,EAAOA,EAAc,MAAI,KAAO,QAChCA,EAAOA,EAAiB,SAAI,KAAO,WACnCA,EAAOA,EAAiB,SAAI,KAAO,WACnCA,EAAOA,EAAc,MAAI,KAAO,QAChCA,EAAOA,EAAW,GAAI,KAAO,KAC7BA,EAAOA,EAAW,GAAI,KAAO,KAC7BA,EAAOA,EAAc,MAAI,KAAO,QAChCA,EAAOA,EAAc,MAAI,KAAO,QAChCA,EAAOA,EAAW,GAAI,KAAO,KAC7BA,EAAOA,EAAc,MAAI,KAAO,QAChCA,EAAOA,EAAW,GAAI,KAAO,KAC7BA,EAAOA,EAAU,EAAI,KAAO,IAC5BA,EAAOA,EAAW,GAAI,KAAO,KAC7BA,EAAOA,EAAY,IAAI,KAAO,MAC9BA,EAAOA,EAAY,IAAI,KAAO,MAC9BA,EAAOA,EAAY,IAAI,KAAO,MAC9BA,EAAOA,EAAY,IAAI,KAAO,KACjC,CA5HD,CA4HGA,GAASA,KAAWA,GAAS,CAAC,IACjC,MAAME,GAAiB,IAAInM,IAAI,CAC3B,CAACgM,GAAUI,EAAGH,GAAOG,GACrB,CAACJ,GAAUK,QAASJ,GAAOI,SAC3B,CAACL,GAAUM,eAAgBL,GAAOK,gBAClC,CAACN,GAAUO,OAAQN,GAAOM,QAC1B,CAACP,GAAUQ,KAAMP,GAAOO,MACxB,CAACR,GAAUS,QAASR,GAAOQ,SAC3B,CAACT,GAAUU,MAAOT,GAAOS,OACzB,CAACV,GAAUW,EAAGV,GAAOU,GACrB,CAACX,GAAUY,KAAMX,GAAOW,MACxB,CAACZ,GAAUa,SAAUZ,GAAOY,UAC5B,CAACb,GAAUc,QAASb,GAAOa,SAC3B,CAACd,GAAUe,IAAKd,GAAOc,KACvB,CAACf,GAAUgB,WAAYf,GAAOe,YAC9B,CAAChB,GAAUiB,KAAMhB,GAAOgB,MACxB,CAACjB,GAAUkB,GAAIjB,GAAOiB,IACtB,CAAClB,GAAUmB,OAAQlB,GAAOkB,QAC1B,CAACnB,GAAUoB,QAASnB,GAAOmB,SAC3B,CAACpB,GAAUqB,OAAQpB,GAAOoB,QAC1B,CAACrB,GAAUsB,KAAMrB,GAAOqB,MACxB,CAACtB,GAAUuB,IAAKtB,GAAOsB,KACvB,CAACvB,GAAUwB,SAAUvB,GAAOuB,UAC5B,CAACxB,GAAUyB,GAAIxB,GAAOwB,IACtB,CAACzB,GAAU0B,KAAMzB,GAAOyB,MACxB,CAAC1B,GAAU2B,QAAS1B,GAAO0B,SAC3B,CAAC3B,GAAU4B,OAAQ3B,GAAO2B,QAC1B,CAAC5B,GAAU6B,IAAK5B,GAAO4B,KACvB,CAAC7B,GAAU8B,IAAK7B,GAAO6B,KACvB,CAAC9B,GAAU+B,GAAI9B,GAAO8B,IACtB,CAAC/B,GAAUgC,GAAI/B,GAAO+B,IACtB,CAAChC,GAAUiC,GAAIhC,GAAOgC,IACtB,CAACjC,GAAUkC,MAAOjC,GAAOiC,OACzB,CAAClC,GAAUmC,SAAUlC,GAAOkC,UAC5B,CAACnC,GAAUoC,WAAYnC,GAAOmC,YAC9B,CAACpC,GAAUqC,OAAQpC,GAAOoC,QAC1B,CAACrC,GAAUsC,KAAMrC,GAAOqC,MACxB,CAACtC,GAAUuC,OAAQtC,GAAOsC,QAC1B,CAACvC,GAAUwC,eAAgBvC,GAAOuC,gBAClC,CAACxC,GAAUyC,KAAMxC,GAAOwC,MACxB,CAACzC,GAAU0C,MAAOzC,GAAOyC,OACzB,CAAC1C,GAAU2C,SAAU1C,GAAO0C,UAC5B,CAAC3C,GAAU4C,GAAI3C,GAAO2C,IACtB,CAAC5C,GAAU6C,GAAI5C,GAAO4C,IACtB,CAAC7C,GAAU8C,GAAI7C,GAAO6C,IACtB,CAAC9C,GAAU+C,GAAI9C,GAAO8C,IACtB,CAAC/C,GAAUgD,GAAI/C,GAAO+C,IACtB,CAAChD,GAAUiD,GAAIhD,GAAOgD,IACtB,CAACjD,GAAUkD,KAAMjD,GAAOiD,MACxB,CAAClD,GAAUmD,OAAQlD,GAAOkD,QAC1B,CAACnD,GAAUoD,OAAQnD,GAAOmD,QAC1B,CAACpD,GAAUqD,GAAIpD,GAAOoD,IACtB,CAACrD,GAAUsD,KAAMrD,GAAOqD,MACxB,CAACtD,GAAUuD,EAAGtD,GAAOsD,GACrB,CAACvD,GAAUwD,IAAKvD,GAAOuD,KACvB,CAACxD,GAAUyD,MAAOxD,GAAOwD,OACzB,CAACzD,GAAU0D,MAAOzD,GAAOyD,OACzB,CAAC1D,GAAU2D,OAAQ1D,GAAO0D,QAC1B,CAAC3D,GAAU4D,OAAQ3D,GAAO2D,QAC1B,CAAC5D,GAAU6D,MAAO5D,GAAO4D,OACzB,CAAC7D,GAAU8D,GAAI7D,GAAO6D,IACtB,CAAC9D,GAAU+D,KAAM9D,GAAO8D,MACxB,CAAC/D,GAAUgE,QAAS/D,GAAO+D,SAC3B,CAAChE,GAAUiE,KAAMhE,GAAOgE,MACxB,CAACjE,GAAUkE,WAAYjE,GAAOiE,YAC9B,CAAClE,GAAUmE,QAASlE,GAAOkE,SAC3B,CAACnE,GAAUoE,KAAMnE,GAAOmE,MACxB,CAACpE,GAAUqE,KAAMpE,GAAOoE,MACxB,CAACrE,GAAUsE,KAAMrE,GAAOqE,MACxB,CAACtE,GAAUuE,OAAQtE,GAAOsE,QAC1B,CAACvE,GAAUwE,GAAIvE,GAAOuE,IACtB,CAACxE,GAAUyE,GAAIxE,GAAOwE,IACtB,CAACzE,GAAU0E,GAAIzE,GAAOyE,IACtB,CAAC1E,GAAU2E,GAAI1E,GAAO0E,IACtB,CAAC3E,GAAU4E,MAAO3E,GAAO2E,OACzB,CAAC5E,GAAU6E,IAAK5E,GAAO4E,KACvB,CAAC7E,GAAU8E,KAAM7E,GAAO6E,MACxB,CAAC9E,GAAU+E,SAAU9E,GAAO8E,UAC5B,CAAC/E,GAAUgF,QAAS/E,GAAO+E,SAC3B,CAAChF,GAAUiF,SAAUhF,GAAOgF,UAC5B,CAACjF,GAAUkF,OAAQjF,GAAOiF,QAC1B,CAAClF,GAAUmF,GAAIlF,GAAOkF,IACtB,CAACnF,GAAUoF,SAAUnF,GAAOmF,UAC5B,CAACpF,GAAUqF,OAAQpF,GAAOoF,QAC1B,CAACrF,GAAUsF,EAAGrF,GAAOqF,GACrB,CAACtF,GAAUuF,MAAOtF,GAAOsF,OACzB,CAACvF,GAAUwF,UAAWvF,GAAOuF,WAC7B,CAACxF,GAAUyF,IAAKxF,GAAOwF,KACvB,CAACzF,GAAU0F,GAAIzF,GAAOyF,IACtB,CAAC1F,GAAU2F,GAAI1F,GAAO0F,IACtB,CAAC3F,GAAU4F,GAAI3F,GAAO2F,IACtB,CAAC5F,GAAU6F,IAAK5F,GAAO4F,KACvB,CAAC7F,GAAU8F,KAAM7F,GAAO6F,MACxB,CAAC9F,GAAU+F,EAAG9F,GAAO8F,GACrB,CAAC/F,GAAUgG,OAAQ/F,GAAO+F,QAC1B,CAAChG,GAAUiG,QAAShG,GAAOgG,SAC3B,CAACjG,GAAUkG,OAAQjG,GAAOiG,QAC1B,CAAClG,GAAUmG,OAAQlG,GAAOkG,QAC1B,CAACnG,GAAUoG,MAAOnG,GAAOmG,OACzB,CAACpG,GAAUqG,KAAMpG,GAAOoG,MACxB,CAACrG,GAAUsG,OAAQrG,GAAOqG,QAC1B,CAACtG,GAAUuG,OAAQtG,GAAOsG,QAC1B,CAACvG,GAAUwG,MAAOvG,GAAOuG,OACzB,CAACxG,GAAUyG,IAAKxG,GAAOwG,KACvB,CAACzG,GAAU0G,QAASzG,GAAOyG,SAC3B,CAAC1G,GAAU2G,IAAK1G,GAAO0G,KACvB,CAAC3G,GAAU4G,MAAO3G,GAAO2G,OACzB,CAAC5G,GAAU6G,MAAO5G,GAAO4G,OACzB,CAAC7G,GAAU8G,SAAU7G,GAAO6G,UAC5B,CAAC9G,GAAU+G,SAAU9G,GAAO8G,UAC5B,CAAC/G,GAAUgH,MAAO/G,GAAO+G,OACzB,CAAChH,GAAUiH,GAAIhH,GAAOgH,IACtB,CAACjH,GAAUkH,GAAIjH,GAAOiH,IACtB,CAAClH,GAAUmH,MAAOlH,GAAOkH,OACzB,CAACnH,GAAUoH,MAAOnH,GAAOmH,OACzB,CAACpH,GAAUqH,GAAIpH,GAAOoH,IACtB,CAACrH,GAAUsH,MAAOrH,GAAOqH,OACzB,CAACtH,GAAUuH,GAAItH,GAAOsH,IACtB,CAACvH,GAAUwH,EAAGvH,GAAOuH,GACrB,CAACxH,GAAUyH,GAAIxH,GAAOwH,IACtB,CAACzH,GAAU0H,IAAKzH,GAAOyH,KACvB,CAAC1H,GAAU2H,IAAK1H,GAAO0H,KACvB,CAAC3H,GAAU4H,IAAK3H,GAAO2H,KACvB,CAAC5H,GAAU6H,IAAK5H,GAAO4H,OAEpB,SAASC,GAASr3C,GACrB,IAAIyqC,EACJ,OAA8C,QAAtCA,EAAKiF,GAAetM,IAAIpjC,UAA6B,IAAPyqC,EAAgBA,EAAK+E,GAAO8H,OACtF,CACA,MAAM,GAAI9H,GACG+H,GAAmB,CAC5B,CAAC,GAAG1E,MAAO,IAAI/T,IAAI,CACf,GAAE8Q,QACF,GAAEE,OACF,GAAEC,KACF,GAAEC,QACF,GAAEC,MACF,GAAEE,KACF,GAAEC,SACF,GAAEC,QACF,GAAEE,WACF,GAAEC,KACF,GAAEC,GACF,GAAEC,OACF,GAAEC,QACF,GAAEC,OACF,GAAEE,IACF,GAAEC,SACF,GAAEC,GACF,GAAEE,QACF,GAAEE,IACF,GAAEC,IACF,GAAEC,GACF,GAAEC,GACF,GAAEE,MACF,GAAEC,SACF,GAAEC,WACF,GAAEC,OACF,GAAEE,OACF,GAAEE,KACF,GAAEC,MACF,GAAEC,SACF,GAAEC,GACF,GAAEC,GACF,GAAEC,GACF,GAAEC,GACF,GAAEC,GACF,GAAEC,GACF,GAAEC,KACF,GAAEC,OACF,GAAEC,OACF,GAAEC,GACF,GAAEC,KACF,GAAEK,OACF,GAAEH,IACF,GAAEE,MACF,GAAEI,GACF,GAAEC,KACF,GAAEC,QACF,GAAEC,KACF,GAAEE,QACF,GAAEE,KACF,GAAEC,KACF,GAAEO,IACF,GAAEG,QACF,GAAED,SACF,GAAEE,SACF,GAAEC,OACF,GAAEC,GACF,GAAEG,EACF,GAAEC,MACF,GAAEC,UACF,GAAEC,IACF,GAAEO,OACF,GAAEC,QACF,GAAEC,OACF,GAAEC,OACF,GAAEK,MACF,GAAEE,QACF,GAAEE,MACF,GAAEC,MACF,GAAEI,GACF,GAAEH,SACF,GAAEC,SACF,GAAEC,MACF,GAAEE,GACF,GAAEC,MACF,GAAEC,MACF,GAAEC,GACF,GAAEC,MACF,GAAEG,GACF,GAAEG,IACF,GAAEC,MAEN,CAAC,GAAGI,QAAS,IAAI1Y,IAAI,CAAC,GAAEiV,GAAI,GAAEC,GAAI,GAAEC,GAAI,GAAEC,GAAI,GAAEC,MAAO,GAAEtE,iBACzD,CAAC,GAAGoH,KAAM,IAAInY,IAAI,CAAC,GAAE6X,MAAO,GAAE5E,eAAgB,GAAEd,OAChD,CAAC,GAAGwG,OAAQ,IAAI3Y,IAChB,CAAC,GAAG4Y,KAAM,IAAI5Y,IACd,CAAC,GAAG6Y,OAAQ,IAAI7Y,KAEb,SAAS8Y,GAAiBC,GAC7B,OAAOA,IAAO,GAAE1F,IAAM0F,IAAO,GAAEzF,IAAMyF,IAAO,GAAExF,IAAMwF,IAAO,GAAEvF,IAAMuF,IAAO,GAAEtF,IAAMsF,IAAO,GAAErF,EAC/F,CACuB,IAAI1T,IAAI,CAC3ByQ,GAAUwG,MACVxG,GAAUgG,OACVhG,GAAU6H,IACV7H,GAAU2D,OACV3D,GAAUgF,QACVhF,GAAU+E,SACV/E,GAAUwF,YC9fd,MAAM+C,GAAqC,IAAIvU,IAAI,CAC/C,CAAC,IAAM,MACP,CAAC,IAAM,MACP,CAAC,IAAM,KACP,CAAC,IAAM,MACP,CAAC,IAAM,MACP,CAAC,IAAM,MACP,CAAC,IAAM,MACP,CAAC,IAAM,KACP,CAAC,IAAM,MACP,CAAC,IAAM,KACP,CAAC,IAAM,MACP,CAAC,IAAM,KACP,CAAC,IAAM,KACP,CAAC,IAAM,MACP,CAAC,IAAM,MACP,CAAC,IAAM,MACP,CAAC,IAAM,MACP,CAAC,IAAM,MACP,CAAC,IAAM,MACP,CAAC,IAAM,MACP,CAAC,IAAM,KACP,CAAC,IAAM,MACP,CAAC,IAAM,KACP,CAAC,IAAM,MACP,CAAC,IAAM,KACP,CAAC,IAAM,KACP,CAAC,IAAM,OAGX,IAAIwU,IACJ,SAAWA,GACPA,EAAMA,EAAY,KAAI,GAAK,OAC3BA,EAAMA,EAAc,OAAI,GAAK,SAC7BA,EAAMA,EAAe,QAAI,GAAK,UAC9BA,EAAMA,EAAmB,YAAI,GAAK,cAClCA,EAAMA,EAAiB,UAAI,GAAK,YAChCA,EAAMA,EAAgB,SAAI,GAAK,WAC/BA,EAAMA,EAAoB,aAAI,GAAK,eACnCA,EAAMA,EAAgB,SAAI,GAAK,WAC/BA,EAAMA,EAA6B,sBAAI,GAAK,wBAC5CA,EAAMA,EAA2B,oBAAI,GAAK,sBAC1CA,EAAMA,EAA2B,oBAAI,IAAM,sBAC3CA,EAAMA,EAA8B,uBAAI,IAAM,yBAC9CA,EAAMA,EAA4B,qBAAI,IAAM,uBAC5CA,EAAMA,EAA4B,qBAAI,IAAM,uBAC5CA,EAAMA,EAAkC,2BAAI,IAAM,6BAClDA,EAAMA,EAAgC,yBAAI,IAAM,2BAChDA,EAAMA,EAAgC,yBAAI,IAAM,2BAChDA,EAAMA,EAAgC,yBAAI,IAAM,2BAChDA,EAAMA,EAAqC,8BAAI,IAAM,gCACrDA,EAAMA,EAA2B,oBAAI,IAAM,sBAC3CA,EAAMA,EAAgC,yBAAI,IAAM,2BAChDA,EAAMA,EAAqC,8BAAI,IAAM,gCACrDA,EAAMA,EAA0C,mCAAI,IAAM,qCAC1DA,EAAMA,EAAwC,iCAAI,IAAM,mCACxDA,EAAMA,EAAwC,iCAAI,IAAM,mCACxDA,EAAMA,EAAuC,gCAAI,IAAM,kCACvDA,EAAMA,EAAkC,2BAAI,IAAM,6BAClDA,EAAMA,EAAuC,gCAAI,IAAM,kCACvDA,EAAMA,EAA4C,qCAAI,IAAM,uCAC5DA,EAAMA,EAAiD,0CAAI,IAAM,4CACjEA,EAAMA,EAAqC,8BAAI,IAAM,gCACrDA,EAAMA,EAA6B,sBAAI,IAAM,wBAC7CA,EAAMA,EAAsB,eAAI,IAAM,iBACtCA,EAAMA,EAA4B,qBAAI,IAAM,uBAC5CA,EAAMA,EAA8B,uBAAI,IAAM,yBAC9CA,EAAMA,EAAqC,8BAAI,IAAM,gCACrDA,EAAMA,EAAqC,8BAAI,IAAM,gCACrDA,EAAMA,EAAgC,yBAAI,IAAM,2BAChDA,EAAMA,EAAoC,6BAAI,IAAM,+BACpDA,EAAMA,EAA8B,uBAAI,IAAM,yBAC9CA,EAAMA,EAAqB,cAAI,IAAM,gBACrCA,EAAMA,EAA+B,wBAAI,IAAM,0BAC/CA,EAAMA,EAAqB,cAAI,IAAM,gBACrCA,EAAMA,EAA0B,mBAAI,IAAM,qBAC1CA,EAAMA,EAAe,QAAI,IAAM,UAC/BA,EAAMA,EAA8B,uBAAI,IAAM,yBAC9CA,EAAMA,EAAmC,4BAAI,IAAM,8BACnDA,EAAMA,EAAwC,iCAAI,IAAM,mCACxDA,EAAMA,EAA6C,sCAAI,IAAM,wCAC7DA,EAAMA,EAAwB,iBAAI,IAAM,mBACxCA,EAAMA,EAAmB,YAAI,IAAM,cACnCA,EAAMA,EAAwB,iBAAI,IAAM,mBACxCA,EAAMA,EAAe,QAAI,IAAM,UAC/BA,EAAMA,EAA2B,oBAAI,IAAM,sBAC3CA,EAAMA,EAAoB,aAAI,IAAM,eACpCA,EAAMA,EAA0B,mBAAI,IAAM,qBAC1CA,EAAMA,EAAoC,6BAAI,IAAM,+BACpDA,EAAMA,EAAwC,iCAAI,IAAM,mCACxDA,EAAMA,EAA+C,wCAAI,IAAM,0CAC/DA,EAAMA,EAA+C,wCAAI,IAAM,0CAC/DA,EAAMA,EAAuC,gCAAI,IAAM,kCACvDA,EAAMA,EAAqD,8CAAI,IAAM,gDACrEA,EAAMA,EAAoC,6BAAI,IAAM,+BACpDA,EAAMA,EAAwC,iCAAI,IAAM,mCACxDA,EAAMA,EAA+C,wCAAI,IAAM,0CAC/DA,EAAMA,EAA+C,wCAAI,IAAM,0CAC/DA,EAAMA,EAAuC,gCAAI,IAAM,kCACvDA,EAAMA,EAAqB,cAAI,IAAM,gBACrCA,EAAMA,EAAqB,cAAI,IAAM,gBACrCA,EAAMA,EAA6B,sBAAI,IAAM,wBAC7CA,EAAMA,EAAyB,kBAAI,IAAM,oBACzCA,EAAMA,EAA2B,oBAAI,IAAM,sBAC3CA,EAAMA,EAAiC,0BAAI,IAAM,4BACjDA,EAAMA,EAA2B,oBAAI,IAAM,sBAC3CA,EAAMA,EAAmC,4BAAI,IAAM,8BACnDA,EAAMA,EAA6C,sCAAI,IAAM,wCAC7DA,EAAMA,EAAuC,gCAAI,IAAM,kCACvDA,EAAMA,EAAmC,4BAAI,IAAM,8BACnDA,EAAMA,EAAuC,gCAAI,IAAM,iCAC1D,CAhFD,CAgFGA,KAAUA,GAAQ,CAAC,IAEf,MAAMC,GAAgB,CACzBC,KAAMF,GAAME,KACZC,OAAQH,GAAMG,OACdC,QAASJ,GAAMI,QACfC,YAAaL,GAAMK,YACnBrD,UAAWgD,GAAMhD,UACjBsD,cAAeN,GAAMM,eAMzB,SAASC,GAAavQ,GAClB,OAAOA,GAAM,GAAEwQ,SAAWxQ,GAAM,GAAEyQ,OACtC,CACA,SAASC,GAAa1Q,GAClB,OAAOA,GAAM,GAAE2Q,iBAAmB3Q,GAAM,GAAE4Q,eAC9C,CAIA,SAASC,GAAc7Q,GACnB,OAJJ,SAAsBA,GAClB,OAAOA,GAAM,GAAE8Q,eAAiB9Q,GAAM,GAAE+Q,aAC5C,CAEWC,CAAahR,IAAO0Q,GAAa1Q,EAC5C,CACA,SAAS,GAAoBA,GACzB,OAAO6Q,GAAc7Q,IAAOuQ,GAAavQ,EAC7C,CACA,SAASiR,GAAqBjR,GAC1B,OAAOA,GAAM,GAAE2Q,iBAAmB3Q,GAAM,GAAEkR,eAC9C,CACA,SAASC,GAAqBnR,GAC1B,OAAOA,GAAM,GAAE8Q,eAAiB9Q,GAAM,GAAEoR,aAC5C,CAIA,SAASC,GAAarR,GAClB,OAAOA,EAAK,EAChB,CACA,SAASsR,GAAatR,GAClB,OAAOA,IAAO,GAAEuR,OAASvR,IAAO,GAAEiC,WAAajC,IAAO,GAAEwR,YAAcxR,IAAO,GAAEyR,SACnF,CAIA,SAASC,GAAoC1R,GACzC,OAAOsR,GAAatR,IAAOA,IAAO,GAAE2R,SAAW3R,IAAO,GAAE4R,iBAC5D,CAEO,MAAMC,GACT,WAAA92D,CAAYG,EAAS6qB,GACjBvoB,KAAKtC,QAAUA,EACfsC,KAAKuoB,QAAUA,EACfvoB,KAAKs0D,QAAS,EAEdt0D,KAAKu0D,QAAS,EAOdv0D,KAAKw0D,eAAgB,EACrBx0D,KAAKy0D,iBAAmB,GACxBz0D,KAAK00D,QAAS,EACd10D,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAKkV,YAAcs9C,GAAME,KACzB1yD,KAAK20D,aAAe,EACpB30D,KAAK40D,uBAAyB,EAC9B50D,KAAK60D,sBAAwB,KAC7B70D,KAAK80D,aAAe,KACpB90D,KAAK+0D,YAAc,CAAEp3D,KAAM,GAAIG,MAAO,IACtCkC,KAAKg1D,aAAe,IAAIpS,GAAar6B,GACrCvoB,KAAKi1D,gBAAkBj1D,KAAKk1D,oBAAoB,EACpD,CAEA,IAAAzR,CAAK/hD,GACD,IAAIwjD,EAAIiQ,EACoC,QAA3CA,GAAMjQ,EAAKllD,KAAKuoB,SAASm7B,oBAAiC,IAAPyR,GAAyBA,EAAGl4D,KAAKioD,EAAIllD,KAAKg1D,aAAaxR,SAAS9hD,GACxH,CAEA,kBAAAwzD,CAAmBlmD,GACf,OAAKhP,KAAKtC,QAAQ03D,uBAGX,CACH/T,UAAWrhD,KAAKg1D,aAAa/1D,KAC7BqiD,SAAUthD,KAAKg1D,aAAazR,IAAMv0C,EAClComC,YAAap1C,KAAKg1D,aAAahmD,OAASA,EACxCuyC,SAAU,EACVC,QAAS,EACTC,WAAY,GARL,IAUf,CACA,eAAA4T,GACI,IAAIr1D,KAAKu0D,OAAT,CAGA,IADAv0D,KAAKu0D,QAAS,EACPv0D,KAAK00D,SAAW10D,KAAKs0D,QAAQ,CAChCt0D,KAAK40D,sBAAwB,EAC7B,MAAMpS,EAAKxiD,KAAKs1D,WACXt1D,KAAKu1D,sBACNv1D,KAAKw1D,WAAWhT,EAExB,CACAxiD,KAAKu0D,QAAS,CATJ,CAUd,CAEA,KAAAkB,GACIz1D,KAAKs0D,QAAS,CAClB,CACA,MAAApsC,CAAOwtC,GACH,IAAK11D,KAAKs0D,OACN,MAAM,IAAI/0D,MAAM,8BAEpBS,KAAKs0D,QAAS,EAEVt0D,KAAKu0D,SAETv0D,KAAKq1D,kBACAr1D,KAAKs0D,QACNoB,SAA8DA,IAEtE,CACA,KAAAhmD,CAAMuD,EAAOmxC,EAAasR,GACtB11D,KAAK00D,QAAS,EACd10D,KAAKg1D,aAAatlD,MAAMuD,EAAOmxC,GAC/BpkD,KAAKq1D,kBACAr1D,KAAKs0D,QACNoB,SAA8DA,GAEtE,CACA,sBAAArR,CAAuBpxC,GACnBjT,KAAK00D,QAAS,EACd10D,KAAKg1D,aAAa3Q,uBAAuBpxC,GACzCjT,KAAKq1D,iBACT,CAEA,kBAAAE,GACI,QAAIv1D,KAAKg1D,aAAa/R,gBAClBjjD,KAAK21D,WAAW31D,KAAK40D,uBACrB50D,KAAK00D,QAAS,GACP,EAGf,CAEA,QAAAY,GAEI,OADAt1D,KAAK40D,wBACE50D,KAAKg1D,aAAatQ,SAC7B,CACA,UAAAiR,CAAW1a,GACPj7C,KAAK40D,uBAAyB3Z,EAC9Bj7C,KAAKg1D,aAAalQ,QAAQ7J,EAC9B,CACA,iBAAA2a,CAAkBxhD,EAAOouC,GACrBxiD,KAAKoU,MAAQA,EACbpU,KAAKw1D,WAAWhT,EACpB,CACA,UAAAqT,CAAW5a,GACPj7C,KAAK40D,uBAAyB3Z,EAC9B,IAAK,IAAIv8C,EAAI,EAAGA,EAAIu8C,EAAOv8C,IACvBsB,KAAKg1D,aAAatQ,SAE1B,CACA,uBAAAoR,CAAwBl0B,EAASyd,GAC7B,QAAIr/C,KAAKg1D,aAAa1Q,WAAW1iB,EAASyd,KAEtCr/C,KAAK61D,WAAWj0B,EAAQjjC,OAAS,IAC1B,EAGf,CAEA,oBAAAo3D,GACI/1D,KAAK80D,aAAe,CAChBxrD,KAAMy7C,GAAUiR,UAChBv7C,QAAS,GACTw7C,MAAOhM,GAAO8H,QACdmE,aAAa,EACbC,gBAAgB,EAChBtV,MAAO,GACPN,SAAUvgD,KAAKk1D,mBAAmB,GAE1C,CACA,kBAAAkB,GACIp2D,KAAK80D,aAAe,CAChBxrD,KAAMy7C,GAAUsR,QAChB57C,QAAS,GACTw7C,MAAOhM,GAAO8H,QACdmE,aAAa,EACbC,gBAAgB,EAChBtV,MAAO,GACPN,SAAUvgD,KAAKk1D,mBAAmB,GAE1C,CACA,mBAAAoB,CAAoBtnD,GAChBhP,KAAK80D,aAAe,CAChBxrD,KAAMy7C,GAAUwR,QAChB3yD,KAAM,GACN28C,SAAUvgD,KAAKk1D,mBAAmBlmD,GAE1C,CACA,mBAAAwnD,CAAoBC,GAChBz2D,KAAK80D,aAAe,CAChBxrD,KAAMy7C,GAAU2R,QAChB/4D,KAAM84D,EACNE,aAAa,EACb3U,SAAU,KACVC,SAAU,KACV1B,SAAUvgD,KAAKi1D,gBAEvB,CACA,qBAAA2B,CAAsBttD,EAAMutD,GACxB72D,KAAK60D,sBAAwB,CACzBvrD,OACAutD,QACAtW,SAAUvgD,KAAKi1D,gBAEvB,CAEA,WAAA6B,CAAYC,GACR/2D,KAAK+0D,YAAc,CACfp3D,KAAMo5D,EACNj5D,MAAO,IAEXkC,KAAKi1D,gBAAkBj1D,KAAKk1D,mBAAmB,EACnD,CACA,cAAA8B,GACI,IAAI9R,EACAiQ,EACJ,MAAMjoD,EAAQlN,KAAK80D,aACnB,GAAmD,OAA/C9P,GAAa93C,EAAOlN,KAAK+0D,YAAYp3D,OAErC,GADAuP,EAAM2zC,MAAMz8C,KAAKpE,KAAK+0D,aAClB7nD,EAAMqzC,UAAYvgD,KAAKi1D,gBAAiB,EACsB,QAAtC/P,GAAMiQ,EAAKjoD,EAAMqzC,UAAUM,aAA0B,IAAPqE,EAAgBA,EAAMiQ,EAAGtU,MAAQvkD,OAAO0Z,OAAO,OACvGhW,KAAK+0D,YAAYp3D,MAAQqC,KAAKi1D,gBAE5Cj1D,KAAKi3D,iBACT,OAGAj3D,KAAKyjD,KAAKd,GAAIuU,mBAEtB,CACA,eAAAD,GACQj3D,KAAKi1D,kBACLj1D,KAAKi1D,gBAAgB1T,QAAUvhD,KAAKg1D,aAAa/1D,KACjDe,KAAKi1D,gBAAgBzT,OAASxhD,KAAKg1D,aAAazR,IAChDvjD,KAAKi1D,gBAAgBxT,UAAYzhD,KAAKg1D,aAAahmD,OAE3D,CAEA,YAAAmoD,CAAaC,GACTp3D,KAAKq3D,2BAA2BD,EAAG7W,UACnCvgD,KAAK80D,aAAe,KAChBsC,EAAG7W,WACH6W,EAAG7W,SAASgB,QAAUvhD,KAAKg1D,aAAa/1D,KACxCm4D,EAAG7W,SAASiB,OAASxhD,KAAKg1D,aAAazR,IAAM,EAC7C6T,EAAG7W,SAASkB,UAAYzhD,KAAKg1D,aAAahmD,OAAS,GAEvDhP,KAAKi1D,gBAAkBj1D,KAAKk1D,oBAAoB,EACpD,CACA,mBAAAoC,GACI,MAAMF,EAAKp3D,KAAK80D,aAChB90D,KAAKm3D,aAAaC,GAClBA,EAAGnB,MAAQnE,GAASsF,EAAG38C,SACnB28C,EAAG9tD,OAASy7C,GAAUiR,WACtBh2D,KAAKy0D,iBAAmB2C,EAAG38C,QAC3Bza,KAAKuoB,QAAQgvC,WAAWH,KAGpBA,EAAGvW,MAAMliD,OAAS,GAClBqB,KAAKyjD,KAAKd,GAAI6U,sBAEdJ,EAAGlB,aACHl2D,KAAKyjD,KAAKd,GAAI8U,2BAElBz3D,KAAKuoB,QAAQmvC,SAASN,IAE1Bp3D,KAAKg1D,aAAa9Q,iBACtB,CACA,kBAAAyT,CAAmBP,GACfp3D,KAAKm3D,aAAaC,GAClBp3D,KAAKuoB,QAAQqvC,UAAUR,GACvBp3D,KAAKg1D,aAAa9Q,iBACtB,CACA,kBAAA2T,CAAmBT,GACfp3D,KAAKm3D,aAAaC,GAClBp3D,KAAKuoB,QAAQuvC,UAAUV,GACvBp3D,KAAKg1D,aAAa9Q,iBACtB,CACA,0BAAAmT,CAA2BU,GACvB,GAAI/3D,KAAK60D,sBAAuB,CAQ5B,OALIkD,GAAgB/3D,KAAK60D,sBAAsBtU,WAC3CvgD,KAAK60D,sBAAsBtU,SAASgB,QAAUwW,EAAa1W,UAC3DrhD,KAAK60D,sBAAsBtU,SAASiB,OAASuW,EAAazW,SAC1DthD,KAAK60D,sBAAsBtU,SAASkB,UAAYsW,EAAa3iB,aAEzDp1C,KAAK60D,sBAAsBvrD,MAC/B,KAAKy7C,GAAUiT,UACXh4D,KAAKuoB,QAAQ0vC,YAAYj4D,KAAK60D,uBAC9B,MAEJ,KAAK9P,GAAUmT,eACXl4D,KAAKuoB,QAAQ4vC,gBAAgBn4D,KAAK60D,uBAClC,MAEJ,KAAK9P,GAAUqT,qBACXp4D,KAAKuoB,QAAQ8vC,sBAAsBr4D,KAAK60D,uBAIhD70D,KAAK60D,sBAAwB,IACjC,CACJ,CACA,aAAAyD,GACI,MAAM/X,EAAWvgD,KAAKk1D,mBAAmB,GACrC3U,IACAA,EAASgB,QAAUhB,EAASc,UAC5Bd,EAASiB,OAASjB,EAASe,SAC3Bf,EAASkB,UAAYlB,EAASnL,aAElCp1C,KAAKq3D,2BAA2B9W,GAChCvgD,KAAKuoB,QAAQgwC,MAAM,CAAEjvD,KAAMy7C,GAAUhB,IAAKxD,aAC1CvgD,KAAK00D,QAAS,CAClB,CAUA,kCAAA8D,CAAmClvD,EAAMmvD,GACrC,GAAIz4D,KAAK60D,sBAAuB,CAC5B,GAAI70D,KAAK60D,sBAAsBvrD,OAASA,EAOpC,YADAtJ,KAAK60D,sBAAsBgC,OAAS4B,GALpCz4D,KAAKi1D,gBAAkBj1D,KAAKk1D,mBAAmB,GAC/Cl1D,KAAKq3D,2BAA2Br3D,KAAKi1D,iBACrCj1D,KAAKg1D,aAAa9Q,iBAM1B,CACAlkD,KAAK42D,sBAAsBttD,EAAMmvD,EACrC,CACA,cAAAC,CAAelW,GACX,MAAMl5C,EAAOwqD,GAAatR,GACpBuC,GAAUqT,qBACV5V,IAAO,GAAEmW,KACL5T,GAAUmT,eACVnT,GAAUiT,UACpBh4D,KAAKw4D,mCAAmClvD,EAAMhB,OAAOg9C,cAAc9C,GACvE,CAGA,UAAAoW,CAAWH,GACPz4D,KAAKw4D,mCAAmCzT,GAAUiT,UAAWS,EACjE,CAEA,6BAAAI,CAA8BrW,GAC1B,IAAIvgD,EAAS,KACT+kD,EAAS,EACT8R,GAAmB,EACvB,IAAK,IAAIp6D,EAAI,EAAG2S,EAAU,GAAe,GAAI3S,GAAK,IAC9CA,EAAImqD,GAAgB,GAAgBx3C,EAAS3S,EAAI,EAAG8jD,KAChD9jD,EAAI,IAFyC8jD,EAAKxiD,KAAKs1D,WAAY,CAIvEtO,GAAU,EACV31C,EAAU,GAAe3S,GACzB,MAAMq6D,EAAS1nD,EAAUq0C,GAAakD,aAEtC,GAAImQ,EAAQ,CAER,MAAMpQ,GAAeoQ,GAAU,IAAM,EAuBrC,GApBIvW,IAAO,GAAEwW,WACTh5D,KAAKi5D,sCAtVcpV,EAuVW7jD,KAAKg1D,aAAazQ,KAAK,MAtVnD,GAAE2U,aAAe,GAAoBrV,KAyVvC5hD,EAAS,CAAC,GAAEk3D,WAEZz6D,GAAKiqD,IAIL1mD,EACoB,IAAhB0mD,EACM,CAAC,GAAejqD,IAAMgnD,GAAakD,cACnB,IAAhBD,EACI,CAAC,KAAiBjqD,IAClB,CAAC,KAAiBA,GAAI,KAAiBA,IACrDsoD,EAAS,EACT8R,EAAmBtW,IAAO,GAAEwW,WAEZ,IAAhBrQ,EAAmB,CAEnB3oD,KAAKs1D,WACL,KACJ,CACJ,CACJ,CA/WR,IAAuCzR,EAwX/B,OARA7jD,KAAK21D,WAAW3O,GACZ8R,IAAqB94D,KAAKg1D,aAAa/R,eACvCjjD,KAAKyjD,KAAKd,GAAI8F,yCAKlBzoD,KAAK21D,WAAW,GACT1zD,CACX,CACA,gCAAAg3D,GACI,OAAQj5D,KAAKkV,cAAgBs9C,GAAM4G,+BAC/Bp5D,KAAKkV,cAAgBs9C,GAAM6G,+BAC3Br5D,KAAKkV,cAAgBs9C,GAAM8G,wBACnC,CACA,2CAAAC,CAA4C/W,GACpCxiD,KAAKi5D,mCACLj5D,KAAK+0D,YAAYj3D,OAASwK,OAAOg9C,cAAc9C,GAG/CxiD,KAAK04D,eAAelW,EAE5B,CAEA,UAAAgT,CAAWhT,GACP,OAAQxiD,KAAKoU,OACT,KAAKo+C,GAAME,KACP1yD,KAAKw5D,WAAWhX,GAChB,MAEJ,KAAKgQ,GAAMG,OACP3yD,KAAKy5D,aAAajX,GAClB,MAEJ,KAAKgQ,GAAMI,QACP5yD,KAAK05D,cAAclX,GACnB,MAEJ,KAAKgQ,GAAMK,YACP7yD,KAAK25D,iBAAiBnX,GACtB,MAEJ,KAAKgQ,GAAMhD,UACPxvD,KAAK45D,gBAAgBpX,GACrB,MAEJ,KAAKgQ,GAAMqH,SACP75D,KAAK85D,cAActX,GACnB,MAEJ,KAAKgQ,GAAMuH,aACP/5D,KAAKg6D,iBAAiBxX,GACtB,MAEJ,KAAKgQ,GAAMyH,SACPj6D,KAAKk6D,cAAc1X,GACnB,MAEJ,KAAKgQ,GAAM2H,sBACPn6D,KAAKo6D,yBAAyB5X,GAC9B,MAEJ,KAAKgQ,GAAM6H,oBACPr6D,KAAKs6D,uBAAuB9X,GAC5B,MAEJ,KAAKgQ,GAAM+H,oBACPv6D,KAAKw6D,uBAAuBhY,GAC5B,MAEJ,KAAKgQ,GAAMiI,uBACPz6D,KAAK06D,0BAA0BlY,GAC/B,MAEJ,KAAKgQ,GAAMmI,qBACP36D,KAAK46D,wBAAwBpY,GAC7B,MAEJ,KAAKgQ,GAAMqI,qBACP76D,KAAK86D,wBAAwBtY,GAC7B,MAEJ,KAAKgQ,GAAMuI,2BACP/6D,KAAKg7D,6BAA6BxY,GAClC,MAEJ,KAAKgQ,GAAMyI,yBACPj7D,KAAKk7D,2BAA2B1Y,GAChC,MAEJ,KAAKgQ,GAAM2I,yBACPn7D,KAAKo7D,2BAA2B5Y,GAChC,MAEJ,KAAKgQ,GAAM6I,yBACPr7D,KAAKs7D,4BAA4B9Y,GACjC,MAEJ,KAAKgQ,GAAM+I,8BACPv7D,KAAKw7D,gCAAgChZ,GACrC,MAEJ,KAAKgQ,GAAMiJ,oBACPz7D,KAAK07D,wBAAwBlZ,GAC7B,MAEJ,KAAKgQ,GAAMmJ,yBACP37D,KAAK47D,4BAA4BpZ,GACjC,MAEJ,KAAKgQ,GAAMqJ,8BACP77D,KAAK87D,gCAAgCtZ,GACrC,MAEJ,KAAKgQ,GAAMuJ,mCACP/7D,KAAKg8D,oCAAoCxZ,GACzC,MAEJ,KAAKgQ,GAAMyJ,iCACPj8D,KAAKk8D,kCAAkC1Z,GACvC,MAEJ,KAAKgQ,GAAM2J,iCACPn8D,KAAKo8D,kCAAkC5Z,GACvC,MAEJ,KAAKgQ,GAAM6J,gCACPr8D,KAAKs8D,kCAAkC9Z,GACvC,MAEJ,KAAKgQ,GAAM+J,2BACPv8D,KAAKw8D,8BAA8Bha,GACnC,MAEJ,KAAKgQ,GAAMiK,gCACPz8D,KAAK08D,kCAAkCla,GACvC,MAEJ,KAAKgQ,GAAMmK,qCACP38D,KAAK48D,sCAAsCpa,GAC3C,MAEJ,KAAKgQ,GAAMqK,0CACP78D,KAAK88D,0CAA0Cta,GAC/C,MAEJ,KAAKgQ,GAAMuK,8BACP/8D,KAAKg9D,gCAAgCxa,GACrC,MAEJ,KAAKgQ,GAAMyK,sBACPj9D,KAAKk9D,0BAA0B1a,GAC/B,MAEJ,KAAKgQ,GAAM2K,eACPn9D,KAAKo9D,oBAAoB5a,GACzB,MAEJ,KAAKgQ,GAAM6K,qBACPr9D,KAAKs9D,yBAAyB9a,GAC9B,MAEJ,KAAKgQ,GAAM+K,uBACPv9D,KAAKw9D,2BAA2Bhb,GAChC,MAEJ,KAAKgQ,GAAM4G,8BACPp5D,KAAKy9D,iCAAiCjb,GACtC,MAEJ,KAAKgQ,GAAM6G,8BACPr5D,KAAK09D,iCAAiClb,GACtC,MAEJ,KAAKgQ,GAAM8G,yBACPt5D,KAAK29D,6BAA6Bnb,GAClC,MAEJ,KAAKgQ,GAAMoL,6BACP59D,KAAK69D,gCAAgCrb,GACrC,MAEJ,KAAKgQ,GAAMsL,uBACP99D,KAAK+9D,0BAA0Bvb,GAC/B,MAEJ,KAAKgQ,GAAMwL,cACPh+D,KAAKi+D,mBAAmBzb,GACxB,MAEJ,KAAKgQ,GAAM0L,wBACPl+D,KAAKm+D,4BAA4B3b,GACjC,MAEJ,KAAKgQ,GAAM4L,cACPp+D,KAAKq+D,mBAAmB7b,GACxB,MAEJ,KAAKgQ,GAAM8L,mBACPt+D,KAAKu+D,uBAAuB/b,GAC5B,MAEJ,KAAKgQ,GAAM+D,QACPv2D,KAAKw+D,cAAchc,GACnB,MAEJ,KAAKgQ,GAAMiM,uBACPz+D,KAAK0+D,0BAA0Blc,GAC/B,MAEJ,KAAKgQ,GAAMmM,4BACP3+D,KAAK4+D,8BAA8Bpc,GACnC,MAEJ,KAAKgQ,GAAMqM,iCACP7+D,KAAK8+D,kCAAkCtc,GACvC,MAEJ,KAAKgQ,GAAMuM,sCACP/+D,KAAKg/D,sCAAsCxc,GAC3C,MAEJ,KAAKgQ,GAAMyM,iBACPj/D,KAAKk/D,qBAAqB1c,GAC1B,MAEJ,KAAKgQ,GAAM2M,YACPn/D,KAAKo/D,iBAAiB5c,GACtB,MAEJ,KAAKgQ,GAAM6M,iBACPr/D,KAAKs/D,qBAAqB9c,GAC1B,MAEJ,KAAKgQ,GAAMkE,QACP12D,KAAKu/D,cAAc/c,GACnB,MAEJ,KAAKgQ,GAAMgN,oBACPx/D,KAAKy/D,wBAAwBjd,GAC7B,MAEJ,KAAKgQ,GAAMkN,aACP1/D,KAAK2/D,kBAAkBnd,GACvB,MAEJ,KAAKgQ,GAAMoN,mBACP5/D,KAAK6/D,uBAAuBrd,GAC5B,MAEJ,KAAKgQ,GAAMsN,6BACP9/D,KAAK+/D,gCAAgCvd,GACrC,MAEJ,KAAKgQ,GAAMwN,iCACPhgE,KAAKigE,oCAAoCzd,GACzC,MAEJ,KAAKgQ,GAAM0N,wCACPlgE,KAAKmgE,0CAA0C3d,GAC/C,MAEJ,KAAKgQ,GAAM4N,wCACPpgE,KAAKqgE,0CAA0C7d,GAC/C,MAEJ,KAAKgQ,GAAM8N,gCACPtgE,KAAKugE,mCAAmC/d,GACxC,MAEJ,KAAKgQ,GAAMgO,8CACPxgE,KAAKygE,+CAA+Cje,GACpD,MAEJ,KAAKgQ,GAAMkO,6BACP1gE,KAAK2gE,gCAAgCne,GACrC,MAEJ,KAAKgQ,GAAMoO,iCACP5gE,KAAK6gE,oCAAoCre,GACzC,MAEJ,KAAKgQ,GAAMsO,wCACP9gE,KAAK+gE,0CAA0Cve,GAC/C,MAEJ,KAAKgQ,GAAMwO,wCACPhhE,KAAKihE,0CAA0Cze,GAC/C,MAEJ,KAAKgQ,GAAM0O,gCACPlhE,KAAKmhE,mCAAmC3e,GACxC,MAEJ,KAAKgQ,GAAM4O,cACPphE,KAAKqhE,mBAAmB7e,GACxB,MAEJ,KAAKgQ,GAAMM,cACP9yD,KAAKshE,mBAAmB9e,GACxB,MAEJ,KAAKgQ,GAAM+O,sBACPvhE,KAAKwhE,0BAA0Bhf,GAC/B,MAEJ,KAAKgQ,GAAMiP,kBACPzhE,KAAK0hE,sBAAsBlf,GAC3B,MAEJ,KAAKgQ,GAAMmP,oBACP3hE,KAAK4hE,yBAAyBpf,GAC9B,MAEJ,KAAKgQ,GAAMqP,0BACP7hE,KAAK8hE,8BAA8Btf,GACnC,MAEJ,KAAKgQ,GAAMuP,oBACP/hE,KAAKgiE,yBAAyBxf,GAC9B,MAEJ,KAAKgQ,GAAMyP,4BACPjiE,KAAKkiE,gCAAgC1f,GACrC,MAEJ,KAAKgQ,GAAM2P,sCACPniE,KAAKoiE,yCAAyC5f,GAC9C,MAEJ,KAAKgQ,GAAM6P,gCACPriE,KAAKsiE,oCAAoC9f,GACzC,MAEJ,KAAKgQ,GAAM+P,4BACPviE,KAAKwiE,gCAAgChgB,GACrC,MAEJ,KAAKgQ,GAAMiQ,gCACPziE,KAAK0iE,mCAAmClgB,GACxC,MAEJ,QACI,MAAM,IAAIjjD,MAAM,iBAG5B,CAIA,UAAAi6D,CAAWhX,GACP,OAAQA,GACJ,KAAK,GAAEmgB,eACH3iE,KAAKoU,MAAQo+C,GAAMqH,SACnB,MAEJ,KAAK,GAAEV,UACHn5D,KAAKkV,YAAcs9C,GAAME,KACzB1yD,KAAKoU,MAAQo+C,GAAMmP,oBACnB,MAEJ,KAAK,GAAEhJ,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd5iE,KAAK04D,eAAelW,GACpB,MAEJ,KAAK,GAAEuB,IACH/jD,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAK04D,eAAelW,GAGhC,CAGA,YAAAiX,CAAajX,GACT,OAAQA,GACJ,KAAK,GAAE2W,UACHn5D,KAAKkV,YAAcs9C,GAAMG,OACzB3yD,KAAKoU,MAAQo+C,GAAMmP,oBACnB,MAEJ,KAAK,GAAEgB,eACH3iE,KAAKoU,MAAQo+C,GAAM2H,sBACnB,MAEJ,KAAK,GAAExB,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd5iE,KAAK44D,WAAWxW,IAChB,MAEJ,KAAK,GAAE2B,IACH/jD,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAK04D,eAAelW,GAGhC,CAGA,aAAAkX,CAAclX,GACV,OAAQA,GACJ,KAAK,GAAEmgB,eACH3iE,KAAKoU,MAAQo+C,GAAMiI,uBACnB,MAEJ,KAAK,GAAE9B,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd5iE,KAAK44D,WAAWxW,IAChB,MAEJ,KAAK,GAAE2B,IACH/jD,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAK04D,eAAelW,GAGhC,CAGA,gBAAAmX,CAAiBnX,GACb,OAAQA,GACJ,KAAK,GAAEmgB,eACH3iE,KAAKoU,MAAQo+C,GAAMuI,2BACnB,MAEJ,KAAK,GAAEpC,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd5iE,KAAK44D,WAAWxW,IAChB,MAEJ,KAAK,GAAE2B,IACH/jD,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAK04D,eAAelW,GAGhC,CAGA,eAAAoX,CAAgBpX,GACZ,OAAQA,GACJ,KAAK,GAAEmW,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd5iE,KAAK44D,WAAWxW,IAChB,MAEJ,KAAK,GAAE2B,IACH/jD,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAK04D,eAAelW,GAGhC,CAGA,aAAAsX,CAActX,GACV,GAAI6Q,GAAc7Q,GACdxiD,KAAK+1D,uBACL/1D,KAAKoU,MAAQo+C,GAAMyH,SACnBj6D,KAAKk6D,cAAc1X,QAGnB,OAAQA,GACJ,KAAK,GAAEqgB,iBACH7iE,KAAKoU,MAAQo+C,GAAM0L,wBACnB,MAEJ,KAAK,GAAE/J,QACHn0D,KAAKoU,MAAQo+C,GAAMuH,aACnB,MAEJ,KAAK,GAAE+I,cACH9iE,KAAKyjD,KAAKd,GAAIogB,wCACd/iE,KAAKs2D,oBAAoB,GACzBt2D,KAAKoU,MAAQo+C,GAAMwL,cACnBh+D,KAAKi+D,mBAAmBzb,GACxB,MAEJ,KAAK,GAAEuB,IACH/jD,KAAKyjD,KAAKd,GAAIqgB,kBACdhjE,KAAK44D,WAAW,KAChB54D,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAKyjD,KAAKd,GAAIsgB,gCACdjjE,KAAK44D,WAAW,KAChB54D,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAKw5D,WAAWhX,GAGhC,CAGA,gBAAAwX,CAAiBxX,GACb,GAAI6Q,GAAc7Q,GACdxiD,KAAKo2D,qBACLp2D,KAAKoU,MAAQo+C,GAAMyH,SACnBj6D,KAAKk6D,cAAc1X,QAGnB,OAAQA,GACJ,KAAK,GAAE4R,kBACHp0D,KAAKyjD,KAAKd,GAAIugB,mBACdljE,KAAKoU,MAAQo+C,GAAME,KACnB,MAEJ,KAAK,GAAE3O,IACH/jD,KAAKyjD,KAAKd,GAAIqgB,kBACdhjE,KAAK44D,WAAW,MAChB54D,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAKyjD,KAAKd,GAAIsgB,gCACdjjE,KAAKs2D,oBAAoB,GACzBt2D,KAAKoU,MAAQo+C,GAAMwL,cACnBh+D,KAAKi+D,mBAAmBzb,GAGxC,CAGA,aAAA0X,CAAc1X,GACV,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UACHj0D,KAAKoU,MAAQo+C,GAAMyK,sBACnB,MAEJ,KAAK,GAAE9I,QACHn0D,KAAKoU,MAAQo+C,GAAMsL,uBACnB,MAEJ,KAAK,GAAE1J,kBACHp0D,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAKs3D,sBACL,MAEJ,KAAK,GAAEqB,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd11D,EAAMuN,SAAW2nC,GACjB,MAEJ,KAAK,GAAE2B,IACH/jD,KAAKyjD,KAAKd,GAAIwgB,UACdnjE,KAAKs4D,gBACL,MAEJ,QACIprD,EAAMuN,SAAWnS,OAAOg9C,cAAc4N,GAAa1Q,GAAMqR,GAAarR,GAAMA,GAGxF,CAGA,wBAAA4X,CAAyB5X,GACjBA,IAAO,GAAE2R,QACTn0D,KAAKoU,MAAQo+C,GAAM6H,qBAGnBr6D,KAAK44D,WAAW,KAChB54D,KAAKoU,MAAQo+C,GAAMG,OACnB3yD,KAAKy5D,aAAajX,GAE1B,CAGA,sBAAA8X,CAAuB9X,GACf6Q,GAAc7Q,IACdxiD,KAAKoU,MAAQo+C,GAAM+H,oBACnBv6D,KAAKw6D,uBAAuBhY,KAG5BxiD,KAAK44D,WAAW,MAChB54D,KAAKoU,MAAQo+C,GAAMG,OACnB3yD,KAAKy5D,aAAajX,GAE1B,CACA,mBAAA4gB,CAAoBC,GAChB,IAAKrjE,KAAKg1D,aAAa1Q,WAAWtkD,KAAKy0D,kBAAkB,GACrD,OAAQz0D,KAAKu1D,qBAEjBv1D,KAAKo2D,qBACSp2D,KAAK80D,aACbr6C,QAAUza,KAAKy0D,iBAErB,OADWz0D,KAAKg1D,aAAazQ,KAAKvkD,KAAKy0D,iBAAiB91D,SAEpD,KAAK,GAAEo1D,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UAGH,OAFAj0D,KAAK61D,WAAW71D,KAAKy0D,iBAAiB91D,QACtCqB,KAAKoU,MAAQo+C,GAAMyK,uBACZ,EAEX,KAAK,GAAE9I,QAGH,OAFAn0D,KAAK61D,WAAW71D,KAAKy0D,iBAAiB91D,QACtCqB,KAAKoU,MAAQo+C,GAAMsL,wBACZ,EAEX,KAAK,GAAE1J,kBAIH,OAHAp0D,KAAK61D,WAAW71D,KAAKy0D,iBAAiB91D,QACtCqB,KAAKs3D,sBACLt3D,KAAKoU,MAAQo+C,GAAME,MACZ,EAEX,QACI,OAAQ1yD,KAAKu1D,qBAGzB,CAGA,sBAAAiF,CAAuBhY,GACfxiD,KAAKojE,oBAAoB5gB,KACzBxiD,KAAK44D,WAAW,MAChB54D,KAAKoU,MAAQo+C,GAAMG,OACnB3yD,KAAKy5D,aAAajX,GAE1B,CAGA,yBAAAkY,CAA0BlY,GAClBA,IAAO,GAAE2R,QACTn0D,KAAKoU,MAAQo+C,GAAMmI,sBAGnB36D,KAAK44D,WAAW,KAChB54D,KAAKoU,MAAQo+C,GAAMI,QACnB5yD,KAAK05D,cAAclX,GAE3B,CAGA,uBAAAoY,CAAwBpY,GAChB6Q,GAAc7Q,IACdxiD,KAAKoU,MAAQo+C,GAAMqI,qBACnB76D,KAAK86D,wBAAwBtY,KAG7BxiD,KAAK44D,WAAW,MAChB54D,KAAKoU,MAAQo+C,GAAMI,QACnB5yD,KAAK05D,cAAclX,GAE3B,CAGA,uBAAAsY,CAAwBtY,GAChBxiD,KAAKojE,oBAAoB5gB,KACzBxiD,KAAK44D,WAAW,MAChB54D,KAAKoU,MAAQo+C,GAAMI,QACnB5yD,KAAK05D,cAAclX,GAE3B,CAGA,4BAAAwY,CAA6BxY,GACzB,OAAQA,GACJ,KAAK,GAAE2R,QACHn0D,KAAKoU,MAAQo+C,GAAMyI,yBACnB,MAEJ,KAAK,GAAE4H,iBACH7iE,KAAKoU,MAAQo+C,GAAM6I,yBACnBr7D,KAAK44D,WAAW,MAChB,MAEJ,QACI54D,KAAK44D,WAAW,KAChB54D,KAAKoU,MAAQo+C,GAAMK,YACnB7yD,KAAK25D,iBAAiBnX,GAGlC,CAGA,0BAAA0Y,CAA2B1Y,GACnB6Q,GAAc7Q,IACdxiD,KAAKoU,MAAQo+C,GAAM2I,yBACnBn7D,KAAKo7D,2BAA2B5Y,KAGhCxiD,KAAK44D,WAAW,MAChB54D,KAAKoU,MAAQo+C,GAAMK,YACnB7yD,KAAK25D,iBAAiBnX,GAE9B,CAGA,0BAAA4Y,CAA2B5Y,GACnBxiD,KAAKojE,oBAAoB5gB,KACzBxiD,KAAK44D,WAAW,MAChB54D,KAAKoU,MAAQo+C,GAAMK,YACnB7yD,KAAK25D,iBAAiBnX,GAE9B,CAGA,2BAAA8Y,CAA4B9Y,GACpBA,IAAO,GAAE8gB,cACTtjE,KAAKoU,MAAQo+C,GAAM+I,8BACnBv7D,KAAK44D,WAAW,OAGhB54D,KAAKoU,MAAQo+C,GAAMK,YACnB7yD,KAAK25D,iBAAiBnX,GAE9B,CAGA,+BAAAgZ,CAAgChZ,GACxBA,IAAO,GAAE8gB,cACTtjE,KAAKoU,MAAQo+C,GAAMqJ,8BACnB77D,KAAK44D,WAAW,OAGhB54D,KAAKoU,MAAQo+C,GAAMK,YACnB7yD,KAAK25D,iBAAiBnX,GAE9B,CAGA,uBAAAkZ,CAAwBlZ,GACpB,OAAQA,GACJ,KAAK,GAAE8gB,aACHtjE,KAAKoU,MAAQo+C,GAAMmJ,yBACnB37D,KAAK44D,WAAW,KAChB,MAEJ,KAAK,GAAE+J,eACH3iE,KAAKoU,MAAQo+C,GAAMuJ,mCACnB,MAEJ,KAAK,GAAEpD,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd5iE,KAAK44D,WAAWxW,IAChB,MAEJ,KAAK,GAAE2B,IACH/jD,KAAKyjD,KAAKd,GAAI4gB,gCACdvjE,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAK04D,eAAelW,GAGhC,CAGA,2BAAAoZ,CAA4BpZ,GACxB,OAAQA,GACJ,KAAK,GAAE8gB,aACHtjE,KAAKoU,MAAQo+C,GAAMqJ,8BACnB77D,KAAK44D,WAAW,KAChB,MAEJ,KAAK,GAAE+J,eACH3iE,KAAKoU,MAAQo+C,GAAMuJ,mCACnB,MAEJ,KAAK,GAAEpD,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd5iE,KAAKoU,MAAQo+C,GAAMiJ,oBACnBz7D,KAAK44D,WAAWxW,IAChB,MAEJ,KAAK,GAAE2B,IACH/jD,KAAKyjD,KAAKd,GAAI4gB,gCACdvjE,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAKoU,MAAQo+C,GAAMiJ,oBACnBz7D,KAAK04D,eAAelW,GAGhC,CAGA,+BAAAsZ,CAAgCtZ,GAC5B,OAAQA,GACJ,KAAK,GAAE8gB,aACHtjE,KAAK44D,WAAW,KAChB,MAEJ,KAAK,GAAE+J,eACH3iE,KAAKoU,MAAQo+C,GAAMuJ,mCACnB,MAEJ,KAAK,GAAE3H,kBACHp0D,KAAKoU,MAAQo+C,GAAMK,YACnB7yD,KAAK44D,WAAW,KAChB,MAEJ,KAAK,GAAED,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd5iE,KAAKoU,MAAQo+C,GAAMiJ,oBACnBz7D,KAAK44D,WAAWxW,IAChB,MAEJ,KAAK,GAAE2B,IACH/jD,KAAKyjD,KAAKd,GAAI4gB,gCACdvjE,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAKoU,MAAQo+C,GAAMiJ,oBACnBz7D,KAAK04D,eAAelW,GAGhC,CAGA,mCAAAwZ,CAAoCxZ,GAC5BA,IAAO,GAAE2R,QACTn0D,KAAKoU,MAAQo+C,GAAMyJ,iCAEd5I,GAAc7Q,IACnBxiD,KAAK44D,WAAW,KAChB54D,KAAKoU,MAAQo+C,GAAM6J,gCACnBr8D,KAAKs8D,kCAAkC9Z,KAGvCxiD,KAAK44D,WAAW,KAChB54D,KAAKoU,MAAQo+C,GAAMiJ,oBACnBz7D,KAAK07D,wBAAwBlZ,GAErC,CAGA,iCAAA0Z,CAAkC1Z,GAC1B6Q,GAAc7Q,IACdxiD,KAAKoU,MAAQo+C,GAAM2J,iCACnBn8D,KAAKo8D,kCAAkC5Z,KAGvCxiD,KAAK44D,WAAW,MAChB54D,KAAKoU,MAAQo+C,GAAMiJ,oBACnBz7D,KAAK07D,wBAAwBlZ,GAErC,CAGA,iCAAA4Z,CAAkC5Z,GAC1BxiD,KAAKojE,oBAAoB5gB,KACzBxiD,KAAK44D,WAAW,MAChB54D,KAAKoU,MAAQo+C,GAAMiJ,oBACnBz7D,KAAK07D,wBAAwBlZ,GAErC,CAGA,iCAAA8Z,CAAkC9Z,GAC9B,GAAIxiD,KAAKg1D,aAAa1Q,WAAW,IAAW,IACxC4P,GAAoCl0D,KAAKg1D,aAAazQ,KAAK,GAAU5lD,SAAU,CAC/EqB,KAAK04D,eAAelW,GACpB,IAAK,IAAI9jD,EAAI,EAAGA,EAAI,GAAUC,OAAQD,IAClCsB,KAAK04D,eAAe14D,KAAKs1D,YAE7Bt1D,KAAKoU,MAAQo+C,GAAM+J,0BACvB,MACUv8D,KAAKu1D,uBACXv1D,KAAKoU,MAAQo+C,GAAMiJ,oBACnBz7D,KAAK07D,wBAAwBlZ,GAErC,CAGA,6BAAAga,CAA8Bha,GAC1B,OAAQA,GACJ,KAAK,GAAE8gB,aACHtjE,KAAKoU,MAAQo+C,GAAMiK,gCACnBz8D,KAAK44D,WAAW,KAChB,MAEJ,KAAK,GAAE+J,eACH3iE,KAAKoU,MAAQo+C,GAAMqK,0CACnB78D,KAAK44D,WAAW,KAChB,MAEJ,KAAK,GAAED,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd5iE,KAAK44D,WAAWxW,IAChB,MAEJ,KAAK,GAAE2B,IACH/jD,KAAKyjD,KAAKd,GAAI4gB,gCACdvjE,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAK04D,eAAelW,GAGhC,CAGA,iCAAAka,CAAkCla,GAC9B,OAAQA,GACJ,KAAK,GAAE8gB,aACHtjE,KAAKoU,MAAQo+C,GAAMmK,qCACnB38D,KAAK44D,WAAW,KAChB,MAEJ,KAAK,GAAE+J,eACH3iE,KAAKoU,MAAQo+C,GAAMqK,0CACnB78D,KAAK44D,WAAW,KAChB,MAEJ,KAAK,GAAED,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd5iE,KAAKoU,MAAQo+C,GAAM+J,2BACnBv8D,KAAK44D,WAAWxW,IAChB,MAEJ,KAAK,GAAE2B,IACH/jD,KAAKyjD,KAAKd,GAAI4gB,gCACdvjE,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAKoU,MAAQo+C,GAAM+J,2BACnBv8D,KAAK04D,eAAelW,GAGhC,CAGA,qCAAAoa,CAAsCpa,GAClC,OAAQA,GACJ,KAAK,GAAE8gB,aACHtjE,KAAK44D,WAAW,KAChB,MAEJ,KAAK,GAAE+J,eACH3iE,KAAKoU,MAAQo+C,GAAMqK,0CACnB78D,KAAK44D,WAAW,KAChB,MAEJ,KAAK,GAAExE,kBACHp0D,KAAKoU,MAAQo+C,GAAMK,YACnB7yD,KAAK44D,WAAW,KAChB,MAEJ,KAAK,GAAED,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd5iE,KAAKoU,MAAQo+C,GAAM+J,2BACnBv8D,KAAK44D,WAAWxW,IAChB,MAEJ,KAAK,GAAE2B,IACH/jD,KAAKyjD,KAAKd,GAAI4gB,gCACdvjE,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAKoU,MAAQo+C,GAAM+J,2BACnBv8D,KAAK04D,eAAelW,GAGhC,CAGA,yCAAAsa,CAA0Cta,GAClCA,IAAO,GAAE2R,SACTn0D,KAAKoU,MAAQo+C,GAAMuK,8BACnB/8D,KAAK44D,WAAW,OAGhB54D,KAAKoU,MAAQo+C,GAAM+J,2BACnBv8D,KAAKw8D,8BAA8Bha,GAE3C,CAGA,+BAAAwa,CAAgCxa,GAC5B,GAAIxiD,KAAKg1D,aAAa1Q,WAAW,IAAW,IACxC4P,GAAoCl0D,KAAKg1D,aAAazQ,KAAK,GAAU5lD,SAAU,CAC/EqB,KAAK04D,eAAelW,GACpB,IAAK,IAAI9jD,EAAI,EAAGA,EAAI,GAAUC,OAAQD,IAClCsB,KAAK04D,eAAe14D,KAAKs1D,YAE7Bt1D,KAAKoU,MAAQo+C,GAAMiJ,mBACvB,MACUz7D,KAAKu1D,uBACXv1D,KAAKoU,MAAQo+C,GAAM+J,2BACnBv8D,KAAKw8D,8BAA8Bha,GAE3C,CAGA,yBAAA0a,CAA0B1a,GACtB,OAAQA,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UAEH,MAEJ,KAAK,GAAEE,QACP,KAAK,GAAEC,kBACP,KAAK,GAAErQ,IACH/jD,KAAKoU,MAAQo+C,GAAM6K,qBACnBr9D,KAAKs9D,yBAAyB9a,GAC9B,MAEJ,KAAK,GAAE0W,YACHl5D,KAAKyjD,KAAKd,GAAI6gB,yCACdxjE,KAAK82D,YAAY,KACjB92D,KAAKoU,MAAQo+C,GAAM2K,eACnB,MAEJ,QACIn9D,KAAK82D,YAAY,IACjB92D,KAAKoU,MAAQo+C,GAAM2K,eACnBn9D,KAAKo9D,oBAAoB5a,GAGrC,CAGA,mBAAA4a,CAAoB5a,GAChB,OAAQA,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UACP,KAAK,GAAEE,QACP,KAAK,GAAEC,kBACP,KAAK,GAAErQ,IACH/jD,KAAKg3D,iBACLh3D,KAAKoU,MAAQo+C,GAAM6K,qBACnBr9D,KAAKs9D,yBAAyB9a,GAC9B,MAEJ,KAAK,GAAE0W,YACHl5D,KAAKg3D,iBACLh3D,KAAKoU,MAAQo+C,GAAM+K,uBACnB,MAEJ,KAAK,GAAEkG,eACP,KAAK,GAAEC,WACP,KAAK,GAAEf,eACH3iE,KAAKyjD,KAAKd,GAAIghB,oCACd3jE,KAAK+0D,YAAYp3D,MAAQ2K,OAAOg9C,cAAc9C,GAC9C,MAEJ,KAAK,GAAEmW,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd5iE,KAAK+0D,YAAYp3D,MAAQykD,GACzB,MAEJ,QACIpiD,KAAK+0D,YAAYp3D,MAAQ2K,OAAOg9C,cAAc4N,GAAa1Q,GAAMqR,GAAarR,GAAMA,GAGhG,CAGA,wBAAA8a,CAAyB9a,GACrB,OAAQA,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UAEH,MAEJ,KAAK,GAAEE,QACHn0D,KAAKoU,MAAQo+C,GAAMsL,uBACnB,MAEJ,KAAK,GAAE5E,YACHl5D,KAAKoU,MAAQo+C,GAAM+K,uBACnB,MAEJ,KAAK,GAAEnJ,kBACHp0D,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAKs3D,sBACL,MAEJ,KAAK,GAAEvT,IACH/jD,KAAKyjD,KAAKd,GAAIwgB,UACdnjE,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAK82D,YAAY,IACjB92D,KAAKoU,MAAQo+C,GAAM2K,eACnBn9D,KAAKo9D,oBAAoB5a,GAGrC,CAGA,0BAAAgb,CAA2Bhb,GACvB,OAAQA,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UAEH,MAEJ,KAAK,GAAEwP,eACHzjE,KAAKoU,MAAQo+C,GAAM4G,8BACnB,MAEJ,KAAK,GAAEsK,WACH1jE,KAAKoU,MAAQo+C,GAAM6G,8BACnB,MAEJ,KAAK,GAAEjF,kBACHp0D,KAAKyjD,KAAKd,GAAIihB,uBACd5jE,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAKs3D,sBACL,MAEJ,QACIt3D,KAAKoU,MAAQo+C,GAAM8G,yBACnBt5D,KAAK29D,6BAA6Bnb,GAG9C,CAGA,gCAAAib,CAAiCjb,GAC7B,OAAQA,GACJ,KAAK,GAAEihB,eACHzjE,KAAKoU,MAAQo+C,GAAMoL,6BACnB,MAEJ,KAAK,GAAEzE,UACHn5D,KAAKkV,YAAcs9C,GAAM4G,8BACzBp5D,KAAKoU,MAAQo+C,GAAMmP,oBACnB,MAEJ,KAAK,GAAEhJ,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd5iE,KAAK+0D,YAAYj3D,OAASskD,GAC1B,MAEJ,KAAK,GAAE2B,IACH/jD,KAAKyjD,KAAKd,GAAIwgB,UACdnjE,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAK+0D,YAAYj3D,OAASwK,OAAOg9C,cAAc9C,GAG3D,CAGA,gCAAAkb,CAAiClb,GAC7B,OAAQA,GACJ,KAAK,GAAEkhB,WACH1jE,KAAKoU,MAAQo+C,GAAMoL,6BACnB,MAEJ,KAAK,GAAEzE,UACHn5D,KAAKkV,YAAcs9C,GAAM6G,8BACzBr5D,KAAKoU,MAAQo+C,GAAMmP,oBACnB,MAEJ,KAAK,GAAEhJ,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd5iE,KAAK+0D,YAAYj3D,OAASskD,GAC1B,MAEJ,KAAK,GAAE2B,IACH/jD,KAAKyjD,KAAKd,GAAIwgB,UACdnjE,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAK+0D,YAAYj3D,OAASwK,OAAOg9C,cAAc9C,GAG3D,CAGA,4BAAAmb,CAA6Bnb,GACzB,OAAQA,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UACHj0D,KAAKi3D,kBACLj3D,KAAKoU,MAAQo+C,GAAMyK,sBACnB,MAEJ,KAAK,GAAE9D,UACHn5D,KAAKkV,YAAcs9C,GAAM8G,yBACzBt5D,KAAKoU,MAAQo+C,GAAMmP,oBACnB,MAEJ,KAAK,GAAEvN,kBACHp0D,KAAKi3D,kBACLj3D,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAKs3D,sBACL,MAEJ,KAAK,GAAEqB,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd5iE,KAAK+0D,YAAYj3D,OAASskD,GAC1B,MAEJ,KAAK,GAAEqhB,eACP,KAAK,GAAEC,WACP,KAAK,GAAEf,eACP,KAAK,GAAEzJ,YACP,KAAK,GAAE2K,aACH7jE,KAAKyjD,KAAKd,GAAImhB,6CACd9jE,KAAK+0D,YAAYj3D,OAASwK,OAAOg9C,cAAc9C,GAC/C,MAEJ,KAAK,GAAEuB,IACH/jD,KAAKyjD,KAAKd,GAAIwgB,UACdnjE,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAK+0D,YAAYj3D,OAASwK,OAAOg9C,cAAc9C,GAG3D,CAGA,+BAAAqb,CAAgCrb,GAC5B,OAAQA,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UACHj0D,KAAKi3D,kBACLj3D,KAAKoU,MAAQo+C,GAAMyK,sBACnB,MAEJ,KAAK,GAAE9I,QACHn0D,KAAKi3D,kBACLj3D,KAAKoU,MAAQo+C,GAAMsL,uBACnB,MAEJ,KAAK,GAAE1J,kBACHp0D,KAAKi3D,kBACLj3D,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAKs3D,sBACL,MAEJ,KAAK,GAAEvT,IACH/jD,KAAKyjD,KAAKd,GAAIwgB,UACdnjE,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAKyjD,KAAKd,GAAIohB,oCACd/jE,KAAKoU,MAAQo+C,GAAMyK,sBACnBj9D,KAAKk9D,0BAA0B1a,GAG3C,CAGA,yBAAAub,CAA0Bvb,GACtB,OAAQA,GACJ,KAAK,GAAE4R,kBACWp0D,KAAK80D,aACboB,aAAc,EACpBl2D,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAKs3D,sBACL,MAEJ,KAAK,GAAEvT,IACH/jD,KAAKyjD,KAAKd,GAAIwgB,UACdnjE,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAKyjD,KAAKd,GAAIqhB,wBACdhkE,KAAKoU,MAAQo+C,GAAMyK,sBACnBj9D,KAAKk9D,0BAA0B1a,GAG3C,CAGA,kBAAAyb,CAAmBzb,GACf,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAE4R,kBACHp0D,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAK23D,mBAAmBzqD,GACxB,MAEJ,KAAK,GAAE62C,IACH/jD,KAAK23D,mBAAmBzqD,GACxBlN,KAAKs4D,gBACL,MAEJ,KAAK,GAAEK,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd11D,EAAMtJ,MAAQw+C,GACd,MAEJ,QACIl1C,EAAMtJ,MAAQ0E,OAAOg9C,cAAc9C,GAG/C,CAGA,2BAAA2b,CAA4B3b,GACpBxiD,KAAK81D,wBAAwB,IAAc,IAC3C91D,KAAKs2D,oBAAoB,GAAa33D,OAAS,GAC/CqB,KAAKoU,MAAQo+C,GAAM4L,eAEdp+D,KAAK81D,wBAAwB,IAAY,IAE9C91D,KAAKi1D,gBAAkBj1D,KAAKk1D,mBAAmB,GAAWv2D,OAAS,GACnEqB,KAAKoU,MAAQo+C,GAAMkE,SAEd12D,KAAK81D,wBAAwB,IAAgB,GAC9C91D,KAAKw0D,cACLx0D,KAAKoU,MAAQo+C,GAAMM,eAGnB9yD,KAAKyjD,KAAKd,GAAIshB,oBACdjkE,KAAKs2D,oBAAoB,GAAe33D,OAAS,GACjDqB,KAAK80D,aAAalxD,KAAO,UACzB5D,KAAKoU,MAAQo+C,GAAMwL,eAKjBh+D,KAAKu1D,uBACXv1D,KAAKyjD,KAAKd,GAAIuhB,0BACdlkE,KAAKs2D,oBAAoB,GACzBt2D,KAAKoU,MAAQo+C,GAAMwL,cACnBh+D,KAAKi+D,mBAAmBzb,GAEhC,CAGA,kBAAA6b,CAAmB7b,GACf,OAAQA,GACJ,KAAK,GAAE8gB,aACHtjE,KAAKoU,MAAQo+C,GAAM8L,mBACnB,MAEJ,KAAK,GAAElK,kBAAmB,CACtBp0D,KAAKyjD,KAAKd,GAAIwhB,6BACdnkE,KAAKoU,MAAQo+C,GAAME,KACnB,MAAMxlD,EAAQlN,KAAK80D,aACnB90D,KAAK23D,mBAAmBzqD,GACxB,KACJ,CACA,QACIlN,KAAKoU,MAAQo+C,GAAM+D,QACnBv2D,KAAKw+D,cAAchc,GAG/B,CAGA,sBAAA+b,CAAuB/b,GACnB,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAE8gB,aACHtjE,KAAKoU,MAAQo+C,GAAM2M,YACnB,MAEJ,KAAK,GAAE/K,kBACHp0D,KAAKyjD,KAAKd,GAAIwhB,6BACdnkE,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAK23D,mBAAmBzqD,GACxB,MAEJ,KAAK,GAAE62C,IACH/jD,KAAKyjD,KAAKd,GAAIyhB,cACdpkE,KAAK23D,mBAAmBzqD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACIprD,EAAMtJ,MAAQ,IACd5D,KAAKoU,MAAQo+C,GAAM+D,QACnBv2D,KAAKw+D,cAAchc,GAG/B,CAGA,aAAAgc,CAAchc,GACV,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAE8gB,aACHtjE,KAAKoU,MAAQo+C,GAAMyM,iBACnB,MAEJ,KAAK,GAAE0D,eACHz1D,EAAMtJ,MAAQ,IACd5D,KAAKoU,MAAQo+C,GAAMiM,uBACnB,MAEJ,KAAK,GAAE9F,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd11D,EAAMtJ,MAAQw+C,GACd,MAEJ,KAAK,GAAE2B,IACH/jD,KAAKyjD,KAAKd,GAAIyhB,cACdpkE,KAAK23D,mBAAmBzqD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACIprD,EAAMtJ,MAAQ0E,OAAOg9C,cAAc9C,GAG/C,CAGA,yBAAAkc,CAA0Blc,GACtB,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAEqgB,iBACH31D,EAAMtJ,MAAQ,IACd5D,KAAKoU,MAAQo+C,GAAMmM,4BACnB,MAEJ,KAAK,GAAEgE,eACHz1D,EAAMtJ,MAAQ,IACd,MAEJ,QACI5D,KAAKoU,MAAQo+C,GAAM+D,QACnBv2D,KAAKw+D,cAAchc,GAG/B,CAGA,6BAAAoc,CAA8Bpc,GACtBA,IAAO,GAAE8gB,aACTtjE,KAAKoU,MAAQo+C,GAAMqM,kCAGnB7+D,KAAKoU,MAAQo+C,GAAM+D,QACnBv2D,KAAKw+D,cAAchc,GAE3B,CAGA,iCAAAsc,CAAkCtc,GAC1BA,IAAO,GAAE8gB,aACTtjE,KAAKoU,MAAQo+C,GAAMuM,uCAGnB/+D,KAAKoU,MAAQo+C,GAAMyM,iBACnBj/D,KAAKk/D,qBAAqB1c,GAElC,CAGA,qCAAAwc,CAAsCxc,GAC9BA,IAAO,GAAE4R,mBAAqB5R,IAAO,GAAEuB,KACvC/jD,KAAKyjD,KAAKd,GAAI0hB,eAElBrkE,KAAKoU,MAAQo+C,GAAM2M,YACnBn/D,KAAKo/D,iBAAiB5c,EAC1B,CAGA,oBAAA0c,CAAqB1c,GACjB,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAE8gB,aACHtjE,KAAKoU,MAAQo+C,GAAM2M,YACnB,MAEJ,KAAK,GAAEpb,IACH/jD,KAAKyjD,KAAKd,GAAIyhB,cACdpkE,KAAK23D,mBAAmBzqD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACIprD,EAAMtJ,MAAQ,IACd5D,KAAKoU,MAAQo+C,GAAM+D,QACnBv2D,KAAKw+D,cAAchc,GAG/B,CAGA,gBAAA4c,CAAiB5c,GACb,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAE4R,kBACHp0D,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAK23D,mBAAmBzqD,GACxB,MAEJ,KAAK,GAAE21D,iBACH7iE,KAAKoU,MAAQo+C,GAAM6M,iBACnB,MAEJ,KAAK,GAAEiE,aACHp2D,EAAMtJ,MAAQ,IACd,MAEJ,KAAK,GAAEmgD,IACH/jD,KAAKyjD,KAAKd,GAAIyhB,cACdpkE,KAAK23D,mBAAmBzqD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACIprD,EAAMtJ,MAAQ,KACd5D,KAAKoU,MAAQo+C,GAAM+D,QACnBv2D,KAAKw+D,cAAchc,GAG/B,CAGA,oBAAA8c,CAAqB9c,GACjB,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAE8gB,aACHp2D,EAAMtJ,MAAQ,MACd5D,KAAKoU,MAAQo+C,GAAMyM,iBACnB,MAEJ,KAAK,GAAE7K,kBACHp0D,KAAKyjD,KAAKd,GAAI2hB,0BACdtkE,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAK23D,mBAAmBzqD,GACxB,MAEJ,KAAK,GAAE62C,IACH/jD,KAAKyjD,KAAKd,GAAIyhB,cACdpkE,KAAK23D,mBAAmBzqD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACIprD,EAAMtJ,MAAQ,MACd5D,KAAKoU,MAAQo+C,GAAM+D,QACnBv2D,KAAKw+D,cAAchc,GAG/B,CAGA,aAAA+c,CAAc/c,GACV,OAAQA,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UACHj0D,KAAKoU,MAAQo+C,GAAMgN,oBACnB,MAEJ,KAAK,GAAEpL,kBACHp0D,KAAKoU,MAAQo+C,GAAMgN,oBACnBx/D,KAAKy/D,wBAAwBjd,GAC7B,MAEJ,KAAK,GAAEuB,IAAK,CACR/jD,KAAKyjD,KAAKd,GAAI4hB,cACdvkE,KAAKw2D,oBAAoB,MACzB,MAAMtpD,EAAQlN,KAAK80D,aACnB5nD,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKs4D,gBACL,KACJ,CACA,QACIt4D,KAAKyjD,KAAKd,GAAI6hB,oCACdxkE,KAAKoU,MAAQo+C,GAAMgN,oBACnBx/D,KAAKy/D,wBAAwBjd,GAGzC,CAGA,uBAAAid,CAAwBjd,GACpB,GAAI0Q,GAAa1Q,GACbxiD,KAAKw2D,oBAAoBluD,OAAOyD,aAAa8nD,GAAarR,KAC1DxiD,KAAKoU,MAAQo+C,GAAMkN,kBAGnB,OAAQld,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UAEH,MAEJ,KAAK,GAAE0E,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd5iE,KAAKw2D,oBAAoBpU,IACzBpiD,KAAKoU,MAAQo+C,GAAMkN,aACnB,MAEJ,KAAK,GAAEtL,kBAAmB,CACtBp0D,KAAKyjD,KAAKd,GAAI8hB,oBACdzkE,KAAKw2D,oBAAoB,MACzB,MAAMtpD,EAAQlN,KAAK80D,aACnB5nD,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKoU,MAAQo+C,GAAME,KACnB,KACJ,CACA,KAAK,GAAE3O,IAAK,CACR/jD,KAAKyjD,KAAKd,GAAI4hB,cACdvkE,KAAKw2D,oBAAoB,MACzB,MAAMtpD,EAAQlN,KAAK80D,aACnB5nD,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKs4D,gBACL,KACJ,CACA,QACIt4D,KAAKw2D,oBAAoBluD,OAAOg9C,cAAc9C,IAC9CxiD,KAAKoU,MAAQo+C,GAAMkN,aAGnC,CAGA,iBAAAC,CAAkBnd,GACd,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UACHj0D,KAAKoU,MAAQo+C,GAAMoN,mBACnB,MAEJ,KAAK,GAAExL,kBACHp0D,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAK63D,mBAAmB3qD,GACxB,MAEJ,KAAK,GAAEyrD,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd11D,EAAMvP,MAAQykD,GACd,MAEJ,KAAK,GAAE2B,IACH/jD,KAAKyjD,KAAKd,GAAI4hB,cACdr3D,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACIprD,EAAMvP,MAAQ2K,OAAOg9C,cAAc4N,GAAa1Q,GAAMqR,GAAarR,GAAMA,GAGrF,CAGA,sBAAAqd,CAAuBrd,GACnB,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UAEH,MAEJ,KAAK,GAAEG,kBACHp0D,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAK63D,mBAAmB3qD,GACxB,MAEJ,KAAK,GAAE62C,IACH/jD,KAAKyjD,KAAKd,GAAI4hB,cACdr3D,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACQt4D,KAAK81D,wBAAwB,IAAW,GACxC91D,KAAKoU,MAAQo+C,GAAMsN,6BAEd9/D,KAAK81D,wBAAwB,IAAW,GAC7C91D,KAAKoU,MAAQo+C,GAAMkO,6BAIb1gE,KAAKu1D,uBACXv1D,KAAKyjD,KAAKd,GAAI+hB,0CACdx3D,EAAMypD,aAAc,EACpB32D,KAAKoU,MAAQo+C,GAAM4O,cACnBphE,KAAKqhE,mBAAmB7e,IAIxC,CAGA,+BAAAud,CAAgCvd,GAC5B,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UACHj0D,KAAKoU,MAAQo+C,GAAMwN,iCACnB,MAEJ,KAAK,GAAEyD,eACHzjE,KAAKyjD,KAAKd,GAAIgiB,4CACdz3D,EAAM80C,SAAW,GACjBhiD,KAAKoU,MAAQo+C,GAAM0N,wCACnB,MAEJ,KAAK,GAAEwD,WACH1jE,KAAKyjD,KAAKd,GAAIgiB,4CACdz3D,EAAM80C,SAAW,GACjBhiD,KAAKoU,MAAQo+C,GAAM4N,wCACnB,MAEJ,KAAK,GAAEhM,kBACHp0D,KAAKyjD,KAAKd,GAAIiiB,gCACd13D,EAAMypD,aAAc,EACpB32D,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAK63D,mBAAmB3qD,GACxB,MAEJ,KAAK,GAAE62C,IACH/jD,KAAKyjD,KAAKd,GAAI4hB,cACdr3D,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAKyjD,KAAKd,GAAIkiB,2CACd33D,EAAMypD,aAAc,EACpB32D,KAAKoU,MAAQo+C,GAAM4O,cACnBphE,KAAKqhE,mBAAmB7e,GAGpC,CAGA,mCAAAyd,CAAoCzd,GAChC,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UAEH,MAEJ,KAAK,GAAEwP,eACHv2D,EAAM80C,SAAW,GACjBhiD,KAAKoU,MAAQo+C,GAAM0N,wCACnB,MAEJ,KAAK,GAAEwD,WACHx2D,EAAM80C,SAAW,GACjBhiD,KAAKoU,MAAQo+C,GAAM4N,wCACnB,MAEJ,KAAK,GAAEhM,kBACHp0D,KAAKyjD,KAAKd,GAAIiiB,gCACd13D,EAAMypD,aAAc,EACpB32D,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAK63D,mBAAmB3qD,GACxB,MAEJ,KAAK,GAAE62C,IACH/jD,KAAKyjD,KAAKd,GAAI4hB,cACdr3D,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAKyjD,KAAKd,GAAIkiB,2CACd33D,EAAMypD,aAAc,EACpB32D,KAAKoU,MAAQo+C,GAAM4O,cACnBphE,KAAKqhE,mBAAmB7e,GAGpC,CAGA,yCAAA2d,CAA0C3d,GACtC,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAEihB,eACHzjE,KAAKoU,MAAQo+C,GAAM8N,gCACnB,MAEJ,KAAK,GAAE3H,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd11D,EAAM80C,UAAYI,GAClB,MAEJ,KAAK,GAAEgS,kBACHp0D,KAAKyjD,KAAKd,GAAImiB,+BACd53D,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKoU,MAAQo+C,GAAME,KACnB,MAEJ,KAAK,GAAE3O,IACH/jD,KAAKyjD,KAAKd,GAAI4hB,cACdr3D,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACIprD,EAAM80C,UAAY15C,OAAOg9C,cAAc9C,GAGnD,CAGA,yCAAA6d,CAA0C7d,GACtC,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAEkhB,WACH1jE,KAAKoU,MAAQo+C,GAAM8N,gCACnB,MAEJ,KAAK,GAAE3H,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd11D,EAAM80C,UAAYI,GAClB,MAEJ,KAAK,GAAEgS,kBACHp0D,KAAKyjD,KAAKd,GAAImiB,+BACd53D,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKoU,MAAQo+C,GAAME,KACnB,MAEJ,KAAK,GAAE3O,IACH/jD,KAAKyjD,KAAKd,GAAI4hB,cACdr3D,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACIprD,EAAM80C,UAAY15C,OAAOg9C,cAAc9C,GAGnD,CAGA,kCAAA+d,CAAmC/d,GAC/B,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UACHj0D,KAAKoU,MAAQo+C,GAAMgO,8CACnB,MAEJ,KAAK,GAAEpM,kBACHp0D,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAK63D,mBAAmB3qD,GACxB,MAEJ,KAAK,GAAEu2D,eACHzjE,KAAKyjD,KAAKd,GAAIoiB,2DACd73D,EAAM+0C,SAAW,GACjBjiD,KAAKoU,MAAQo+C,GAAMsO,wCACnB,MAEJ,KAAK,GAAE4C,WACH1jE,KAAKyjD,KAAKd,GAAIoiB,2DACd73D,EAAM+0C,SAAW,GACjBjiD,KAAKoU,MAAQo+C,GAAMwO,wCACnB,MAEJ,KAAK,GAAEjd,IACH/jD,KAAKyjD,KAAKd,GAAI4hB,cACdr3D,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAKyjD,KAAKd,GAAIqiB,2CACd93D,EAAMypD,aAAc,EACpB32D,KAAKoU,MAAQo+C,GAAM4O,cACnBphE,KAAKqhE,mBAAmB7e,GAGpC,CAGA,8CAAAie,CAA+Cje,GAC3C,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UAEH,MAEJ,KAAK,GAAEG,kBACHp0D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKoU,MAAQo+C,GAAME,KACnB,MAEJ,KAAK,GAAE+Q,eACHv2D,EAAM+0C,SAAW,GACjBjiD,KAAKoU,MAAQo+C,GAAMsO,wCACnB,MAEJ,KAAK,GAAE4C,WACHx2D,EAAM+0C,SAAW,GACjBjiD,KAAKoU,MAAQo+C,GAAMwO,wCACnB,MAEJ,KAAK,GAAEjd,IACH/jD,KAAKyjD,KAAKd,GAAI4hB,cACdr3D,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAKyjD,KAAKd,GAAIqiB,2CACd93D,EAAMypD,aAAc,EACpB32D,KAAKoU,MAAQo+C,GAAM4O,cACnBphE,KAAKqhE,mBAAmB7e,GAGpC,CAGA,+BAAAme,CAAgCne,GAC5B,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UACHj0D,KAAKoU,MAAQo+C,GAAMoO,iCACnB,MAEJ,KAAK,GAAE6C,eACHzjE,KAAKyjD,KAAKd,GAAIsiB,4CACd/3D,EAAM+0C,SAAW,GACjBjiD,KAAKoU,MAAQo+C,GAAMsO,wCACnB,MAEJ,KAAK,GAAE4C,WACH1jE,KAAKyjD,KAAKd,GAAIsiB,4CACd/3D,EAAM+0C,SAAW,GACjBjiD,KAAKoU,MAAQo+C,GAAMwO,wCACnB,MAEJ,KAAK,GAAE5M,kBACHp0D,KAAKyjD,KAAKd,GAAIuiB,gCACdh4D,EAAMypD,aAAc,EACpB32D,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAK63D,mBAAmB3qD,GACxB,MAEJ,KAAK,GAAE62C,IACH/jD,KAAKyjD,KAAKd,GAAI4hB,cACdr3D,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAKyjD,KAAKd,GAAIqiB,2CACd93D,EAAMypD,aAAc,EACpB32D,KAAKoU,MAAQo+C,GAAM4O,cACnBphE,KAAKqhE,mBAAmB7e,GAGpC,CAGA,mCAAAqe,CAAoCre,GAChC,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UAEH,MAEJ,KAAK,GAAEwP,eACHv2D,EAAM+0C,SAAW,GACjBjiD,KAAKoU,MAAQo+C,GAAMsO,wCACnB,MAEJ,KAAK,GAAE4C,WACHx2D,EAAM+0C,SAAW,GACjBjiD,KAAKoU,MAAQo+C,GAAMwO,wCACnB,MAEJ,KAAK,GAAE5M,kBACHp0D,KAAKyjD,KAAKd,GAAIuiB,gCACdh4D,EAAMypD,aAAc,EACpB32D,KAAKoU,MAAQo+C,GAAME,KACnB1yD,KAAK63D,mBAAmB3qD,GACxB,MAEJ,KAAK,GAAE62C,IACH/jD,KAAKyjD,KAAKd,GAAI4hB,cACdr3D,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAKyjD,KAAKd,GAAIqiB,2CACd93D,EAAMypD,aAAc,EACpB32D,KAAKoU,MAAQo+C,GAAM4O,cACnBphE,KAAKqhE,mBAAmB7e,GAGpC,CAGA,yCAAAue,CAA0Cve,GACtC,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAEihB,eACHzjE,KAAKoU,MAAQo+C,GAAM0O,gCACnB,MAEJ,KAAK,GAAEvI,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd11D,EAAM+0C,UAAYG,GAClB,MAEJ,KAAK,GAAEgS,kBACHp0D,KAAKyjD,KAAKd,GAAIwiB,+BACdj4D,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKoU,MAAQo+C,GAAME,KACnB,MAEJ,KAAK,GAAE3O,IACH/jD,KAAKyjD,KAAKd,GAAI4hB,cACdr3D,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACIprD,EAAM+0C,UAAY35C,OAAOg9C,cAAc9C,GAGnD,CAGA,yCAAAye,CAA0Cze,GACtC,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAEkhB,WACH1jE,KAAKoU,MAAQo+C,GAAM0O,gCACnB,MAEJ,KAAK,GAAEvI,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd11D,EAAM+0C,UAAYG,GAClB,MAEJ,KAAK,GAAEgS,kBACHp0D,KAAKyjD,KAAKd,GAAIwiB,+BACdj4D,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKoU,MAAQo+C,GAAME,KACnB,MAEJ,KAAK,GAAE3O,IACH/jD,KAAKyjD,KAAKd,GAAI4hB,cACdr3D,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACIprD,EAAM+0C,UAAY35C,OAAOg9C,cAAc9C,GAGnD,CAGA,kCAAA2e,CAAmC3e,GAC/B,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAEuR,MACP,KAAK,GAAEtP,UACP,KAAK,GAAEuP,WACP,KAAK,GAAEC,UAEH,MAEJ,KAAK,GAAEG,kBACHp0D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKoU,MAAQo+C,GAAME,KACnB,MAEJ,KAAK,GAAE3O,IACH/jD,KAAKyjD,KAAKd,GAAI4hB,cACdr3D,EAAMypD,aAAc,EACpB32D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAKyjD,KAAKd,GAAIyiB,iDACdplE,KAAKoU,MAAQo+C,GAAM4O,cACnBphE,KAAKqhE,mBAAmB7e,GAGpC,CAGA,kBAAA6e,CAAmB7e,GACf,MAAMt1C,EAAQlN,KAAK80D,aACnB,OAAQtS,GACJ,KAAK,GAAE4R,kBACHp0D,KAAK63D,mBAAmB3qD,GACxBlN,KAAKoU,MAAQo+C,GAAME,KACnB,MAEJ,KAAK,GAAEiG,KACH34D,KAAKyjD,KAAKd,GAAIigB,yBACd,MAEJ,KAAK,GAAE7e,IACH/jD,KAAK63D,mBAAmB3qD,GACxBlN,KAAKs4D,gBAMjB,CAGA,kBAAAgJ,CAAmB9e,GACf,OAAQA,GACJ,KAAK,GAAE6iB,qBACHrlE,KAAKoU,MAAQo+C,GAAM+O,sBACnB,MAEJ,KAAK,GAAExd,IACH/jD,KAAKyjD,KAAKd,GAAI2iB,YACdtlE,KAAKs4D,gBACL,MAEJ,QACIt4D,KAAK04D,eAAelW,GAGhC,CAGA,yBAAAgf,CAA0Bhf,GAClBA,IAAO,GAAE6iB,qBACTrlE,KAAKoU,MAAQo+C,GAAMiP,mBAGnBzhE,KAAK44D,WAAW,KAChB54D,KAAKoU,MAAQo+C,GAAMM,cACnB9yD,KAAKshE,mBAAmB9e,GAEhC,CAGA,qBAAAkf,CAAsBlf,GAClB,OAAQA,GACJ,KAAK,GAAE4R,kBACHp0D,KAAKoU,MAAQo+C,GAAME,KACnB,MAEJ,KAAK,GAAE2S,qBACHrlE,KAAK44D,WAAW,KAChB,MAEJ,QACI54D,KAAK44D,WAAW,MAChB54D,KAAKoU,MAAQo+C,GAAMM,cACnB9yD,KAAKshE,mBAAmB9e,GAGpC,CAGA,wBAAAof,CAAyBpf,GACjBA,IAAO,GAAE+iB,YACTvlE,KAAKoU,MAAQo+C,GAAMyP,4BAEd,GAAoBzf,IACzBxiD,KAAKoU,MAAQo+C,GAAMqP,0BACnB7hE,KAAK8hE,8BAA8Btf,KAGnCxiD,KAAKu5D,4CAA4C,GAAEJ,WACnDn5D,KAAK41D,kBAAkB51D,KAAKkV,YAAastC,GAEjD,CAGA,6BAAAsf,CAA8Btf,GAC1B,MAAMgjB,EAAcxlE,KAAK64D,8BAA8BrW,GAGvD,GAAIxiD,KAAKu1D,2BAGJ,GAAIiQ,EAAa,CAClB,IAAK,IAAI9mE,EAAI,EAAGA,EAAI8mE,EAAY7mE,OAAQD,IACpCsB,KAAKu5D,4CAA4CiM,EAAY9mE,IAEjEsB,KAAKoU,MAAQpU,KAAKkV,WACtB,MAEIlV,KAAKu5D,4CAA4C,GAAEJ,WACnDn5D,KAAKoU,MAAQo+C,GAAMuP,mBAE3B,CAGA,wBAAAC,CAAyBxf,GACjB,GAAoBA,GACpBxiD,KAAKu5D,4CAA4C/W,IAG7CA,IAAO,GAAEwW,WACTh5D,KAAKyjD,KAAKd,GAAI8iB,gCAElBzlE,KAAK41D,kBAAkB51D,KAAKkV,YAAastC,GAEjD,CAGA,+BAAA0f,CAAgC1f,GAC5BxiD,KAAK20D,YAAc,EACfnS,IAAO,GAAEkjB,eAAiBljB,IAAO,GAAEmjB,gBACnC3lE,KAAKoU,MAAQo+C,GAAM2P,sCAGdpP,GAAavQ,IAClBxiD,KAAKoU,MAAQo+C,GAAM+P,4BACnBviE,KAAKwiE,gCAAgChgB,KAGrCxiD,KAAKyjD,KAAKd,GAAI4F,4CACdvoD,KAAKu5D,4CAA4C,GAAEJ,WACnDn5D,KAAKu5D,4CAA4C,GAAEgM,aACnDvlE,KAAK41D,kBAAkB51D,KAAKkV,YAAastC,GAEjD,CAGA,wCAAA4f,CAAyC5f,IAhnF7C,SAAyBA,GACrB,OAAOuQ,GAAavQ,IAAOiR,GAAqBjR,IAAOmR,GAAqBnR,EAChF,CA+mFYojB,CAAgBpjB,IAKhBxiD,KAAKyjD,KAAKd,GAAI4F,4CACdvoD,KAAKu5D,4CAA4C,GAAEJ,WACnDn5D,KAAKu5D,4CAA4C,GAAEgM,aACnDvlE,KAAK21D,WAAW,GAChB31D,KAAKoU,MAAQpU,KAAKkV,cARlBlV,KAAKoU,MAAQo+C,GAAM6P,gCACnBriE,KAAKsiE,oCAAoC9f,GASjD,CAGA,mCAAA8f,CAAoC9f,GAC5BiR,GAAqBjR,GACrBxiD,KAAK20D,YAAiC,GAAnB30D,KAAK20D,YAAmBnS,EAAK,GAE3CmR,GAAqBnR,GAC1BxiD,KAAK20D,YAAiC,GAAnB30D,KAAK20D,YAAmBnS,EAAK,GAE3CuQ,GAAavQ,GAClBxiD,KAAK20D,YAAiC,GAAnB30D,KAAK20D,YAAmBnS,EAAK,GAE3CA,IAAO,GAAEwW,UACdh5D,KAAKoU,MAAQo+C,GAAMiQ,iCAGnBziE,KAAKyjD,KAAKd,GAAI8F,yCACdzoD,KAAKoU,MAAQo+C,GAAMiQ,gCACnBziE,KAAK0iE,mCAAmClgB,GAEhD,CAGA,+BAAAggB,CAAgChgB,GACxBuQ,GAAavQ,GACbxiD,KAAK20D,YAAiC,GAAnB30D,KAAK20D,YAAmBnS,EAAK,GAE3CA,IAAO,GAAEwW,UACdh5D,KAAKoU,MAAQo+C,GAAMiQ,iCAGnBziE,KAAKyjD,KAAKd,GAAI8F,yCACdzoD,KAAKoU,MAAQo+C,GAAMiQ,gCACnBziE,KAAK0iE,mCAAmClgB,GAEhD,CAGA,kCAAAkgB,CAAmClgB,GAC/B,GAAIxiD,KAAK20D,cAAgB,GAAEgE,KACvB34D,KAAKyjD,KAAKd,GAAIkjB,wBACd7lE,KAAK20D,YAAc,GAAEvS,2BAEpB,GAAIpiD,KAAK20D,YAAc,QACxB30D,KAAKyjD,KAAKd,GAAImjB,uCACd9lE,KAAK20D,YAAc,GAAEvS,2BAEpB,GAAIG,GAAYviD,KAAK20D,aACtB30D,KAAKyjD,KAAKd,GAAIojB,6BACd/lE,KAAK20D,YAAc,GAAEvS,2BAEpB,GAAIM,GAAqB1iD,KAAK20D,aAC/B30D,KAAKyjD,KAAKd,GAAIqjB,qCAEb,GAAIvjB,GAAmBziD,KAAK20D,cAAgB30D,KAAK20D,cAAgB,GAAEnQ,gBAAiB,CACrFxkD,KAAKyjD,KAAKd,GAAIsjB,2BACd,MAAMC,EAAc3T,GAAmC1U,IAAI79C,KAAK20D,kBAC5C90D,IAAhBqmE,IACAlmE,KAAK20D,YAAcuR,EAE3B,CACAlmE,KAAKu5D,4CAA4Cv5D,KAAK20D,aACtD30D,KAAK41D,kBAAkB51D,KAAKkV,YAAastC,EAC7C,ECn1FJ,MAAM2jB,GAA4B,IAAI5sB,IAAI,CAAC,GAAEkS,GAAI,GAAEO,GAAI,GAAE8B,GAAI,GAAEsB,SAAU,GAAEC,OAAQ,GAAEC,EAAG,GAAEI,GAAI,GAAEC,GAAI,GAAEC,GAAI,GAAEC,MACtGuW,GAAuC,IAAI7sB,IAAI,IAC9C4sB,GACH,GAAE/a,QACF,GAAEI,SACF,GAAEqF,MACF,GAAEI,GACF,GAAED,MACF,GAAEE,GACF,GAAEC,MACF,GAAEE,KAEAgV,GAAqB,IAAIroB,IAAI,CAC/B,CAAC,GAAEuM,OAAQ,GAAG+C,MACd,CAAC,GAAElC,QAAS,GAAGkC,MACf,CAAC,GAAEA,KAAM,GAAGA,MACZ,CAAC,GAAEa,QAAS,GAAGb,MACf,CAAC,GAAE4B,OAAQ,GAAG5B,MACd,CAAC,GAAEsD,MAAO,GAAGtD,MACb,CAAC,GAAE2D,GAAI,GAAG3D,MACV,CAAC,GAAEwD,SAAU,GAAGxD,MAChB,CAAC,GAAE4D,GAAI,GAAG5D,MACV,CAAC,GAAEhD,eAAgB,GAAG2H,QACtB,CAAC,GAAEzD,GAAI,GAAGyD,QACV,CAAC,GAAEvD,GAAI,GAAGuD,QACV,CAAC,GAAExD,GAAI,GAAGwD,QACV,CAAC,GAAEtD,GAAI,GAAGsD,QACV,CAAC,GAAErD,MAAO,GAAGqD,QACb,CAAC,GAAEvG,KAAM,GAAGgG,KACZ,CAAC,GAAElF,eAAgB,GAAGkF,KACtB,CAAC,GAAEN,MAAO,GAAGM,OAEX4U,GAAgB,CAAC,GAAE1Z,GAAI,GAAEC,GAAI,GAAEC,GAAI,GAAEC,GAAI,GAAEC,GAAI,GAAEC,IACjDsZ,GAAoB,CAAC,GAAElV,GAAI,GAAEP,SAAU,GAAExD,MACzCkZ,GAAqB,CAAC,GAAE3V,MAAO,GAAEG,MAAO,GAAEG,MAAO,GAAEL,SAAU,GAAExD,MAC/DmZ,GAAgB,CAAC,GAAE7V,MAAO,GAAEE,SAAU,GAAExD,MACxCoZ,GAAc,CAAC,GAAEzV,GAAI,GAAEC,IAEtB,MAAMyV,GACT,4BAAIC,GACA,OAAO5mE,KAAK6mE,gBAAkB7mE,KAAK8mE,YAAYC,mBAAmB/mE,KAAKqR,SAAWrR,KAAKqR,OAC3F,CACA,WAAA9T,CAAYsS,EAAUi3D,EAAav+C,GAC/BvoB,KAAK8mE,YAAcA,EACnB9mE,KAAKuoB,QAAUA,EACfvoB,KAAKmK,MAAQ,GACbnK,KAAKgnE,OAAS,GACdhnE,KAAKinE,UAAY,EACjBjnE,KAAKknE,UAAY,EACjBlnE,KAAKmnE,aAAe,GAAEpV,QACtB/xD,KAAKqR,QAAUxB,CACnB,CAEA,QAAAu3D,CAASC,GACL,OAAOrnE,KAAKmK,MAAM9H,YAAYglE,EAASrnE,KAAKinE,SAChD,CAEA,aAAAJ,GACI,OAAO7mE,KAAKmnE,eAAiB,GAAErW,UAAY9wD,KAAK8mE,YAAYQ,gBAAgBtnE,KAAKqR,WAAa,GAAGi8C,IACrG,CACA,qBAAAia,GACIvnE,KAAKqR,QAAUrR,KAAKmK,MAAMnK,KAAKinE,UAC/BjnE,KAAKmnE,aAAennE,KAAKgnE,OAAOhnE,KAAKinE,SACzC,CAEA,IAAA7iE,CAAKijE,EAASpR,GACVj2D,KAAKinE,WACLjnE,KAAKmK,MAAMnK,KAAKinE,UAAYI,EAC5BrnE,KAAKqR,QAAUg2D,EACfrnE,KAAKgnE,OAAOhnE,KAAKinE,UAAYhR,EAC7Bj2D,KAAKmnE,aAAelR,EAChBj2D,KAAK6mE,iBACL7mE,KAAKknE,YAETlnE,KAAKuoB,QAAQi/C,WAAWH,EAASpR,GAAO,EAC5C,CACA,GAAA1wD,GACI,MAAMkiE,EAASznE,KAAKqR,QAChBrR,KAAKknE,UAAY,GAAKlnE,KAAK6mE,iBAC3B7mE,KAAKknE,YAETlnE,KAAKinE,WACLjnE,KAAKunE,wBACLvnE,KAAKuoB,QAAQm/C,UAAUD,GAAQ,EACnC,CACA,OAAAhvD,CAAQkvD,EAAYC,GAChB,MAAMC,EAAM7nE,KAAKonE,SAASO,GAC1B3nE,KAAKmK,MAAM09D,GAAOD,EACdC,IAAQ7nE,KAAKinE,WACbjnE,KAAKqR,QAAUu2D,EAEvB,CACA,WAAAE,CAAYC,EAAkBH,EAAYI,GACtC,MAAMC,EAAejoE,KAAKonE,SAASW,GAAoB,EACvD/nE,KAAKmK,MAAMH,OAAOi+D,EAAc,EAAGL,GACnC5nE,KAAKgnE,OAAOh9D,OAAOi+D,EAAc,EAAGD,GACpChoE,KAAKinE,WACDgB,IAAiBjoE,KAAKinE,UACtBjnE,KAAKunE,wBAETvnE,KAAKuoB,QAAQi/C,WAAWxnE,KAAKqR,QAASrR,KAAKmnE,aAAcc,IAAiBjoE,KAAKinE,SACnF,CACA,qBAAAiB,CAAsBztD,GAClB,IAAI0tD,EAAYnoE,KAAKinE,SAAW,EAChC,GACIkB,EAAYnoE,KAAKgnE,OAAO3kE,YAAYoY,EAAS0tD,EAAY,SACpDA,EAAY,GAAKnoE,KAAK8mE,YAAYQ,gBAAgBtnE,KAAKmK,MAAMg+D,MAAgB,GAAG7a,MACzFttD,KAAKooE,gBAAgBD,EAAY,EAAI,EAAIA,EAC7C,CACA,eAAAC,CAAgBP,GACZ,KAAO7nE,KAAKinE,UAAYY,GAAK,CACzB,MAAMJ,EAASznE,KAAKqR,QAChBrR,KAAKknE,UAAY,GAAKlnE,KAAK6mE,kBAC3B7mE,KAAKknE,WAAa,GAEtBlnE,KAAKinE,WACLjnE,KAAKunE,wBACLvnE,KAAKuoB,QAAQm/C,UAAUD,EAAQznE,KAAKinE,SAAWY,EACnD,CACJ,CACA,qBAAAQ,CAAsBhB,GAClB,MAAMQ,EAAM7nE,KAAKonE,SAASC,GAC1BrnE,KAAKooE,gBAAgBP,EAAM,EAAI,EAAIA,EACvC,CACA,cAAAS,CAAeC,EAAUC,GACrB,MAAMX,EAAM7nE,KAAKyoE,iBAAiBF,EAAUC,GAC5CxoE,KAAKooE,gBAAgBP,EAAM,EAAI,EAAIA,EACvC,CACA,4BAAAa,GACI1oE,KAAKsoE,eAAehC,GAAe,GAAGhZ,KAC1C,CACA,uBAAAqb,GACI3oE,KAAKsoE,eAAe5B,GAAa,GAAGpZ,KACxC,CACA,qBAAAsb,GAGI5oE,KAAKknE,UAAY,EACjBlnE,KAAKooE,gBAAgB,EACzB,CACA,gBAAAK,CAAiBF,EAAU3hE,GACvB,IAAK,IAAIlI,EAAIsB,KAAKinE,SAAUvoE,GAAK,EAAGA,IAChC,GAAI6pE,EAASrkE,SAASlE,KAAKgnE,OAAOtoE,KAAOsB,KAAK8mE,YAAYQ,gBAAgBtnE,KAAKmK,MAAMzL,MAAQkI,EACzF,OAAOlI,EAGf,OAAQ,CACZ,CACA,WAAAmqE,CAAYN,EAAUC,GAClB,MAAMX,EAAM7nE,KAAKyoE,iBAAiBF,EAAUC,GAC5CxoE,KAAKooE,gBAAgBP,EAAM,EAC/B,CACA,uBAAAiB,GACI9oE,KAAK6oE,YAAYpC,GAAe,GAAGnZ,KACvC,CACA,2BAAAyb,GACI/oE,KAAK6oE,YAAYrC,GAAoB,GAAGlZ,KAC5C,CACA,0BAAA0b,GACIhpE,KAAK6oE,YAAYtC,GAAmB,GAAGjZ,KAC3C,CACA,MAAApjD,CAAOm9D,GACH,MAAMQ,EAAM7nE,KAAKonE,SAASC,GACtBQ,GAAO,IACHA,IAAQ7nE,KAAKinE,SACbjnE,KAAKuF,OAGLvF,KAAKmK,MAAMH,OAAO69D,EAAK,GACvB7nE,KAAKgnE,OAAOh9D,OAAO69D,EAAK,GACxB7nE,KAAKinE,WACLjnE,KAAKunE,wBACLvnE,KAAKuoB,QAAQm/C,UAAUL,GAAS,IAG5C,CAEA,gCAAA4B,GAEI,OAAOjpE,KAAKinE,UAAY,GAAKjnE,KAAKgnE,OAAO,KAAO,GAAE/b,KAAOjrD,KAAKmK,MAAM,GAAK,IAC7E,CACA,QAAA++D,CAAS7B,GACL,OAAOrnE,KAAKonE,SAASC,IAAY,CACrC,CACA,iBAAA8B,CAAkB9B,GACd,MAAM+B,EAAappE,KAAKonE,SAASC,GAAW,EAC5C,OAAO+B,GAAc,EAAIppE,KAAKmK,MAAMi/D,GAAc,IACtD,CACA,wBAAAC,GACI,OAAyB,IAAlBrpE,KAAKinE,UAAkBjnE,KAAKgnE,OAAO,KAAO,GAAE1Z,IACvD,CAEA,UAAAgc,CAAW7uD,GACP,IAAK,IAAI/b,EAAIsB,KAAKinE,SAAUvoE,GAAK,EAAGA,IAAK,CACrC,MAAM4zD,EAAKtyD,KAAKgnE,OAAOtoE,GACjB6qE,EAAKvpE,KAAK8mE,YAAYQ,gBAAgBtnE,KAAKmK,MAAMzL,IACvD,GAAI4zD,IAAO73C,GAAW8uD,IAAO,GAAGjc,KAC5B,OAAO,EAEX,GAAI+Y,GAAmBxoB,IAAIyU,KAAQiX,EAC/B,OAAO,CAEf,CACA,OAAO,CACX,CACA,wBAAAC,GACI,IAAK,IAAI9qE,EAAIsB,KAAKinE,SAAUvoE,GAAK,EAAGA,IAAK,CACrC,MAAM4zD,EAAKtyD,KAAKgnE,OAAOtoE,GACjB6qE,EAAKvpE,KAAK8mE,YAAYQ,gBAAgBtnE,KAAKmK,MAAMzL,IACvD,GAAI2zD,GAAiBC,IAAOiX,IAAO,GAAGjc,KAClC,OAAO,EAEX,GAAI+Y,GAAmBxoB,IAAIyU,KAAQiX,EAC/B,OAAO,CAEf,CACA,OAAO,CACX,CACA,kBAAAE,CAAmBhvD,GACf,IAAK,IAAI/b,EAAIsB,KAAKinE,SAAUvoE,GAAK,EAAGA,IAAK,CACrC,MAAM4zD,EAAKtyD,KAAKgnE,OAAOtoE,GACjB6qE,EAAKvpE,KAAK8mE,YAAYQ,gBAAgBtnE,KAAKmK,MAAMzL,IACvD,GAAI4zD,IAAO73C,GAAW8uD,IAAO,GAAGjc,KAC5B,OAAO,EAEX,IAAMgF,IAAO,GAAEb,IAAMa,IAAO,GAAEnD,KAAOoa,IAAO,GAAGjc,MAAS+Y,GAAmBxoB,IAAIyU,KAAQiX,EACnF,OAAO,CAEf,CACA,OAAO,CACX,CACA,gBAAAG,CAAiBjvD,GACb,IAAK,IAAI/b,EAAIsB,KAAKinE,SAAUvoE,GAAK,EAAGA,IAAK,CACrC,MAAM4zD,EAAKtyD,KAAKgnE,OAAOtoE,GACjB6qE,EAAKvpE,KAAK8mE,YAAYQ,gBAAgBtnE,KAAKmK,MAAMzL,IACvD,GAAI4zD,IAAO73C,GAAW8uD,IAAO,GAAGjc,KAC5B,OAAO,EAEX,GAAKgF,IAAO,GAAEnH,QAAUoe,IAAO,GAAGjc,MAAS+Y,GAAmBxoB,IAAIyU,KAAQiX,EACtE,OAAO,CAEf,CACA,OAAO,CACX,CACA,eAAAI,CAAgBlvD,GACZ,IAAK,IAAI/b,EAAIsB,KAAKinE,SAAUvoE,GAAK,EAAGA,IAAK,CACrC,MAAM4zD,EAAKtyD,KAAKgnE,OAAOtoE,GAEvB,GADWsB,KAAK8mE,YAAYQ,gBAAgBtnE,KAAKmK,MAAMzL,MAC5C,GAAG4uD,KAAd,CAGA,GAAIgF,IAAO73C,EACP,OAAO,EAEX,GAAI63C,IAAO,GAAE1B,OAAS0B,IAAO,GAAExB,UAAYwB,IAAO,GAAEhF,KAChD,OAAO,CALX,CAOJ,CACA,OAAO,CACX,CACA,+BAAAsc,GACI,IAAK,IAAIlrE,EAAIsB,KAAKinE,SAAUvoE,GAAK,EAAGA,IAAK,CACrC,MAAM4zD,EAAKtyD,KAAKgnE,OAAOtoE,GAEvB,GADWsB,KAAK8mE,YAAYQ,gBAAgBtnE,KAAKmK,MAAMzL,MAC5C,GAAG4uD,KAAd,CAGA,GAAIgF,IAAO,GAAEzB,OAASyB,IAAO,GAAEnB,OAASmB,IAAO,GAAEtB,MAC7C,OAAO,EAEX,GAAIsB,IAAO,GAAE1B,OAAS0B,IAAO,GAAEhF,KAC3B,OAAO,CALX,CAOJ,CACA,OAAO,CACX,CACA,gBAAAuc,CAAiBpvD,GACb,IAAK,IAAI/b,EAAIsB,KAAKinE,SAAUvoE,GAAK,EAAGA,IAAK,CACrC,MAAM4zD,EAAKtyD,KAAKgnE,OAAOtoE,GAEvB,GADWsB,KAAK8mE,YAAYQ,gBAAgBtnE,KAAKmK,MAAMzL,MAC5C,GAAG4uD,KAAd,CAGA,GAAIgF,IAAO73C,EACP,OAAO,EAEX,GAAI63C,IAAO,GAAEjD,QAAUiD,IAAO,GAAElD,SAC5B,OAAO,CALX,CAOJ,CACA,OAAO,CACX,CAEA,sBAAA0a,GACI,KAAO3D,GAA0BxsB,IAAI35C,KAAKmnE,eACtCnnE,KAAKuF,KAEb,CACA,gCAAAwkE,GACI,KAAO3D,GAAqCzsB,IAAI35C,KAAKmnE,eACjDnnE,KAAKuF,KAEb,CACA,mCAAAykE,CAAoCC,GAChC,KAAOjqE,KAAKmnE,eAAiB8C,GAAe7D,GAAqCzsB,IAAI35C,KAAKmnE,eACtFnnE,KAAKuF,KAEb,ECnTG,IAAI2kE,IACX,SAAWA,GACPA,EAAUA,EAAkB,OAAI,GAAK,SACrCA,EAAUA,EAAmB,QAAI,GAAK,SACzC,CAHD,CAGGA,GAAYA,KAAcA,GAAY,CAAC,IAC1C,MAAMC,GAAS,CAAE7gE,KAAM4gE,GAAUE,QAE1B,MAAMC,GACT,WAAA9sE,CAAYupE,GACR9mE,KAAK8mE,YAAcA,EACnB9mE,KAAK8+C,QAAU,GACf9+C,KAAKsqE,SAAW,IACpB,CAIA,8BAAAC,CAA+B3C,EAAY4C,GACvC,MAAMC,EAAa,GACbC,EAAgBF,EAAQ7rE,OACxBgsE,EAAY3qE,KAAK8mE,YAAY8D,WAAWhD,GACxCiD,EAAiB7qE,KAAK8mE,YAAYQ,gBAAgBM,GACxD,IAAK,IAAIlpE,EAAI,EAAGA,EAAIsB,KAAK8+C,QAAQngD,OAAQD,IAAK,CAC1C,MAAMsJ,EAAQhI,KAAK8+C,QAAQpgD,GAC3B,GAAIsJ,EAAMsB,OAAS4gE,GAAUE,OACzB,MAEJ,MAAM,QAAE/C,GAAYr/D,EACpB,GAAIhI,KAAK8mE,YAAY8D,WAAWvD,KAAasD,GACzC3qE,KAAK8mE,YAAYQ,gBAAgBD,KAAawD,EAAgB,CAC9D,MAAMC,EAAe9qE,KAAK8mE,YAAYiE,YAAY1D,GAC9CyD,EAAansE,SAAW+rE,GACxBD,EAAWrmE,KAAK,CAAEyjE,IAAKnpE,EAAGmiD,MAAOiqB,GAEzC,CACJ,CACA,OAAOL,CACX,CACA,uBAAAO,CAAwBpD,GACpB,GAAI5nE,KAAK8+C,QAAQngD,OAvCC,EAwCd,OACJ,MAAM6rE,EAAUxqE,KAAK8mE,YAAYiE,YAAYnD,GACvC6C,EAAazqE,KAAKuqE,+BAA+B3C,EAAY4C,GACnE,GAAIC,EAAW9rE,OA3CG,EA4Cd,OAEJ,MAAMssE,EAAa,IAAIjtB,IAAIwsB,EAAQxmE,KAAKknE,GAAW,CAACA,EAAOvtE,KAAMutE,EAAOptE,UACxE,IAAIqtE,EAAkB,EAEtB,IAAK,IAAIzsE,EAAI,EAAGA,EAAI+rE,EAAW9rE,OAAQD,IAAK,CACxC,MAAM0sE,EAAYX,EAAW/rE,GAEzB0sE,EAAUvqB,MAAMwqB,OAAOC,GAAUL,EAAWptB,IAAIytB,EAAM3tE,QAAU2tE,EAAMxtE,UACtEqtE,GAAmB,EACfA,GAtDM,GAuDNnrE,KAAK8+C,QAAQ90C,OAAOohE,EAAUvD,IAAK,GAG/C,CACJ,CAEA,YAAA0D,GACIvrE,KAAK8+C,QAAQx0C,QAAQ6/D,GACzB,CACA,WAAAqB,CAAYnE,EAASn6D,GACjBlN,KAAKgrE,wBAAwB3D,GAC7BrnE,KAAK8+C,QAAQx0C,QAAQ,CACjBhB,KAAM4gE,GAAUuB,QAChBpE,UACAn6D,SAER,CACA,0BAAAw+D,CAA2BrE,EAASn6D,GAChC,MAAMy+D,EAAc3rE,KAAK8+C,QAAQh/C,QAAQE,KAAKsqE,UAC9CtqE,KAAK8+C,QAAQ90C,OAAO2hE,EAAa,EAAG,CAChCriE,KAAM4gE,GAAUuB,QAChBpE,UACAn6D,SAER,CACA,WAAA0+D,CAAY5jE,GACR,MAAM6jE,EAAa7rE,KAAK8+C,QAAQh/C,QAAQkI,GACpC6jE,GAAc,GACd7rE,KAAK8+C,QAAQ90C,OAAO6hE,EAAY,EAExC,CAMA,iBAAAC,GACI,MAAMC,EAAY/rE,KAAK8+C,QAAQh/C,QAAQqqE,IACnC4B,GAAa,EACb/rE,KAAK8+C,QAAQ90C,OAAO,EAAG+hE,EAAY,GAGnC/rE,KAAK8+C,QAAQngD,OAAS,CAE9B,CAEA,iCAAAqtE,CAAkCvxD,GAC9B,MAAMzS,EAAQhI,KAAK8+C,QAAQ5G,MAAMlwC,GAAUA,EAAMsB,OAAS4gE,GAAUE,QAAUpqE,KAAK8mE,YAAY8D,WAAW5iE,EAAMq/D,WAAa5sD,IAC7H,OAAOzS,GAASA,EAAMsB,OAAS4gE,GAAUuB,QAAUzjE,EAAQ,IAC/D,CACA,eAAAikE,CAAgB5E,GACZ,OAAOrnE,KAAK8+C,QAAQ5G,MAAMlwC,GAAUA,EAAMsB,OAAS4gE,GAAUuB,SAAWzjE,EAAMq/D,UAAYA,GAC9F,EC3GJ,SAAS6E,GAAepuE,GACpB,MAAO,CACHsiD,SAAU,QACVtiD,QACAikD,WAAY,KAEpB,CACO,MAAMoqB,GAAqB,CAE9B,cAAAC,GACI,MAAO,CACHhsB,SAAU,YACV9N,KAAMyX,GAAcsiB,UACpB/rB,WAAY,GAEpB,EACA,sBAAAgsB,GACI,MAAO,CACHlsB,SAAU,qBACVE,WAAY,GAEpB,EACA,aAAAljC,CAAc3C,EAASmmC,EAAcC,GACjC,MAAO,CACHT,SAAU3lC,EACVA,UACAomC,QACAD,eACAN,WAAY,GACZyB,WAAY,KAEpB,EACA,iBAAAwqB,CAAkB3oE,GACd,MAAO,CACHw8C,SAAU,WACVx8C,OACAm+C,WAAY,KAEpB,EAEA,WAAAyqB,CAAYzqB,EAAY0qB,GACpB1qB,EAAWzB,WAAWl8C,KAAKqoE,GAC3BA,EAAQ1qB,WAAaA,CACzB,EACA,YAAA2qB,CAAa3qB,EAAY0qB,EAASE,GAC9B,MAAM1E,EAAelmB,EAAWzB,WAAWxgD,QAAQ6sE,GACnD5qB,EAAWzB,WAAWt2C,OAAOi+D,EAAc,EAAGwE,GAC9CA,EAAQ1qB,WAAaA,CACzB,EACA,kBAAA6qB,CAAmBC,EAAiBC,GAChCD,EAAgBngE,QAAUogE,CAC9B,EACA,kBAAA/F,CAAmB8F,GACf,OAAOA,EAAgBngE,OAC3B,EACA,eAAAqgE,CAAgBl9D,EAAUlS,EAAMqkD,EAAUC,GACtC,MAAM+qB,EAAcn9D,EAASywC,WAAWpI,MAAM3vC,GAA2B,kBAAlBA,EAAK63C,WAC5D,GAAI4sB,EACAA,EAAYrvE,KAAOA,EACnBqvE,EAAYhrB,SAAWA,EACvBgrB,EAAY/qB,SAAWA,MAEtB,CACD,MAAM15C,EAAO,CACT63C,SAAU,gBACVziD,OACAqkD,WACAC,WACAF,WAAY,MAEhBoqB,GAAmBK,YAAY38D,EAAUtH,EAC7C,CACJ,EACA,eAAA0kE,CAAgBp9D,EAAUyiC,GACtBziC,EAASyiC,KAAOA,CACpB,EACA,eAAA46B,CAAgBr9D,GACZ,OAAOA,EAASyiC,IACpB,EACA,UAAA66B,CAAW5kE,GACP,GAAIA,EAAKw5C,WAAY,CACjB,MAAM8lB,EAAMt/D,EAAKw5C,WAAWzB,WAAWxgD,QAAQyI,GAC/CA,EAAKw5C,WAAWzB,WAAWt2C,OAAO69D,EAAK,GACvCt/D,EAAKw5C,WAAa,IACtB,CACJ,EACA,UAAAqrB,CAAWrrB,EAAYtvC,GACnB,GAAIsvC,EAAWzB,WAAW3hD,OAAS,EAAG,CAClC,MAAM0uE,EAAWtrB,EAAWzB,WAAWyB,EAAWzB,WAAW3hD,OAAS,GACtE,GAAIwtE,GAAmBmB,WAAWD,GAE9B,YADAA,EAASvvE,OAAS2U,EAG1B,CACA05D,GAAmBK,YAAYzqB,EAAYmqB,GAAez5D,GAC9D,EACA,gBAAA86D,CAAiBxrB,EAAYtvC,EAAMk6D,GAC/B,MAAMU,EAAWtrB,EAAWzB,WAAWyB,EAAWzB,WAAWxgD,QAAQ6sE,GAAiB,GAClFU,GAAYlB,GAAmBmB,WAAWD,GAC1CA,EAASvvE,OAAS2U,EAGlB05D,GAAmBO,aAAa3qB,EAAYmqB,GAAez5D,GAAOk6D,EAE1E,EACA,eAAAa,CAAgBC,EAAW5sB,GACvB,MAAM6sB,EAAoB,IAAIn0B,IAAIk0B,EAAU5sB,MAAM78C,KAAK2pE,GAASA,EAAKhwE,QACrE,IAAK,IAAIiwE,EAAI,EAAGA,EAAI/sB,EAAMliD,OAAQivE,IACzBF,EAAkB/zB,IAAIkH,EAAM+sB,GAAGjwE,OAChC8vE,EAAU5sB,MAAMz8C,KAAKy8C,EAAM+sB,GAGvC,EAEA,aAAAC,CAActlE,GACV,OAAOA,EAAK+3C,WAAW,EAC3B,EACA,aAAAwtB,CAAcvlE,GACV,OAAOA,EAAK+3C,UAChB,EACA,aAAAytB,CAAcxlE,GACV,OAAOA,EAAKw5C,UAChB,EACA,WAAAgpB,CAAY1D,GACR,OAAOA,EAAQxmB,KACnB,EAEA,UAAA+pB,CAAWvD,GACP,OAAOA,EAAQ5sD,OACnB,EACA,eAAA6sD,CAAgBD,GACZ,OAAOA,EAAQzmB,YACnB,EACA,kBAAAotB,CAAmBC,GACf,OAAOA,EAASnwE,KACpB,EACA,qBAAAowE,CAAsBC,GAClB,OAAOA,EAAYvqE,IACvB,EACA,uBAAAwqE,CAAwBpB,GACpB,OAAOA,EAAYrvE,IACvB,EACA,2BAAA0wE,CAA4BrB,GACxB,OAAOA,EAAYhrB,QACvB,EACA,2BAAAssB,CAA4BtB,GACxB,OAAOA,EAAY/qB,QACvB,EAEA,UAAAqrB,CAAW/kE,GACP,MAAyB,UAAlBA,EAAK63C,QAChB,EACA,aAAAmuB,CAAchmE,GACV,MAAyB,aAAlBA,EAAK63C,QAChB,EACA,kBAAAouB,CAAmBjmE,GACf,MAAyB,kBAAlBA,EAAK63C,QAChB,EACA,aAAAquB,CAAclmE,GACV,OAAOjM,OAAOC,UAAUC,eAAeS,KAAKsL,EAAM,UACtD,EAEA,yBAAAmmE,CAA0BnmE,EAAMg4C,GAC5Bh4C,EAAKu4C,mBAAqBP,CAC9B,EACA,yBAAAouB,CAA0BpmE,GACtB,OAAOA,EAAKu4C,kBAChB,EACA,4BAAA8tB,CAA6BrmE,EAAMsmE,GAC/BtmE,EAAKu4C,mBAAqB,IAAKv4C,EAAKu4C,sBAAuB+tB,EAC/D,GCzKEC,GAAqB,OACrBC,GAAkB,sBAClBC,GAAwB,6DACxBC,GAAiC,CACnC,6CACA,6CACA,uDACA,kCACA,kCACA,yCACA,yCACA,iCACA,0BACA,2BACA,0BACA,gCACA,0BACA,wBACA,8BACA,8BACA,8BACA,8BACA,qCACA,qCACA,qCACA,qCACA,6BACA,sBACA,2CACA,wDACA,iDACA,mDACA,wDACA,iDACA,mDACA,sCACA,6CACA,6CACA,sDACA,8DACA,8CACA,iFACA,wEACA,uCACA,gDACA,uDACA,kCACA,+BACA,+BACA,yBACA,gCACA,kCACA,sCACA,2CACA,yCACA,wBACA,4BACA,sCACA,mCAEEC,GAA8C,IAC7CD,GACH,mCACA,wCAEEE,GAAyB,IAAI51B,IAAI,CACnC,uCACA,qCACA,SAEE61B,GAAoC,CAAC,mCAAoC,wCACzEC,GAAmD,IAClDD,GACH,mCACA,wCAGJ,SAASE,GAAUttB,EAAUutB,GACzB,OAAOA,EAASC,MAAMjjE,GAAWy1C,EAASsC,WAAW/3C,IACzD,CC/EA,MAAMkjE,GAAa,CACfC,UAAW,YACXC,gBAAiB,yBAGfC,GAAsB,gBACtBC,GAA+B,gBAC/BC,GAA2B,IAAI9xB,IAAI,CACrC,gBACA,gBACA,gBACA,cACA,WACA,gBACA,kBACA,WACA,cACA,WACA,oBACA,gBACA,eACA,mBACA,YACA,aACA,WACA,eACA,oBACA,eACA,cACA,cACA,mBACA,YACA,aA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","sources":["webpack://frontend/./node_modules/extend/index.js","webpack://frontend/./node_modules/react-markdown/node_modules/unist-util-stringify-position/lib/index.js","webpack://frontend/./node_modules/react-markdown/node_modules/vfile-message/lib/index.js","webpack://frontend/./node_modules/react-markdown/node_modules/vfile/lib/minpath.browser.js","webpack://frontend/./node_modules/react-markdown/node_modules/vfile/lib/minproc.browser.js","webpack://frontend/./node_modules/react-markdown/node_modules/vfile/lib/minurl.shared.js","webpack://frontend/./node_modules/react-markdown/node_modules/vfile/lib/minurl.browser.js","webpack://frontend/./node_modules/react-markdown/node_modules/vfile/lib/index.js","webpack://frontend/./node_modules/bail/index.js","webpack://frontend/./node_modules/is-plain-obj/index.js","webpack://frontend/./node_modules/trough/index.js","webpack://frontend/./node_modules/unified/node_modules/unist-util-stringify-position/lib/index.js","webpack://frontend/./node_modules/unified/node_modules/vfile-message/lib/index.js","webpack://frontend/./node_modules/unified/node_modules/vfile/lib/minpath.browser.js","webpack://frontend/./node_modules/unified/node_modules/vfile/lib/minproc.browser.js","webpack://frontend/./node_modules/unified/node_modules/vfile/lib/minurl.shared.js","webpack://frontend/./node_modules/unified/node_modules/vfile/lib/minurl.browser.js","webpack://frontend/./node_modules/unified/node_modules/vfile/lib/index.js","webpack://frontend/./node_modules/unified/lib/index.js","webpack://frontend/./node_modules/react-markdown/node_modules/mdast-util-to-string/lib/index.js","webpack://frontend/./node_modules/micromark-util-chunked/index.js","webpack://frontend/./node_modules/micromark-util-combine-extensions/index.js","webpack://frontend/./node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack://frontend/./node_modules/micromark-util-character/index.js","webpack://frontend/./node_modules/micromark-factory-space/index.js","webpack://frontend/./node_modules/react-markdown/node_modules/micromark/lib/initialize/content.js","webpack://frontend/./node_modules/react-markdown/node_modules/micromark/lib/initialize/document.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://frontend/./node_modules/micromark-util-subtokenize/index.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/content.js","webpack://frontend/./node_modules/react-markdown/node_modules/micromark/lib/initialize/flow.js","webpack://frontend/./node_modules/react-markdown/node_modules/micromark/lib/initialize/text.js","webpack://frontend/./node_modules/micromark-util-resolve-all/index.js","webpack://frontend/./node_modules/react-markdown/node_modules/micromark/lib/create-tokenizer.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/list.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://frontend/./node_modules/micromark-factory-destination/index.js","webpack://frontend/./node_modules/micromark-factory-label/index.js","webpack://frontend/./node_modules/micromark-factory-title/index.js","webpack://frontend/./node_modules/micromark-factory-whitespace/index.js","webpack://frontend/./node_modules/micromark-util-normalize-identifier/index.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://frontend/./node_modules/micromark-util-html-tag-name/index.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://frontend/./node_modules/decode-named-character-reference/index.dom.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://frontend/./node_modules/micromark-util-classify-character/index.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://frontend/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://frontend/./node_modules/react-markdown/node_modules/micromark/lib/constructs.js","webpack://frontend/./node_modules/react-markdown/node_modules/micromark/lib/parse.js","webpack://frontend/./node_modules/react-markdown/node_modules/micromark/lib/preprocess.js","webpack://frontend/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://frontend/./node_modules/micromark-util-decode-string/index.js","webpack://frontend/./node_modules/react-markdown/node_modules/mdast-util-from-markdown/lib/index.js","webpack://frontend/./node_modules/react-markdown/node_modules/micromark/lib/postprocess.js","webpack://frontend/./node_modules/react-markdown/node_modules/remark-parse/lib/index.js","webpack://frontend/./node_modules/micromark-util-sanitize-uri/index.js","webpack://frontend/./node_modules/mdast-util-to-hast/node_modules/unist-util-is/lib/index.js","webpack://frontend/./node_modules/mdast-util-to-hast/node_modules/unist-util-visit-parents/lib/index.js","webpack://frontend/./node_modules/mdast-util-to-hast/node_modules/unist-util-visit/lib/index.js","webpack://frontend/./node_modules/mdast-util-to-hast/node_modules/unist-util-position/lib/index.js","webpack://frontend/./node_modules/mdast-util-definitions/node_modules/unist-util-is/lib/index.js","webpack://frontend/./node_modules/mdast-util-definitions/node_modules/unist-util-visit-parents/lib/index.js","webpack://frontend/./node_modules/mdast-util-definitions/node_modules/unist-util-visit/lib/index.js","webpack://frontend/./node_modules/mdast-util-definitions/lib/index.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/revert.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://frontend/./node_modules/trim-lines/index.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/footnote.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/state.js","webpack://frontend/./node_modules/unist-util-generated/lib/index.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/index.js","webpack://frontend/./node_modules/mdast-util-to-hast/lib/footer.js","webpack://frontend/./node_modules/remark-rehype/lib/index.js","webpack://frontend/./node_modules/property-information/lib/util/schema.js","webpack://frontend/./node_modules/property-information/lib/util/merge.js","webpack://frontend/./node_modules/property-information/lib/normalize.js","webpack://frontend/./node_modules/property-information/lib/util/info.js","webpack://frontend/./node_modules/property-information/lib/util/types.js","webpack://frontend/./node_modules/property-information/lib/util/defined-info.js","webpack://frontend/./node_modules/property-information/lib/util/create.js","webpack://frontend/./node_modules/property-information/lib/xlink.js","webpack://frontend/./node_modules/property-information/lib/xml.js","webpack://frontend/./node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://frontend/./node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://frontend/./node_modules/property-information/lib/xmlns.js","webpack://frontend/./node_modules/property-information/lib/aria.js","webpack://frontend/./node_modules/property-information/lib/html.js","webpack://frontend/./node_modules/property-information/lib/svg.js","webpack://frontend/./node_modules/property-information/index.js","webpack://frontend/./node_modules/react-markdown/node_modules/unist-util-is/lib/index.js","webpack://frontend/./node_modules/react-markdown/node_modules/unist-util-visit-parents/lib/index.js","webpack://frontend/./node_modules/react-markdown/node_modules/unist-util-visit/lib/index.js","webpack://frontend/./node_modules/react-markdown/lib/rehype-filter.js","webpack://frontend/./node_modules/hast-util-whitespace/index.js","webpack://frontend/./node_modules/property-information/lib/find.js","webpack://frontend/./node_modules/property-information/lib/hast-to-react.js","webpack://frontend/./node_modules/space-separated-tokens/index.js","webpack://frontend/./node_modules/comma-separated-tokens/index.js","webpack://frontend/./node_modules/style-to-object/index.mjs","webpack://frontend/./node_modules/react-markdown/lib/uri-transformer.js","webpack://frontend/./node_modules/react-markdown/lib/ast-to-react.js","webpack://frontend/./node_modules/react-markdown/lib/react-markdown.js","webpack://frontend/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-is/lib/index.js","webpack://frontend/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/index.js","webpack://frontend/./node_modules/mdast-util-find-and-replace/lib/index.js","webpack://frontend/./node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","webpack://frontend/./node_modules/mdast-util-newline-to-break/lib/index.js","webpack://frontend/./node_modules/remark-breaks/index.js","webpack://frontend/./node_modules/@ungap/structured-clone/esm/types.js","webpack://frontend/./node_modules/@ungap/structured-clone/esm/deserialize.js","webpack://frontend/./node_modules/@ungap/structured-clone/esm/serialize.js","webpack://frontend/./node_modules/@ungap/structured-clone/esm/index.js","webpack://frontend/./node_modules/hast-util-parse-selector/lib/index.js","webpack://frontend/./node_modules/hastscript/lib/create-h.js","webpack://frontend/./node_modules/hastscript/lib/svg-case-sensitive-tag-names.js","webpack://frontend/./node_modules/hastscript/lib/index.js","webpack://frontend/./node_modules/hast-util-from-parse5/node_modules/vfile-location/lib/index.js","webpack://frontend/./node_modules/web-namespaces/index.js","webpack://frontend/./node_modules/hast-util-from-parse5/lib/index.js","webpack://frontend/./node_modules/zwitch/index.js","webpack://frontend/./node_modules/hast-util-to-parse5/lib/index.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/html-void-elements/index.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/parse5/dist/common/unicode.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/parse5/dist/common/error-codes.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/parse5/dist/tokenizer/preprocessor.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/parse5/dist/common/token.js","webpack://frontend/./node_modules/entities/lib/esm/generated/decode-data-html.js","webpack://frontend/./node_modules/entities/lib/esm/decode_codepoint.js","webpack://frontend/./node_modules/entities/lib/esm/generated/decode-data-xml.js","webpack://frontend/./node_modules/entities/lib/esm/decode.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/parse5/dist/common/html.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/parse5/dist/tokenizer/index.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/parse5/dist/parser/open-element-stack.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/parse5/dist/parser/formatting-element-list.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/parse5/dist/tree-adapters/default.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/parse5/dist/common/doctype.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/parse5/dist/common/foreign-content.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/parse5/dist/parser/index.js","webpack://frontend/./node_modules/entities/lib/esm/escape.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/parse5/dist/serializer/index.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/unist-util-position/lib/index.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/unist-util-is/lib/index.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/unist-util-visit-parents/lib/index.js","webpack://frontend/./node_modules/hast-util-raw/lib/index.js","webpack://frontend/./node_modules/hast-util-raw/node_modules/unist-util-visit/lib/index.js","webpack://frontend/./node_modules/rehype-raw/lib/index.js","webpack://frontend/./src/components/TextWithFormatting.js","webpack://frontend/./node_modules/is-buffer/index.js","webpack://frontend/./node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js","webpack://frontend/./node_modules/react-markdown/node_modules/react-is/index.js","webpack://frontend/./node_modules/style-to-object/index.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = index\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n */\n\n/**\n * @typedef {Content | Root} Node\n */\n\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/**\n * Turn normal line endings into hard breaks.\n *\n * @param {Node} tree\n *   Tree to change.\n * @returns {void}\n *   Nothing.\n */\nexport function newlineToBreak(tree) {\n  findAndReplace(tree, /\\r?\\n|\\r/g, replace)\n}\n\n/**\n * Replace line endings.\n *\n * @type {ReplaceFunction}\n */\nfunction replace() {\n  return {type: 'break'}\n}\n","/**\n * @typedef {import('mdast').Root} Root\n */\n\nimport {newlineToBreak} from 'mdast-util-newline-to-break'\n\n/**\n * Plugin to support hard breaks without needing spaces or escapes (turns enters\n * into `<br>`s).\n *\n * @type {import('unified').Plugin<void[], Root>}\n */\nexport default function remarkBreaks() {\n  return newlineToBreak\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n */\n\n/**\n * @template {string} SimpleSelector\n *   Selector type.\n * @template {string} DefaultTagName\n *   Default tag name.\n * @typedef {(\n *   SimpleSelector extends ''\n *     ? DefaultTagName\n *     : SimpleSelector extends `${infer TagName}.${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends `${infer TagName}#${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends string\n *     ? SimpleSelector\n *     : DefaultTagName\n * )} ExtractTagName\n *   Extract tag name from a simple selector.\n */\n\nconst search = /[#.]/g\n\n/**\n * Create a hast element from a simple CSS selector.\n *\n * @template {string} Selector\n *   Type of selector.\n * @template {string} [DefaultTagName='div']\n *   Type of default tag name (default: `'div'`).\n * @param {Selector | null | undefined} [selector]\n *   Simple CSS selector (optional).\n *\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\n *   Multiple classes are allowed.\n *   Uses the last ID if multiple IDs are found.\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\n * @returns {Element & {tagName: ExtractTagName<Selector, DefaultTagName>}}\n *   Built element.\n */\nexport function parseSelector(selector, defaultTagName) {\n  const value = selector || ''\n  /** @type {Properties} */\n  const props = {}\n  let start = 0\n  /** @type {string | undefined} */\n  let previous\n  /** @type {string | undefined} */\n  let tagName\n\n  while (start < value.length) {\n    search.lastIndex = start\n    const match = search.exec(value)\n    const subvalue = value.slice(start, match ? match.index : value.length)\n\n    if (subvalue) {\n      if (!previous) {\n        tagName = subvalue\n      } else if (previous === '#') {\n        props.id = subvalue\n      } else if (Array.isArray(props.className)) {\n        props.className.push(subvalue)\n      } else {\n        props.className = [subvalue]\n      }\n\n      start += subvalue.length\n    }\n\n    if (match) {\n      previous = match[0]\n      start++\n    }\n  }\n\n  return {\n    type: 'element',\n    // @ts-expect-error: tag name is parsed.\n    tagName: tagName || defaultTagName || 'div',\n    properties: props,\n    children: []\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n *\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef {Element | Root} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {number | string} StyleValue\n *   Value for a CSS style field.\n * @typedef {Record<string, StyleValue>} Style\n *   Supported value of a `style` prop.\n * @typedef {boolean | number | string | null | undefined} PrimitiveValue\n *   Primitive property value.\n * @typedef {Array<number | string>} ArrayValue\n *   List of property values for space- or comma separated values (such as `className`).\n * @typedef {ArrayValue | PrimitiveValue} PropertyValue\n *   Primitive value or list value.\n * @typedef {{[property: string]: PropertyValue | Style}} Properties\n *   Acceptable value for element properties.\n *\n * @typedef {number | string | null | undefined} PrimitiveChild\n *   Primitive children, either ignored (nullish), or turned into text nodes.\n * @typedef {Array<ArrayChildNested | Nodes | PrimitiveChild>} ArrayChild\n *   List of children.\n * @typedef {Array<Nodes | PrimitiveChild>} ArrayChildNested\n *   List of children (deep).\n * @typedef {ArrayChild | Nodes | PrimitiveChild} Child\n *   Acceptable child value.\n */\n\nimport {parse as commas} from 'comma-separated-tokens'\nimport {parseSelector} from 'hast-util-parse-selector'\nimport {find, normalize} from 'property-information'\nimport {parse as spaces} from 'space-separated-tokens'\n\nconst buttonTypes = new Set(['button', 'menu', 'reset', 'submit'])\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Schema} schema\n *   Schema to use.\n * @param {string} defaultTagName\n *   Default tag name.\n * @param {Array<string> | undefined} [caseSensitive]\n *   Case-sensitive tag names (default: `undefined`).\n * @returns\n *   `h`.\n */\nexport function createH(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive && createAdjustMap(caseSensitive)\n\n  /**\n   * Hyperscript compatible DSL for creating virtual hast trees.\n   *\n   * @overload\n   * @param {null | undefined} [selector]\n   * @param {...Child} children\n   * @returns {Root}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {Properties} properties\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @param {string | null | undefined} [selector]\n   *   Selector.\n   * @param {Child | Properties | null | undefined} [properties]\n   *   Properties (or first child) (default: `undefined`).\n   * @param {...Child} children\n   *   Children.\n   * @returns {Result}\n   *   Result.\n   */\n  function h(selector, properties, ...children) {\n    let index = -1\n    /** @type {Result} */\n    let node\n\n    if (selector === undefined || selector === null) {\n      node = {type: 'root', children: []}\n      // Properties are not supported for roots.\n      const child = /** @type {Child} */ (properties)\n      children.unshift(child)\n    } else {\n      node = parseSelector(selector, defaultTagName)\n      // Normalize the name.\n      node.tagName = node.tagName.toLowerCase()\n      if (adjust && own.call(adjust, node.tagName)) {\n        node.tagName = adjust[node.tagName]\n      }\n\n      // Handle props.\n      if (isProperties(properties, node.tagName)) {\n        /** @type {string} */\n        let key\n\n        for (key in properties) {\n          if (own.call(properties, key)) {\n            addProperty(schema, node.properties, key, properties[key])\n          }\n        }\n      } else {\n        children.unshift(properties)\n      }\n    }\n\n    // Handle children.\n    while (++index < children.length) {\n      addChild(node.children, children[index])\n    }\n\n    if (node.type === 'element' && node.tagName === 'template') {\n      node.content = {type: 'root', children: node.children}\n      node.children = []\n    }\n\n    return node\n  }\n\n  return h\n}\n\n/**\n * Check if something is properties or a child.\n *\n * @param {Child | Properties} value\n *   Value to check.\n * @param {string} name\n *   Tag name.\n * @returns {value is Properties}\n *   Whether `value` is a properties object.\n */\nfunction isProperties(value, name) {\n  if (\n    value === null ||\n    value === undefined ||\n    typeof value !== 'object' ||\n    Array.isArray(value)\n  ) {\n    return false\n  }\n\n  if (name === 'input' || !value.type || typeof value.type !== 'string') {\n    return true\n  }\n\n  if ('children' in value && Array.isArray(value.children)) {\n    return false\n  }\n\n  if (name === 'button') {\n    return buttonTypes.has(value.type.toLowerCase())\n  }\n\n  return !('value' in value)\n}\n\n/**\n * @param {Schema} schema\n *   Schema.\n * @param {Properties} properties\n *   Properties object.\n * @param {string} key\n *   Property name.\n * @param {PropertyValue | Style} value\n *   Property value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key)\n  let index = -1\n  /** @type {PropertyValue} */\n  let result\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return\n\n    result = value\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value)\n    } else if (info.commaSeparated) {\n      result = commas(value)\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '))\n    } else {\n      result = parsePrimitive(info, info.property, value)\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat()\n  } else {\n    result = info.property === 'style' ? style(value) : String(value)\n  }\n\n  if (Array.isArray(result)) {\n    /** @type {Array<number | string>} */\n    const finalResult = []\n\n    while (++index < result.length) {\n      // Assume no booleans in array.\n      const value = /** @type {number | string} */ (\n        parsePrimitive(info, info.property, result[index])\n      )\n      finalResult[index] = value\n    }\n\n    result = finalResult\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // Assume no booleans in `className`.\n    const value = /** @type {number | string} */ (result)\n    result = properties.className.concat(value)\n  }\n\n  properties[info.property] = result\n}\n\n/**\n * @param {Array<RootContent>} nodes\n *   Children.\n * @param {Child} value\n *   Child.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChild(nodes, value) {\n  let index = -1\n\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index])\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children)\n    } else {\n      nodes.push(value)\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n *   Property information.\n * @param {string} name\n *   Property name.\n * @param {PrimitiveValue} value\n *   Property value.\n * @returns {PrimitiveValue}\n *   Property value.\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value)\n    }\n\n    if (\n      (info.boolean || info.overloadedBoolean) &&\n      (value === '' || normalize(value) === normalize(name))\n    ) {\n      return true\n    }\n  }\n\n  return value\n}\n\n/**\n * Serialize a `style` object as a string.\n *\n * @param {Style} value\n *   Style object.\n * @returns {string}\n *   CSS string.\n */\nfunction style(value) {\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '))\n    }\n  }\n\n  return result.join('; ')\n}\n\n/**\n * Create a map to adjust casing.\n *\n * @param {Array<string>} values\n *   List of properly cased keys.\n * @returns {Record<string, string>}\n *   Map of lowercase keys to uppercase keys.\n */\nfunction createAdjustMap(values) {\n  /** @type {Record<string, string>} */\n  const result = {}\n  let index = -1\n\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index]\n  }\n\n  return result\n}\n","export const svgCaseSensitiveTagNames = [\n  'altGlyph',\n  'altGlyphDef',\n  'altGlyphItem',\n  'animateColor',\n  'animateMotion',\n  'animateTransform',\n  'clipPath',\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n  'foreignObject',\n  'glyphRef',\n  'linearGradient',\n  'radialGradient',\n  'solidColor',\n  'textArea',\n  'textPath'\n]\n","/**\n * @typedef {import('./create-h.js').Child} Child\n *   Acceptable child value.\n * @typedef {import('./create-h.js').Properties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./create-h.js').Result} Result\n *   Result from a `h` (or `s`) call.\n */\n\n// Register the JSX namespace on `h`.\n/**\n * @typedef {import('./jsx-classic.js').Element} h.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements\n */\n\n// Register the JSX namespace on `s`.\n/**\n * @typedef {import('./jsx-classic.js').Element} s.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements\n */\n\nimport {html, svg} from 'property-information'\nimport {createH} from './create-h.js'\nimport {svgCaseSensitiveTagNames} from './svg-case-sensitive-tag-names.js'\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const h = createH(html, 'div')\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const s = createH(svg, 'g', svgCaseSensitiveTagNames)\n","/**\n * @typedef {import('vfile').VFile} VFile\n * @typedef {import('vfile').Value} Value\n * @typedef {import('unist').Point} UnistPoint\n */\n\n/**\n *\n * @typedef PointLike\n *   unist point, allowed as input.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @callback ToPoint\n *   Get the line/column based `Point` for `offset` in the bound indices.\n *\n *   Returns `undefined` when given out of bounds input.\n *\n *   Also implemented in Rust in [`wooorm/markdown-rs`][markdown-rs].\n *\n *   [markdown-rs]: https://github.com/wooorm/markdown-rs/blob/main/src/util/location.rs\n * @param {number | null | undefined} [offset]\n *   Something that should be an `offset.\n * @returns {UnistPoint | undefined}\n *   Point, if `offset` is valid and in-bounds input.\n *\n * @callback ToOffset\n *   Get the `offset` from a line/column based `Point` in the bound indices.\n * @param {PointLike | null | undefined} [point]\n *   Something that should be a `point.\n * @returns {number | undefined}\n *   Offset (`number`) or `undefined` for invalid or out of bounds input.\n *\n * @typedef Location\n *   Accessors for index.\n * @property {ToPoint} toPoint\n *   Get the line/column based `Point` for `offset` in the bound indices.\n * @property {ToOffset} toOffset\n *   Get the `offset` from a line/column based `Point` in the bound indices.\n */\n\nconst search = /\\r?\\n|\\r/g\n\n/**\n * Create an index of the given document to translate between line/column and\n * offset based positional info.\n *\n * Also implemented in Rust in [`wooorm/markdown-rs`][markdown-rs].\n *\n * [markdown-rs]: https://github.com/wooorm/markdown-rs/blob/main/src/util/location.rs\n *\n * @param {VFile | Value} file\n *   File to index.\n * @returns {Location}\n *   Accessors for index.\n */\nexport function location(file) {\n  const value = String(file)\n  /**\n   * List, where each index is a line number (0-based), and each value is the\n   * byte index *after* where the line ends.\n   *\n   * @type {Array<number>}\n   */\n  const indices = []\n\n  search.lastIndex = 0\n\n  while (search.test(value)) {\n    indices.push(search.lastIndex)\n  }\n\n  indices.push(value.length + 1)\n\n  return {toPoint, toOffset}\n\n  /** @type {ToPoint} */\n  function toPoint(offset) {\n    let index = -1\n\n    if (\n      typeof offset === 'number' &&\n      offset > -1 &&\n      offset < indices[indices.length - 1]\n    ) {\n      while (++index < indices.length) {\n        if (indices[index] > offset) {\n          return {\n            line: index + 1,\n            column: offset - (index > 0 ? indices[index - 1] : 0) + 1,\n            offset\n          }\n        }\n      }\n    }\n  }\n\n  /** @type {ToOffset} */\n  function toOffset(point) {\n    const line = point && point.line\n    const column = point && point.column\n\n    if (\n      typeof line === 'number' &&\n      typeof column === 'number' &&\n      !Number.isNaN(line) &&\n      !Number.isNaN(column) &&\n      line - 1 in indices\n    ) {\n      const offset = (indices[line - 2] || 0) + column - 1 || 0\n\n      if (offset > -1 && offset < indices[indices.length - 1]) {\n        return offset\n      }\n    }\n  }\n}\n","/**\n * Map of web namespaces.\n *\n * @type {Record<string, string>}\n */\nexport const webNamespaces = {\n  html: 'http://www.w3.org/1999/xhtml',\n  mathml: 'http://www.w3.org/1998/Math/MathML',\n  svg: 'http://www.w3.org/2000/svg',\n  xlink: 'http://www.w3.org/1999/xlink',\n  xml: 'http://www.w3.org/XML/1998/namespace',\n  xmlns: 'http://www.w3.org/2000/xmlns/'\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementData} ElementData\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n *\n * @typedef {import('parse5').DefaultTreeAdapterMap} DefaultTreeAdapterMap\n * @typedef {import('parse5').Token.ElementLocation} P5ElementLocation\n * @typedef {import('parse5').Token.Location} P5Location\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n *\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {DefaultTreeAdapterMap['document']} P5Document\n * @typedef {DefaultTreeAdapterMap['documentFragment']} P5DocumentFragment\n * @typedef {DefaultTreeAdapterMap['documentType']} P5DocumentType\n * @typedef {DefaultTreeAdapterMap['commentNode']} P5Comment\n * @typedef {DefaultTreeAdapterMap['textNode']} P5Text\n * @typedef {DefaultTreeAdapterMap['element']} P5Element\n * @typedef {DefaultTreeAdapterMap['node']} P5Node\n * @typedef {DefaultTreeAdapterMap['template']} P5Template\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {Space | null | undefined} [space='html']\n *   Which space the document is in (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {VFile | null | undefined} [file]\n *   File used to add positional info to nodes (optional).\n *\n *   If given, the file should represent the original HTML source.\n * @property {boolean | null | undefined} [verbose=false]\n *   Whether to add extra positional info about starting tags, closing tags,\n *   and attributes to elements (default: `false`).\n *\n *   > 👉 **Note**: only used when `file` is given.\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n * @typedef State\n *   Info passed around about the current state.\n * @property {VFile | undefined} file\n *   Corresponding file.\n * @property {boolean} location\n *   Whether location info was found.\n * @property {Schema} schema\n *   Current schema.\n * @property {boolean | undefined} verbose\n *   Add extra positional info.\n */\n\nimport {ok as assert} from 'devlop'\nimport {h, s} from 'hastscript'\nimport {find, html, svg} from 'property-information'\nimport {location} from 'vfile-location'\nimport {webNamespaces} from 'web-namespaces'\n\nconst own = {}.hasOwnProperty\n/** @type {unknown} */\n// type-coverage:ignore-next-line\nconst proto = Object.prototype\n\n/**\n * Transform a `parse5` AST to hast.\n *\n * @param {P5Node} tree\n *   `parse5` tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Nodes}\n *   hast tree.\n */\nexport function fromParse5(tree, options) {\n  const settings = options || {}\n\n  return one(\n    {\n      file: settings.file || undefined,\n      location: false,\n      schema: settings.space === 'svg' ? svg : html,\n      verbose: settings.verbose || false\n    },\n    tree\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {P5Node} node\n *   p5 node.\n * @returns {Nodes}\n *   hast node.\n */\nfunction one(state, node) {\n  /** @type {Nodes} */\n  let result\n\n  switch (node.nodeName) {\n    case '#comment': {\n      const reference = /** @type {P5Comment} */ (node)\n      result = {type: 'comment', value: reference.data}\n      patch(state, reference, result)\n      return result\n    }\n\n    case '#document':\n    case '#document-fragment': {\n      const reference = /** @type {P5Document | P5DocumentFragment} */ (node)\n      const quirksMode =\n        'mode' in reference\n          ? reference.mode === 'quirks' || reference.mode === 'limited-quirks'\n          : false\n\n      result = {\n        type: 'root',\n        children: all(state, node.childNodes),\n        data: {quirksMode}\n      }\n\n      if (state.file && state.location) {\n        const doc = String(state.file)\n        const loc = location(doc)\n        const start = loc.toPoint(0)\n        const end = loc.toPoint(doc.length)\n        // Always defined as we give valid input.\n        assert(start, 'expected `start`')\n        assert(end, 'expected `end`')\n        result.position = {start, end}\n      }\n\n      return result\n    }\n\n    case '#documentType': {\n      const reference = /** @type {P5DocumentType} */ (node)\n      result = {type: 'doctype'}\n      patch(state, reference, result)\n      return result\n    }\n\n    case '#text': {\n      const reference = /** @type {P5Text} */ (node)\n      result = {type: 'text', value: reference.value}\n      patch(state, reference, result)\n      return result\n    }\n\n    // Element.\n    default: {\n      const reference = /** @type {P5Element} */ (node)\n      result = element(state, reference)\n      return result\n    }\n  }\n}\n\n/**\n * Transform children.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Array<P5Node>} nodes\n *   Nodes.\n * @returns {Array<RootContent>}\n *   hast nodes.\n */\nfunction all(state, nodes) {\n  let index = -1\n  /** @type {Array<RootContent>} */\n  const results = []\n\n  while (++index < nodes.length) {\n    // Assume no roots in `nodes`.\n    const result = /** @type {RootContent} */ (one(state, nodes[index]))\n    results.push(result)\n  }\n\n  return results\n}\n\n/**\n * Transform an element.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {P5Element} node\n *   `parse5` node to transform.\n * @returns {Element}\n *   hast node.\n */\nfunction element(state, node) {\n  const schema = state.schema\n\n  state.schema = node.namespaceURI === webNamespaces.svg ? svg : html\n\n  // Props.\n  let index = -1\n  /** @type {Record<string, string>} */\n  const props = {}\n\n  while (++index < node.attrs.length) {\n    const attribute = node.attrs[index]\n    const name =\n      (attribute.prefix ? attribute.prefix + ':' : '') + attribute.name\n    if (!own.call(proto, name)) {\n      props[name] = attribute.value\n    }\n  }\n\n  // Build.\n  const fn = state.schema.space === 'svg' ? s : h\n  const result = fn(node.tagName, props, all(state, node.childNodes))\n  patch(state, node, result)\n\n  // Switch content.\n  if (result.tagName === 'template') {\n    const reference = /** @type {P5Template} */ (node)\n    const pos = reference.sourceCodeLocation\n    const startTag = pos && pos.startTag && position(pos.startTag)\n    const endTag = pos && pos.endTag && position(pos.endTag)\n\n    // Root in, root out.\n    const content = /** @type {Root} */ (one(state, reference.content))\n\n    if (startTag && endTag && state.file) {\n      content.position = {start: startTag.end, end: endTag.start}\n    }\n\n    result.content = content\n  }\n\n  state.schema = schema\n\n  return result\n}\n\n/**\n * Patch positional info from `from` onto `to`.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {P5Node} from\n *   p5 node.\n * @param {Nodes} to\n *   hast node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(state, from, to) {\n  if ('sourceCodeLocation' in from && from.sourceCodeLocation && state.file) {\n    const position = createLocation(state, to, from.sourceCodeLocation)\n\n    if (position) {\n      state.location = true\n      to.position = position\n    }\n  }\n}\n\n/**\n * Create clean positional information.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Nodes} node\n *   hast node.\n * @param {P5ElementLocation} location\n *   p5 location info.\n * @returns {Position | undefined}\n *   Position, or nothing.\n */\nfunction createLocation(state, node, location) {\n  const result = position(location)\n\n  if (node.type === 'element') {\n    const tail = node.children[node.children.length - 1]\n\n    // Bug for unclosed with children.\n    // See: <https://github.com/inikulin/parse5/issues/109>.\n    if (\n      result &&\n      !location.endTag &&\n      tail &&\n      tail.position &&\n      tail.position.end\n    ) {\n      result.end = Object.assign({}, tail.position.end)\n    }\n\n    if (state.verbose) {\n      /** @type {Record<string, Position | undefined>} */\n      const props = {}\n      /** @type {string} */\n      let key\n\n      if (location.attrs) {\n        for (key in location.attrs) {\n          if (own.call(location.attrs, key)) {\n            props[find(state.schema, key).property] = position(\n              location.attrs[key]\n            )\n          }\n        }\n      }\n\n      assert(location.startTag, 'a start tag should exist')\n      const opening = position(location.startTag)\n      const closing = location.endTag ? position(location.endTag) : undefined\n      /** @type {ElementData['position']} */\n      const data = {opening}\n      if (closing) data.closing = closing\n      data.properties = props\n\n      node.data = {position: data}\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a p5 location into a position.\n *\n * @param {P5Location} loc\n *   Location.\n * @returns {Position | undefined}\n *   Position or nothing.\n */\nfunction position(loc) {\n  const start = point({\n    line: loc.startLine,\n    column: loc.startCol,\n    offset: loc.startOffset\n  })\n  const end = point({\n    line: loc.endLine,\n    column: loc.endCol,\n    offset: loc.endOffset\n  })\n\n  // @ts-expect-error: we do use `undefined` for points if one or the other\n  // exists.\n  return start || end ? {start, end} : undefined\n}\n\n/**\n * Filter out invalid points.\n *\n * @param {Point} point\n *   Point with potentially `undefined` values.\n * @returns {Point | undefined}\n *   Point or nothing.\n */\nfunction point(point) {\n  return point.line && point.column ? point : undefined\n}\n","/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n","/**\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Doctype} Doctype\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('parse5').DefaultTreeAdapterMap['document']} Parse5Document\n * @typedef {import('parse5').DefaultTreeAdapterMap['documentFragment']} Parse5Fragment\n * @typedef {import('parse5').DefaultTreeAdapterMap['element']} Parse5Element\n * @typedef {import('parse5').DefaultTreeAdapterMap['node']} Parse5Nodes\n * @typedef {import('parse5').DefaultTreeAdapterMap['documentType']} Parse5Doctype\n * @typedef {import('parse5').DefaultTreeAdapterMap['commentNode']} Parse5Comment\n * @typedef {import('parse5').DefaultTreeAdapterMap['textNode']} Parse5Text\n * @typedef {import('parse5').DefaultTreeAdapterMap['parentNode']} Parse5Parent\n * @typedef {import('parse5').Token.Attribute} Parse5Attribute\n *\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {Space | null | undefined} [space='html']\n *   Which space the document is in (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n *\n * @typedef {Exclude<Parse5Nodes, Parse5Document | Parse5Fragment>} Parse5Content\n *\n * @typedef {'html' | 'svg'} Space\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {find, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {webNamespaces} from 'web-namespaces'\nimport {zwitch} from 'zwitch'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\nconst own = {}.hasOwnProperty\n\nconst one = zwitch('type', {handlers: {root, element, text, comment, doctype}})\n\n/**\n * Transform a hast tree to a `parse5` AST.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Parse5Nodes}\n *   `parse5` node.\n */\nexport function toParse5(tree, options) {\n  const settings = options || emptyOptions\n  const space = settings.space\n  return one(tree, space === 'svg' ? svg : html)\n}\n\n/**\n * @param {Root} node\n *   Node (hast) to transform.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Parse5Document}\n *   Parse5 node.\n */\nfunction root(node, schema) {\n  /** @type {Parse5Document} */\n  const result = {\n    nodeName: '#document',\n    // @ts-expect-error: `parse5` uses enums, which are actually strings.\n    mode: (node.data || {}).quirksMode ? 'quirks' : 'no-quirks',\n    childNodes: []\n  }\n  result.childNodes = all(node.children, result, schema)\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Root} node\n *   Node (hast) to transform.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Parse5Fragment}\n *   Parse5 node.\n */\nfunction fragment(node, schema) {\n  /** @type {Parse5Fragment} */\n  const result = {nodeName: '#document-fragment', childNodes: []}\n  result.childNodes = all(node.children, result, schema)\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Doctype} node\n *   Node (hast) to transform.\n * @returns {Parse5Doctype}\n *   Parse5 node.\n */\nfunction doctype(node) {\n  /** @type {Parse5Doctype} */\n  const result = {\n    nodeName: '#documentType',\n    name: 'html',\n    publicId: '',\n    systemId: '',\n    parentNode: null\n  }\n\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Text} node\n *   Node (hast) to transform.\n * @returns {Parse5Text}\n *   Parse5 node.\n */\nfunction text(node) {\n  /** @type {Parse5Text} */\n  const result = {\n    nodeName: '#text',\n    value: node.value,\n    parentNode: null\n  }\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Comment} node\n *   Node (hast) to transform.\n * @returns {Parse5Comment}\n *   Parse5 node.\n */\nfunction comment(node) {\n  /** @type {Parse5Comment} */\n  const result = {\n    nodeName: '#comment',\n    data: node.value,\n    parentNode: null\n  }\n\n  patch(node, result)\n\n  return result\n}\n\n/**\n * @param {Element} node\n *   Node (hast) to transform.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Parse5Element}\n *   Parse5 node.\n */\nfunction element(node, schema) {\n  const parentSchema = schema\n  let currentSchema = parentSchema\n\n  if (\n    node.type === 'element' &&\n    node.tagName.toLowerCase() === 'svg' &&\n    parentSchema.space === 'html'\n  ) {\n    currentSchema = svg\n  }\n\n  /** @type {Array<Parse5Attribute>} */\n  const attrs = []\n  /** @type {string} */\n  let prop\n\n  if (node.properties) {\n    for (prop in node.properties) {\n      if (prop !== 'children' && own.call(node.properties, prop)) {\n        const result = createProperty(\n          currentSchema,\n          prop,\n          node.properties[prop]\n        )\n\n        if (result) {\n          attrs.push(result)\n        }\n      }\n    }\n  }\n\n  const space = currentSchema.space\n  // `html` and `svg` both have a space.\n  assert(space)\n\n  /** @type {Parse5Element} */\n  const result = {\n    nodeName: node.tagName,\n    tagName: node.tagName,\n    attrs,\n    // @ts-expect-error: `parse5` types are wrong.\n    namespaceURI: webNamespaces[space],\n    childNodes: [],\n    parentNode: null\n  }\n  result.childNodes = all(node.children, result, currentSchema)\n  patch(node, result)\n\n  if (node.tagName === 'template' && node.content) {\n    // @ts-expect-error: `parse5` types are wrong.\n    result.content = fragment(node.content, currentSchema)\n  }\n\n  return result\n}\n\n/**\n * Handle a property.\n *\n * @param {Schema} schema\n *   Current schema.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Parse5Attribute | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(schema, prop, value) {\n  const info = find(schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === false ||\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value)) ||\n    (!value && info.boolean)\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  /** @type {Parse5Attribute} */\n  const attribute = {\n    name: info.attribute,\n    value: value === true ? '' : String(value)\n  }\n\n  if (info.space && info.space !== 'html' && info.space !== 'svg') {\n    const index = attribute.name.indexOf(':')\n\n    if (index < 0) {\n      attribute.prefix = ''\n    } else {\n      attribute.name = attribute.name.slice(index + 1)\n      attribute.prefix = info.attribute.slice(0, index)\n    }\n\n    attribute.namespace = webNamespaces[info.space]\n  }\n\n  return attribute\n}\n\n/**\n * Transform all hast nodes.\n *\n * @param {Array<RootContent>} children\n *   List of children.\n * @param {Parse5Parent} parentNode\n *   `parse5` parent node.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Array<Parse5Content>}\n *   Transformed children.\n */\nfunction all(children, parentNode, schema) {\n  let index = -1\n  /** @type {Array<Parse5Content>} */\n  const results = []\n\n  if (children) {\n    while (++index < children.length) {\n      /** @type {Parse5Content} */\n      const child = one(children[index], schema)\n\n      child.parentNode = parentNode\n\n      results.push(child)\n    }\n  }\n\n  return results\n}\n\n/**\n * Add position info from `from` to `to`.\n *\n * @param {Nodes} from\n *   hast node.\n * @param {Parse5Nodes} to\n *   `parse5` node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  const position = from.position\n\n  if (position && position.start && position.end) {\n    assert(typeof position.start.offset === 'number')\n    assert(typeof position.end.offset === 'number')\n\n    to.sourceCodeLocation = {\n      startLine: position.start.line,\n      startCol: position.start.column,\n      startOffset: position.start.offset,\n      endLine: position.end.line,\n      endCol: position.end.column,\n      endOffset: position.end.offset\n    }\n  }\n}\n","/**\n * List of HTML void tag names.\n *\n * @type {Array<string>}\n */\nexport const htmlVoidElements = [\n  'area',\n  'base',\n  'basefont',\n  'bgsound',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'frame',\n  'hr',\n  'image',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr'\n]\n","const UNDEFINED_CODE_POINTS = new Set([\n    65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214,\n    393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894,\n    720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574,\n    1048575, 1114110, 1114111,\n]);\nexport const REPLACEMENT_CHARACTER = '\\uFFFD';\nexport var CODE_POINTS;\n(function (CODE_POINTS) {\n    CODE_POINTS[CODE_POINTS[\"EOF\"] = -1] = \"EOF\";\n    CODE_POINTS[CODE_POINTS[\"NULL\"] = 0] = \"NULL\";\n    CODE_POINTS[CODE_POINTS[\"TABULATION\"] = 9] = \"TABULATION\";\n    CODE_POINTS[CODE_POINTS[\"CARRIAGE_RETURN\"] = 13] = \"CARRIAGE_RETURN\";\n    CODE_POINTS[CODE_POINTS[\"LINE_FEED\"] = 10] = \"LINE_FEED\";\n    CODE_POINTS[CODE_POINTS[\"FORM_FEED\"] = 12] = \"FORM_FEED\";\n    CODE_POINTS[CODE_POINTS[\"SPACE\"] = 32] = \"SPACE\";\n    CODE_POINTS[CODE_POINTS[\"EXCLAMATION_MARK\"] = 33] = \"EXCLAMATION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"QUOTATION_MARK\"] = 34] = \"QUOTATION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"NUMBER_SIGN\"] = 35] = \"NUMBER_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"AMPERSAND\"] = 38] = \"AMPERSAND\";\n    CODE_POINTS[CODE_POINTS[\"APOSTROPHE\"] = 39] = \"APOSTROPHE\";\n    CODE_POINTS[CODE_POINTS[\"HYPHEN_MINUS\"] = 45] = \"HYPHEN_MINUS\";\n    CODE_POINTS[CODE_POINTS[\"SOLIDUS\"] = 47] = \"SOLIDUS\";\n    CODE_POINTS[CODE_POINTS[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    CODE_POINTS[CODE_POINTS[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    CODE_POINTS[CODE_POINTS[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    CODE_POINTS[CODE_POINTS[\"LESS_THAN_SIGN\"] = 60] = \"LESS_THAN_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"EQUALS_SIGN\"] = 61] = \"EQUALS_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"GREATER_THAN_SIGN\"] = 62] = \"GREATER_THAN_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"QUESTION_MARK\"] = 63] = \"QUESTION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_A\"] = 65] = \"LATIN_CAPITAL_A\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_F\"] = 70] = \"LATIN_CAPITAL_F\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_X\"] = 88] = \"LATIN_CAPITAL_X\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_Z\"] = 90] = \"LATIN_CAPITAL_Z\";\n    CODE_POINTS[CODE_POINTS[\"RIGHT_SQUARE_BRACKET\"] = 93] = \"RIGHT_SQUARE_BRACKET\";\n    CODE_POINTS[CODE_POINTS[\"GRAVE_ACCENT\"] = 96] = \"GRAVE_ACCENT\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_A\"] = 97] = \"LATIN_SMALL_A\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_F\"] = 102] = \"LATIN_SMALL_F\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_X\"] = 120] = \"LATIN_SMALL_X\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_Z\"] = 122] = \"LATIN_SMALL_Z\";\n    CODE_POINTS[CODE_POINTS[\"REPLACEMENT_CHARACTER\"] = 65533] = \"REPLACEMENT_CHARACTER\";\n})(CODE_POINTS = CODE_POINTS || (CODE_POINTS = {}));\nexport const SEQUENCES = {\n    DASH_DASH: '--',\n    CDATA_START: '[CDATA[',\n    DOCTYPE: 'doctype',\n    SCRIPT: 'script',\n    PUBLIC: 'public',\n    SYSTEM: 'system',\n};\n//Surrogates\nexport function isSurrogate(cp) {\n    return cp >= 55296 && cp <= 57343;\n}\nexport function isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n}\nexport function getSurrogatePairCodePoint(cp1, cp2) {\n    return (cp1 - 55296) * 1024 + 9216 + cp2;\n}\n//NOTE: excluding NULL and ASCII whitespace\nexport function isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nexport function isUndefinedCodePoint(cp) {\n    return (cp >= 64976 && cp <= 65007) || UNDEFINED_CODE_POINTS.has(cp);\n}\n//# sourceMappingURL=unicode.js.map","export var ERR;\n(function (ERR) {\n    ERR[\"controlCharacterInInputStream\"] = \"control-character-in-input-stream\";\n    ERR[\"noncharacterInInputStream\"] = \"noncharacter-in-input-stream\";\n    ERR[\"surrogateInInputStream\"] = \"surrogate-in-input-stream\";\n    ERR[\"nonVoidHtmlElementStartTagWithTrailingSolidus\"] = \"non-void-html-element-start-tag-with-trailing-solidus\";\n    ERR[\"endTagWithAttributes\"] = \"end-tag-with-attributes\";\n    ERR[\"endTagWithTrailingSolidus\"] = \"end-tag-with-trailing-solidus\";\n    ERR[\"unexpectedSolidusInTag\"] = \"unexpected-solidus-in-tag\";\n    ERR[\"unexpectedNullCharacter\"] = \"unexpected-null-character\";\n    ERR[\"unexpectedQuestionMarkInsteadOfTagName\"] = \"unexpected-question-mark-instead-of-tag-name\";\n    ERR[\"invalidFirstCharacterOfTagName\"] = \"invalid-first-character-of-tag-name\";\n    ERR[\"unexpectedEqualsSignBeforeAttributeName\"] = \"unexpected-equals-sign-before-attribute-name\";\n    ERR[\"missingEndTagName\"] = \"missing-end-tag-name\";\n    ERR[\"unexpectedCharacterInAttributeName\"] = \"unexpected-character-in-attribute-name\";\n    ERR[\"unknownNamedCharacterReference\"] = \"unknown-named-character-reference\";\n    ERR[\"missingSemicolonAfterCharacterReference\"] = \"missing-semicolon-after-character-reference\";\n    ERR[\"unexpectedCharacterAfterDoctypeSystemIdentifier\"] = \"unexpected-character-after-doctype-system-identifier\";\n    ERR[\"unexpectedCharacterInUnquotedAttributeValue\"] = \"unexpected-character-in-unquoted-attribute-value\";\n    ERR[\"eofBeforeTagName\"] = \"eof-before-tag-name\";\n    ERR[\"eofInTag\"] = \"eof-in-tag\";\n    ERR[\"missingAttributeValue\"] = \"missing-attribute-value\";\n    ERR[\"missingWhitespaceBetweenAttributes\"] = \"missing-whitespace-between-attributes\";\n    ERR[\"missingWhitespaceAfterDoctypePublicKeyword\"] = \"missing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missingQuoteBeforeDoctypeSystemIdentifier\"] = \"missing-quote-before-doctype-system-identifier\";\n    ERR[\"missingDoctypePublicIdentifier\"] = \"missing-doctype-public-identifier\";\n    ERR[\"missingDoctypeSystemIdentifier\"] = \"missing-doctype-system-identifier\";\n    ERR[\"abruptDoctypePublicIdentifier\"] = \"abrupt-doctype-public-identifier\";\n    ERR[\"abruptDoctypeSystemIdentifier\"] = \"abrupt-doctype-system-identifier\";\n    ERR[\"cdataInHtmlContent\"] = \"cdata-in-html-content\";\n    ERR[\"incorrectlyOpenedComment\"] = \"incorrectly-opened-comment\";\n    ERR[\"eofInScriptHtmlCommentLikeText\"] = \"eof-in-script-html-comment-like-text\";\n    ERR[\"eofInDoctype\"] = \"eof-in-doctype\";\n    ERR[\"nestedComment\"] = \"nested-comment\";\n    ERR[\"abruptClosingOfEmptyComment\"] = \"abrupt-closing-of-empty-comment\";\n    ERR[\"eofInComment\"] = \"eof-in-comment\";\n    ERR[\"incorrectlyClosedComment\"] = \"incorrectly-closed-comment\";\n    ERR[\"eofInCdata\"] = \"eof-in-cdata\";\n    ERR[\"absenceOfDigitsInNumericCharacterReference\"] = \"absence-of-digits-in-numeric-character-reference\";\n    ERR[\"nullCharacterReference\"] = \"null-character-reference\";\n    ERR[\"surrogateCharacterReference\"] = \"surrogate-character-reference\";\n    ERR[\"characterReferenceOutsideUnicodeRange\"] = \"character-reference-outside-unicode-range\";\n    ERR[\"controlCharacterReference\"] = \"control-character-reference\";\n    ERR[\"noncharacterCharacterReference\"] = \"noncharacter-character-reference\";\n    ERR[\"missingWhitespaceBeforeDoctypeName\"] = \"missing-whitespace-before-doctype-name\";\n    ERR[\"missingDoctypeName\"] = \"missing-doctype-name\";\n    ERR[\"invalidCharacterSequenceAfterDoctypeName\"] = \"invalid-character-sequence-after-doctype-name\";\n    ERR[\"duplicateAttribute\"] = \"duplicate-attribute\";\n    ERR[\"nonConformingDoctype\"] = \"non-conforming-doctype\";\n    ERR[\"missingDoctype\"] = \"missing-doctype\";\n    ERR[\"misplacedDoctype\"] = \"misplaced-doctype\";\n    ERR[\"endTagWithoutMatchingOpenElement\"] = \"end-tag-without-matching-open-element\";\n    ERR[\"closingOfElementWithOpenChildElements\"] = \"closing-of-element-with-open-child-elements\";\n    ERR[\"disallowedContentInNoscriptInHead\"] = \"disallowed-content-in-noscript-in-head\";\n    ERR[\"openElementsLeftAfterEof\"] = \"open-elements-left-after-eof\";\n    ERR[\"abandonedHeadElementChild\"] = \"abandoned-head-element-child\";\n    ERR[\"misplacedStartTagForHeadElement\"] = \"misplaced-start-tag-for-head-element\";\n    ERR[\"nestedNoscriptInHead\"] = \"nested-noscript-in-head\";\n    ERR[\"eofInElementThatCanContainOnlyText\"] = \"eof-in-element-that-can-contain-only-text\";\n})(ERR = ERR || (ERR = {}));\n//# sourceMappingURL=error-codes.js.map","import { CODE_POINTS as $, getSurrogatePairCodePoint, isControlCodePoint, isSurrogate, isSurrogatePair, isUndefinedCodePoint, } from '../common/unicode.js';\nimport { ERR } from '../common/error-codes.js';\n//Const\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nexport class Preprocessor {\n    constructor(handler) {\n        this.handler = handler;\n        this.html = '';\n        this.pos = -1;\n        // NOTE: Initial `lastGapPos` is -2, to ensure `col` on initialisation is 0\n        this.lastGapPos = -2;\n        this.gapStack = [];\n        this.skipNextNewLine = false;\n        this.lastChunkWritten = false;\n        this.endOfChunkHit = false;\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n        this.isEol = false;\n        this.lineStartPos = 0;\n        this.droppedBufferSize = 0;\n        this.line = 1;\n        //NOTE: avoid reporting errors twice on advance/retreat\n        this.lastErrOffset = -1;\n    }\n    /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */\n    get col() {\n        return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);\n    }\n    get offset() {\n        return this.droppedBufferSize + this.pos;\n    }\n    getError(code) {\n        const { line, col, offset } = this;\n        return {\n            code,\n            startLine: line,\n            endLine: line,\n            startCol: col,\n            endCol: col,\n            startOffset: offset,\n            endOffset: offset,\n        };\n    }\n    _err(code) {\n        if (this.handler.onParseError && this.lastErrOffset !== this.offset) {\n            this.lastErrOffset = this.offset;\n            this.handler.onParseError(this.getError(code));\n        }\n    }\n    _addGap() {\n        this.gapStack.push(this.lastGapPos);\n        this.lastGapPos = this.pos;\n    }\n    _processSurrogate(cp) {\n        //NOTE: try to peek a surrogate pair\n        if (this.pos !== this.html.length - 1) {\n            const nextCp = this.html.charCodeAt(this.pos + 1);\n            if (isSurrogatePair(nextCp)) {\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n                this.pos++;\n                //NOTE: add a gap that should be avoided during retreat\n                this._addGap();\n                return getSurrogatePairCodePoint(cp, nextCp);\n            }\n        }\n        //NOTE: we are at the end of a chunk, therefore we can't infer the surrogate pair yet.\n        else if (!this.lastChunkWritten) {\n            this.endOfChunkHit = true;\n            return $.EOF;\n        }\n        //NOTE: isolated surrogate\n        this._err(ERR.surrogateInInputStream);\n        return cp;\n    }\n    willDropParsedChunk() {\n        return this.pos > this.bufferWaterline;\n    }\n    dropParsedChunk() {\n        if (this.willDropParsedChunk()) {\n            this.html = this.html.substring(this.pos);\n            this.lineStartPos -= this.pos;\n            this.droppedBufferSize += this.pos;\n            this.pos = 0;\n            this.lastGapPos = -2;\n            this.gapStack.length = 0;\n        }\n    }\n    write(chunk, isLastChunk) {\n        if (this.html.length > 0) {\n            this.html += chunk;\n        }\n        else {\n            this.html = chunk;\n        }\n        this.endOfChunkHit = false;\n        this.lastChunkWritten = isLastChunk;\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);\n        this.endOfChunkHit = false;\n    }\n    startsWith(pattern, caseSensitive) {\n        // Check if our buffer has enough characters\n        if (this.pos + pattern.length > this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return false;\n        }\n        if (caseSensitive) {\n            return this.html.startsWith(pattern, this.pos);\n        }\n        for (let i = 0; i < pattern.length; i++) {\n            const cp = this.html.charCodeAt(this.pos + i) | 0x20;\n            if (cp !== pattern.charCodeAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    peek(offset) {\n        const pos = this.pos + offset;\n        if (pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n        const code = this.html.charCodeAt(pos);\n        return code === $.CARRIAGE_RETURN ? $.LINE_FEED : code;\n    }\n    advance() {\n        this.pos++;\n        //NOTE: LF should be in the last column of the line\n        if (this.isEol) {\n            this.isEol = false;\n            this.line++;\n            this.lineStartPos = this.pos;\n        }\n        if (this.pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n        let cp = this.html.charCodeAt(this.pos);\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === $.CARRIAGE_RETURN) {\n            this.isEol = true;\n            this.skipNextNewLine = true;\n            return $.LINE_FEED;\n        }\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n        //must be ignored.\n        if (cp === $.LINE_FEED) {\n            this.isEol = true;\n            if (this.skipNextNewLine) {\n                // `line` will be bumped again in the recursive call.\n                this.line--;\n                this.skipNextNewLine = false;\n                this._addGap();\n                return this.advance();\n            }\n        }\n        this.skipNextNewLine = false;\n        if (isSurrogate(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange = this.handler.onParseError === null ||\n            (cp > 0x1f && cp < 0x7f) ||\n            cp === $.LINE_FEED ||\n            cp === $.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n        return cp;\n    }\n    _checkForProblematicCharacters(cp) {\n        if (isControlCodePoint(cp)) {\n            this._err(ERR.controlCharacterInInputStream);\n        }\n        else if (isUndefinedCodePoint(cp)) {\n            this._err(ERR.noncharacterInInputStream);\n        }\n    }\n    retreat(count) {\n        this.pos -= count;\n        while (this.pos < this.lastGapPos) {\n            this.lastGapPos = this.gapStack.pop();\n            this.pos--;\n        }\n        this.isEol = false;\n    }\n}\n//# sourceMappingURL=preprocessor.js.map","export var TokenType;\n(function (TokenType) {\n    TokenType[TokenType[\"CHARACTER\"] = 0] = \"CHARACTER\";\n    TokenType[TokenType[\"NULL_CHARACTER\"] = 1] = \"NULL_CHARACTER\";\n    TokenType[TokenType[\"WHITESPACE_CHARACTER\"] = 2] = \"WHITESPACE_CHARACTER\";\n    TokenType[TokenType[\"START_TAG\"] = 3] = \"START_TAG\";\n    TokenType[TokenType[\"END_TAG\"] = 4] = \"END_TAG\";\n    TokenType[TokenType[\"COMMENT\"] = 5] = \"COMMENT\";\n    TokenType[TokenType[\"DOCTYPE\"] = 6] = \"DOCTYPE\";\n    TokenType[TokenType[\"EOF\"] = 7] = \"EOF\";\n    TokenType[TokenType[\"HIBERNATION\"] = 8] = \"HIBERNATION\";\n})(TokenType = TokenType || (TokenType = {}));\nexport function getTokenAttr(token, attrName) {\n    for (let i = token.attrs.length - 1; i >= 0; i--) {\n        if (token.attrs[i].name === attrName) {\n            return token.attrs[i].value;\n        }\n    }\n    return null;\n}\n//# sourceMappingURL=token.js.map","// Generated using scripts/write-decode-map.ts\nexport default new Uint16Array(\n// prettier-ignore\n\"\\u1d41<\\xd5\\u0131\\u028a\\u049d\\u057b\\u05d0\\u0675\\u06de\\u07a2\\u07d6\\u080f\\u0a4a\\u0a91\\u0da1\\u0e6d\\u0f09\\u0f26\\u10ca\\u1228\\u12e1\\u1415\\u149d\\u14c3\\u14df\\u1525\\0\\0\\0\\0\\0\\0\\u156b\\u16cd\\u198d\\u1c12\\u1ddd\\u1f7e\\u2060\\u21b0\\u228d\\u23c0\\u23fb\\u2442\\u2824\\u2912\\u2d08\\u2e48\\u2fce\\u3016\\u32ba\\u3639\\u37ac\\u38fe\\u3a28\\u3a71\\u3ae0\\u3b2e\\u0800EMabcfglmnoprstu\\\\bfms\\x7f\\x84\\x8b\\x90\\x95\\x98\\xa6\\xb3\\xb9\\xc8\\xcflig\\u803b\\xc6\\u40c6P\\u803b&\\u4026cute\\u803b\\xc1\\u40c1reve;\\u4102\\u0100iyx}rc\\u803b\\xc2\\u40c2;\\u4410r;\\uc000\\ud835\\udd04rave\\u803b\\xc0\\u40c0pha;\\u4391acr;\\u4100d;\\u6a53\\u0100gp\\x9d\\xa1on;\\u4104f;\\uc000\\ud835\\udd38plyFunction;\\u6061ing\\u803b\\xc5\\u40c5\\u0100cs\\xbe\\xc3r;\\uc000\\ud835\\udc9cign;\\u6254ilde\\u803b\\xc3\\u40c3ml\\u803b\\xc4\\u40c4\\u0400aceforsu\\xe5\\xfb\\xfe\\u0117\\u011c\\u0122\\u0127\\u012a\\u0100cr\\xea\\xf2kslash;\\u6216\\u0176\\xf6\\xf8;\\u6ae7ed;\\u6306y;\\u4411\\u0180crt\\u0105\\u010b\\u0114ause;\\u6235noullis;\\u612ca;\\u4392r;\\uc000\\ud835\\udd05pf;\\uc000\\ud835\\udd39eve;\\u42d8c\\xf2\\u0113mpeq;\\u624e\\u0700HOacdefhilorsu\\u014d\\u0151\\u0156\\u0180\\u019e\\u01a2\\u01b5\\u01b7\\u01ba\\u01dc\\u0215\\u0273\\u0278\\u027ecy;\\u4427PY\\u803b\\xa9\\u40a9\\u0180cpy\\u015d\\u0162\\u017aute;\\u4106\\u0100;i\\u0167\\u0168\\u62d2talDifferentialD;\\u6145leys;\\u612d\\u0200aeio\\u0189\\u018e\\u0194\\u0198ron;\\u410cdil\\u803b\\xc7\\u40c7rc;\\u4108nint;\\u6230ot;\\u410a\\u0100dn\\u01a7\\u01adilla;\\u40b8terDot;\\u40b7\\xf2\\u017fi;\\u43a7rcle\\u0200DMPT\\u01c7\\u01cb\\u01d1\\u01d6ot;\\u6299inus;\\u6296lus;\\u6295imes;\\u6297o\\u0100cs\\u01e2\\u01f8kwiseContourIntegral;\\u6232eCurly\\u0100DQ\\u0203\\u020foubleQuote;\\u601duote;\\u6019\\u0200lnpu\\u021e\\u0228\\u0247\\u0255on\\u0100;e\\u0225\\u0226\\u6237;\\u6a74\\u0180git\\u022f\\u0236\\u023aruent;\\u6261nt;\\u622fourIntegral;\\u622e\\u0100fr\\u024c\\u024e;\\u6102oduct;\\u6210nterClockwiseContourIntegral;\\u6233oss;\\u6a2fcr;\\uc000\\ud835\\udc9ep\\u0100;C\\u0284\\u0285\\u62d3ap;\\u624d\\u0580DJSZacefios\\u02a0\\u02ac\\u02b0\\u02b4\\u02b8\\u02cb\\u02d7\\u02e1\\u02e6\\u0333\\u048d\\u0100;o\\u0179\\u02a5trahd;\\u6911cy;\\u4402cy;\\u4405cy;\\u440f\\u0180grs\\u02bf\\u02c4\\u02c7ger;\\u6021r;\\u61a1hv;\\u6ae4\\u0100ay\\u02d0\\u02d5ron;\\u410e;\\u4414l\\u0100;t\\u02dd\\u02de\\u6207a;\\u4394r;\\uc000\\ud835\\udd07\\u0100af\\u02eb\\u0327\\u0100cm\\u02f0\\u0322ritical\\u0200ADGT\\u0300\\u0306\\u0316\\u031ccute;\\u40b4o\\u0174\\u030b\\u030d;\\u42d9bleAcute;\\u42ddrave;\\u4060ilde;\\u42dcond;\\u62c4ferentialD;\\u6146\\u0470\\u033d\\0\\0\\0\\u0342\\u0354\\0\\u0405f;\\uc000\\ud835\\udd3b\\u0180;DE\\u0348\\u0349\\u034d\\u40a8ot;\\u60dcqual;\\u6250ble\\u0300CDLRUV\\u0363\\u0372\\u0382\\u03cf\\u03e2\\u03f8ontourIntegra\\xec\\u0239o\\u0274\\u0379\\0\\0\\u037b\\xbb\\u0349nArrow;\\u61d3\\u0100eo\\u0387\\u03a4ft\\u0180ART\\u0390\\u0396\\u03a1rrow;\\u61d0ightArrow;\\u61d4e\\xe5\\u02cang\\u0100LR\\u03ab\\u03c4eft\\u0100AR\\u03b3\\u03b9rrow;\\u67f8ightArrow;\\u67faightArrow;\\u67f9ight\\u0100AT\\u03d8\\u03derrow;\\u61d2ee;\\u62a8p\\u0241\\u03e9\\0\\0\\u03efrrow;\\u61d1ownArrow;\\u61d5erticalBar;\\u6225n\\u0300ABLRTa\\u0412\\u042a\\u0430\\u045e\\u047f\\u037crrow\\u0180;BU\\u041d\\u041e\\u0422\\u6193ar;\\u6913pArrow;\\u61f5reve;\\u4311eft\\u02d2\\u043a\\0\\u0446\\0\\u0450ightVector;\\u6950eeVector;\\u695eector\\u0100;B\\u0459\\u045a\\u61bdar;\\u6956ight\\u01d4\\u0467\\0\\u0471eeVector;\\u695fector\\u0100;B\\u047a\\u047b\\u61c1ar;\\u6957ee\\u0100;A\\u0486\\u0487\\u62a4rrow;\\u61a7\\u0100ct\\u0492\\u0497r;\\uc000\\ud835\\udc9frok;\\u4110\\u0800NTacdfglmopqstux\\u04bd\\u04c0\\u04c4\\u04cb\\u04de\\u04e2\\u04e7\\u04ee\\u04f5\\u0521\\u052f\\u0536\\u0552\\u055d\\u0560\\u0565G;\\u414aH\\u803b\\xd0\\u40d0cute\\u803b\\xc9\\u40c9\\u0180aiy\\u04d2\\u04d7\\u04dcron;\\u411arc\\u803b\\xca\\u40ca;\\u442dot;\\u4116r;\\uc000\\ud835\\udd08rave\\u803b\\xc8\\u40c8ement;\\u6208\\u0100ap\\u04fa\\u04fecr;\\u4112ty\\u0253\\u0506\\0\\0\\u0512mallSquare;\\u65fberySmallSquare;\\u65ab\\u0100gp\\u0526\\u052aon;\\u4118f;\\uc000\\ud835\\udd3csilon;\\u4395u\\u0100ai\\u053c\\u0549l\\u0100;T\\u0542\\u0543\\u6a75ilde;\\u6242librium;\\u61cc\\u0100ci\\u0557\\u055ar;\\u6130m;\\u6a73a;\\u4397ml\\u803b\\xcb\\u40cb\\u0100ip\\u056a\\u056fsts;\\u6203onentialE;\\u6147\\u0280cfios\\u0585\\u0588\\u058d\\u05b2\\u05ccy;\\u4424r;\\uc000\\ud835\\udd09lled\\u0253\\u0597\\0\\0\\u05a3mallSquare;\\u65fcerySmallSquare;\\u65aa\\u0370\\u05ba\\0\\u05bf\\0\\0\\u05c4f;\\uc000\\ud835\\udd3dAll;\\u6200riertrf;\\u6131c\\xf2\\u05cb\\u0600JTabcdfgorst\\u05e8\\u05ec\\u05ef\\u05fa\\u0600\\u0612\\u0616\\u061b\\u061d\\u0623\\u066c\\u0672cy;\\u4403\\u803b>\\u403emma\\u0100;d\\u05f7\\u05f8\\u4393;\\u43dcreve;\\u411e\\u0180eiy\\u0607\\u060c\\u0610dil;\\u4122rc;\\u411c;\\u4413ot;\\u4120r;\\uc000\\ud835\\udd0a;\\u62d9pf;\\uc000\\ud835\\udd3eeater\\u0300EFGLST\\u0635\\u0644\\u064e\\u0656\\u065b\\u0666qual\\u0100;L\\u063e\\u063f\\u6265ess;\\u62dbullEqual;\\u6267reater;\\u6aa2ess;\\u6277lantEqual;\\u6a7eilde;\\u6273cr;\\uc000\\ud835\\udca2;\\u626b\\u0400Aacfiosu\\u0685\\u068b\\u0696\\u069b\\u069e\\u06aa\\u06be\\u06caRDcy;\\u442a\\u0100ct\\u0690\\u0694ek;\\u42c7;\\u405eirc;\\u4124r;\\u610clbertSpace;\\u610b\\u01f0\\u06af\\0\\u06b2f;\\u610dizontalLine;\\u6500\\u0100ct\\u06c3\\u06c5\\xf2\\u06a9rok;\\u4126mp\\u0144\\u06d0\\u06d8ownHum\\xf0\\u012fqual;\\u624f\\u0700EJOacdfgmnostu\\u06fa\\u06fe\\u0703\\u0707\\u070e\\u071a\\u071e\\u0721\\u0728\\u0744\\u0778\\u078b\\u078f\\u0795cy;\\u4415lig;\\u4132cy;\\u4401cute\\u803b\\xcd\\u40cd\\u0100iy\\u0713\\u0718rc\\u803b\\xce\\u40ce;\\u4418ot;\\u4130r;\\u6111rave\\u803b\\xcc\\u40cc\\u0180;ap\\u0720\\u072f\\u073f\\u0100cg\\u0734\\u0737r;\\u412ainaryI;\\u6148lie\\xf3\\u03dd\\u01f4\\u0749\\0\\u0762\\u0100;e\\u074d\\u074e\\u622c\\u0100gr\\u0753\\u0758ral;\\u622bsection;\\u62c2isible\\u0100CT\\u076c\\u0772omma;\\u6063imes;\\u6062\\u0180gpt\\u077f\\u0783\\u0788on;\\u412ef;\\uc000\\ud835\\udd40a;\\u4399cr;\\u6110ilde;\\u4128\\u01eb\\u079a\\0\\u079ecy;\\u4406l\\u803b\\xcf\\u40cf\\u0280cfosu\\u07ac\\u07b7\\u07bc\\u07c2\\u07d0\\u0100iy\\u07b1\\u07b5rc;\\u4134;\\u4419r;\\uc000\\ud835\\udd0dpf;\\uc000\\ud835\\udd41\\u01e3\\u07c7\\0\\u07ccr;\\uc000\\ud835\\udca5rcy;\\u4408kcy;\\u4404\\u0380HJacfos\\u07e4\\u07e8\\u07ec\\u07f1\\u07fd\\u0802\\u0808cy;\\u4425cy;\\u440cppa;\\u439a\\u0100ey\\u07f6\\u07fbdil;\\u4136;\\u441ar;\\uc000\\ud835\\udd0epf;\\uc000\\ud835\\udd42cr;\\uc000\\ud835\\udca6\\u0580JTaceflmost\\u0825\\u0829\\u082c\\u0850\\u0863\\u09b3\\u09b8\\u09c7\\u09cd\\u0a37\\u0a47cy;\\u4409\\u803b<\\u403c\\u0280cmnpr\\u0837\\u083c\\u0841\\u0844\\u084dute;\\u4139bda;\\u439bg;\\u67ealacetrf;\\u6112r;\\u619e\\u0180aey\\u0857\\u085c\\u0861ron;\\u413ddil;\\u413b;\\u441b\\u0100fs\\u0868\\u0970t\\u0500ACDFRTUVar\\u087e\\u08a9\\u08b1\\u08e0\\u08e6\\u08fc\\u092f\\u095b\\u0390\\u096a\\u0100nr\\u0883\\u088fgleBracket;\\u67e8row\\u0180;BR\\u0899\\u089a\\u089e\\u6190ar;\\u61e4ightArrow;\\u61c6eiling;\\u6308o\\u01f5\\u08b7\\0\\u08c3bleBracket;\\u67e6n\\u01d4\\u08c8\\0\\u08d2eeVector;\\u6961ector\\u0100;B\\u08db\\u08dc\\u61c3ar;\\u6959loor;\\u630aight\\u0100AV\\u08ef\\u08f5rrow;\\u6194ector;\\u694e\\u0100er\\u0901\\u0917e\\u0180;AV\\u0909\\u090a\\u0910\\u62a3rrow;\\u61a4ector;\\u695aiangle\\u0180;BE\\u0924\\u0925\\u0929\\u62b2ar;\\u69cfqual;\\u62b4p\\u0180DTV\\u0937\\u0942\\u094cownVector;\\u6951eeVector;\\u6960ector\\u0100;B\\u0956\\u0957\\u61bfar;\\u6958ector\\u0100;B\\u0965\\u0966\\u61bcar;\\u6952ight\\xe1\\u039cs\\u0300EFGLST\\u097e\\u098b\\u0995\\u099d\\u09a2\\u09adqualGreater;\\u62daullEqual;\\u6266reater;\\u6276ess;\\u6aa1lantEqual;\\u6a7dilde;\\u6272r;\\uc000\\ud835\\udd0f\\u0100;e\\u09bd\\u09be\\u62d8ftarrow;\\u61daidot;\\u413f\\u0180npw\\u09d4\\u0a16\\u0a1bg\\u0200LRlr\\u09de\\u09f7\\u0a02\\u0a10eft\\u0100AR\\u09e6\\u09ecrrow;\\u67f5ightArrow;\\u67f7ightArrow;\\u67f6eft\\u0100ar\\u03b3\\u0a0aight\\xe1\\u03bfight\\xe1\\u03caf;\\uc000\\ud835\\udd43er\\u0100LR\\u0a22\\u0a2ceftArrow;\\u6199ightArrow;\\u6198\\u0180cht\\u0a3e\\u0a40\\u0a42\\xf2\\u084c;\\u61b0rok;\\u4141;\\u626a\\u0400acefiosu\\u0a5a\\u0a5d\\u0a60\\u0a77\\u0a7c\\u0a85\\u0a8b\\u0a8ep;\\u6905y;\\u441c\\u0100dl\\u0a65\\u0a6fiumSpace;\\u605flintrf;\\u6133r;\\uc000\\ud835\\udd10nusPlus;\\u6213pf;\\uc000\\ud835\\udd44c\\xf2\\u0a76;\\u439c\\u0480Jacefostu\\u0aa3\\u0aa7\\u0aad\\u0ac0\\u0b14\\u0b19\\u0d91\\u0d97\\u0d9ecy;\\u440acute;\\u4143\\u0180aey\\u0ab4\\u0ab9\\u0aberon;\\u4147dil;\\u4145;\\u441d\\u0180gsw\\u0ac7\\u0af0\\u0b0eative\\u0180MTV\\u0ad3\\u0adf\\u0ae8ediumSpace;\\u600bhi\\u0100cn\\u0ae6\\u0ad8\\xeb\\u0ad9eryThi\\xee\\u0ad9ted\\u0100GL\\u0af8\\u0b06reaterGreate\\xf2\\u0673essLes\\xf3\\u0a48Line;\\u400ar;\\uc000\\ud835\\udd11\\u0200Bnpt\\u0b22\\u0b28\\u0b37\\u0b3areak;\\u6060BreakingSpace;\\u40a0f;\\u6115\\u0680;CDEGHLNPRSTV\\u0b55\\u0b56\\u0b6a\\u0b7c\\u0ba1\\u0beb\\u0c04\\u0c5e\\u0c84\\u0ca6\\u0cd8\\u0d61\\u0d85\\u6aec\\u0100ou\\u0b5b\\u0b64ngruent;\\u6262pCap;\\u626doubleVerticalBar;\\u6226\\u0180lqx\\u0b83\\u0b8a\\u0b9bement;\\u6209ual\\u0100;T\\u0b92\\u0b93\\u6260ilde;\\uc000\\u2242\\u0338ists;\\u6204reater\\u0380;EFGLST\\u0bb6\\u0bb7\\u0bbd\\u0bc9\\u0bd3\\u0bd8\\u0be5\\u626fqual;\\u6271ullEqual;\\uc000\\u2267\\u0338reater;\\uc000\\u226b\\u0338ess;\\u6279lantEqual;\\uc000\\u2a7e\\u0338ilde;\\u6275ump\\u0144\\u0bf2\\u0bfdownHump;\\uc000\\u224e\\u0338qual;\\uc000\\u224f\\u0338e\\u0100fs\\u0c0a\\u0c27tTriangle\\u0180;BE\\u0c1a\\u0c1b\\u0c21\\u62eaar;\\uc000\\u29cf\\u0338qual;\\u62ecs\\u0300;EGLST\\u0c35\\u0c36\\u0c3c\\u0c44\\u0c4b\\u0c58\\u626equal;\\u6270reater;\\u6278ess;\\uc000\\u226a\\u0338lantEqual;\\uc000\\u2a7d\\u0338ilde;\\u6274ested\\u0100GL\\u0c68\\u0c79reaterGreater;\\uc000\\u2aa2\\u0338essLess;\\uc000\\u2aa1\\u0338recedes\\u0180;ES\\u0c92\\u0c93\\u0c9b\\u6280qual;\\uc000\\u2aaf\\u0338lantEqual;\\u62e0\\u0100ei\\u0cab\\u0cb9verseElement;\\u620cghtTriangle\\u0180;BE\\u0ccb\\u0ccc\\u0cd2\\u62ebar;\\uc000\\u29d0\\u0338qual;\\u62ed\\u0100qu\\u0cdd\\u0d0cuareSu\\u0100bp\\u0ce8\\u0cf9set\\u0100;E\\u0cf0\\u0cf3\\uc000\\u228f\\u0338qual;\\u62e2erset\\u0100;E\\u0d03\\u0d06\\uc000\\u2290\\u0338qual;\\u62e3\\u0180bcp\\u0d13\\u0d24\\u0d4eset\\u0100;E\\u0d1b\\u0d1e\\uc000\\u2282\\u20d2qual;\\u6288ceeds\\u0200;EST\\u0d32\\u0d33\\u0d3b\\u0d46\\u6281qual;\\uc000\\u2ab0\\u0338lantEqual;\\u62e1ilde;\\uc000\\u227f\\u0338erset\\u0100;E\\u0d58\\u0d5b\\uc000\\u2283\\u20d2qual;\\u6289ilde\\u0200;EFT\\u0d6e\\u0d6f\\u0d75\\u0d7f\\u6241qual;\\u6244ullEqual;\\u6247ilde;\\u6249erticalBar;\\u6224cr;\\uc000\\ud835\\udca9ilde\\u803b\\xd1\\u40d1;\\u439d\\u0700Eacdfgmoprstuv\\u0dbd\\u0dc2\\u0dc9\\u0dd5\\u0ddb\\u0de0\\u0de7\\u0dfc\\u0e02\\u0e20\\u0e22\\u0e32\\u0e3f\\u0e44lig;\\u4152cute\\u803b\\xd3\\u40d3\\u0100iy\\u0dce\\u0dd3rc\\u803b\\xd4\\u40d4;\\u441eblac;\\u4150r;\\uc000\\ud835\\udd12rave\\u803b\\xd2\\u40d2\\u0180aei\\u0dee\\u0df2\\u0df6cr;\\u414cga;\\u43a9cron;\\u439fpf;\\uc000\\ud835\\udd46enCurly\\u0100DQ\\u0e0e\\u0e1aoubleQuote;\\u601cuote;\\u6018;\\u6a54\\u0100cl\\u0e27\\u0e2cr;\\uc000\\ud835\\udcaaash\\u803b\\xd8\\u40d8i\\u016c\\u0e37\\u0e3cde\\u803b\\xd5\\u40d5es;\\u6a37ml\\u803b\\xd6\\u40d6er\\u0100BP\\u0e4b\\u0e60\\u0100ar\\u0e50\\u0e53r;\\u603eac\\u0100ek\\u0e5a\\u0e5c;\\u63deet;\\u63b4arenthesis;\\u63dc\\u0480acfhilors\\u0e7f\\u0e87\\u0e8a\\u0e8f\\u0e92\\u0e94\\u0e9d\\u0eb0\\u0efcrtialD;\\u6202y;\\u441fr;\\uc000\\ud835\\udd13i;\\u43a6;\\u43a0usMinus;\\u40b1\\u0100ip\\u0ea2\\u0eadncareplan\\xe5\\u069df;\\u6119\\u0200;eio\\u0eb9\\u0eba\\u0ee0\\u0ee4\\u6abbcedes\\u0200;EST\\u0ec8\\u0ec9\\u0ecf\\u0eda\\u627aqual;\\u6aaflantEqual;\\u627cilde;\\u627eme;\\u6033\\u0100dp\\u0ee9\\u0eeeuct;\\u620fortion\\u0100;a\\u0225\\u0ef9l;\\u621d\\u0100ci\\u0f01\\u0f06r;\\uc000\\ud835\\udcab;\\u43a8\\u0200Ufos\\u0f11\\u0f16\\u0f1b\\u0f1fOT\\u803b\\\"\\u4022r;\\uc000\\ud835\\udd14pf;\\u611acr;\\uc000\\ud835\\udcac\\u0600BEacefhiorsu\\u0f3e\\u0f43\\u0f47\\u0f60\\u0f73\\u0fa7\\u0faa\\u0fad\\u1096\\u10a9\\u10b4\\u10bearr;\\u6910G\\u803b\\xae\\u40ae\\u0180cnr\\u0f4e\\u0f53\\u0f56ute;\\u4154g;\\u67ebr\\u0100;t\\u0f5c\\u0f5d\\u61a0l;\\u6916\\u0180aey\\u0f67\\u0f6c\\u0f71ron;\\u4158dil;\\u4156;\\u4420\\u0100;v\\u0f78\\u0f79\\u611cerse\\u0100EU\\u0f82\\u0f99\\u0100lq\\u0f87\\u0f8eement;\\u620builibrium;\\u61cbpEquilibrium;\\u696fr\\xbb\\u0f79o;\\u43a1ght\\u0400ACDFTUVa\\u0fc1\\u0feb\\u0ff3\\u1022\\u1028\\u105b\\u1087\\u03d8\\u0100nr\\u0fc6\\u0fd2gleBracket;\\u67e9row\\u0180;BL\\u0fdc\\u0fdd\\u0fe1\\u6192ar;\\u61e5eftArrow;\\u61c4eiling;\\u6309o\\u01f5\\u0ff9\\0\\u1005bleBracket;\\u67e7n\\u01d4\\u100a\\0\\u1014eeVector;\\u695dector\\u0100;B\\u101d\\u101e\\u61c2ar;\\u6955loor;\\u630b\\u0100er\\u102d\\u1043e\\u0180;AV\\u1035\\u1036\\u103c\\u62a2rrow;\\u61a6ector;\\u695biangle\\u0180;BE\\u1050\\u1051\\u1055\\u62b3ar;\\u69d0qual;\\u62b5p\\u0180DTV\\u1063\\u106e\\u1078ownVector;\\u694feeVector;\\u695cector\\u0100;B\\u1082\\u1083\\u61bear;\\u6954ector\\u0100;B\\u1091\\u1092\\u61c0ar;\\u6953\\u0100pu\\u109b\\u109ef;\\u611dndImplies;\\u6970ightarrow;\\u61db\\u0100ch\\u10b9\\u10bcr;\\u611b;\\u61b1leDelayed;\\u69f4\\u0680HOacfhimoqstu\\u10e4\\u10f1\\u10f7\\u10fd\\u1119\\u111e\\u1151\\u1156\\u1161\\u1167\\u11b5\\u11bb\\u11bf\\u0100Cc\\u10e9\\u10eeHcy;\\u4429y;\\u4428FTcy;\\u442ccute;\\u415a\\u0280;aeiy\\u1108\\u1109\\u110e\\u1113\\u1117\\u6abcron;\\u4160dil;\\u415erc;\\u415c;\\u4421r;\\uc000\\ud835\\udd16ort\\u0200DLRU\\u112a\\u1134\\u113e\\u1149ownArrow\\xbb\\u041eeftArrow\\xbb\\u089aightArrow\\xbb\\u0fddpArrow;\\u6191gma;\\u43a3allCircle;\\u6218pf;\\uc000\\ud835\\udd4a\\u0272\\u116d\\0\\0\\u1170t;\\u621aare\\u0200;ISU\\u117b\\u117c\\u1189\\u11af\\u65a1ntersection;\\u6293u\\u0100bp\\u118f\\u119eset\\u0100;E\\u1197\\u1198\\u628fqual;\\u6291erset\\u0100;E\\u11a8\\u11a9\\u6290qual;\\u6292nion;\\u6294cr;\\uc000\\ud835\\udcaear;\\u62c6\\u0200bcmp\\u11c8\\u11db\\u1209\\u120b\\u0100;s\\u11cd\\u11ce\\u62d0et\\u0100;E\\u11cd\\u11d5qual;\\u6286\\u0100ch\\u11e0\\u1205eeds\\u0200;EST\\u11ed\\u11ee\\u11f4\\u11ff\\u627bqual;\\u6ab0lantEqual;\\u627dilde;\\u627fTh\\xe1\\u0f8c;\\u6211\\u0180;es\\u1212\\u1213\\u1223\\u62d1rset\\u0100;E\\u121c\\u121d\\u6283qual;\\u6287et\\xbb\\u1213\\u0580HRSacfhiors\\u123e\\u1244\\u1249\\u1255\\u125e\\u1271\\u1276\\u129f\\u12c2\\u12c8\\u12d1ORN\\u803b\\xde\\u40deADE;\\u6122\\u0100Hc\\u124e\\u1252cy;\\u440by;\\u4426\\u0100bu\\u125a\\u125c;\\u4009;\\u43a4\\u0180aey\\u1265\\u126a\\u126fron;\\u4164dil;\\u4162;\\u4422r;\\uc000\\ud835\\udd17\\u0100ei\\u127b\\u1289\\u01f2\\u1280\\0\\u1287efore;\\u6234a;\\u4398\\u0100cn\\u128e\\u1298kSpace;\\uc000\\u205f\\u200aSpace;\\u6009lde\\u0200;EFT\\u12ab\\u12ac\\u12b2\\u12bc\\u623cqual;\\u6243ullEqual;\\u6245ilde;\\u6248pf;\\uc000\\ud835\\udd4bipleDot;\\u60db\\u0100ct\\u12d6\\u12dbr;\\uc000\\ud835\\udcafrok;\\u4166\\u0ae1\\u12f7\\u130e\\u131a\\u1326\\0\\u132c\\u1331\\0\\0\\0\\0\\0\\u1338\\u133d\\u1377\\u1385\\0\\u13ff\\u1404\\u140a\\u1410\\u0100cr\\u12fb\\u1301ute\\u803b\\xda\\u40dar\\u0100;o\\u1307\\u1308\\u619fcir;\\u6949r\\u01e3\\u1313\\0\\u1316y;\\u440eve;\\u416c\\u0100iy\\u131e\\u1323rc\\u803b\\xdb\\u40db;\\u4423blac;\\u4170r;\\uc000\\ud835\\udd18rave\\u803b\\xd9\\u40d9acr;\\u416a\\u0100di\\u1341\\u1369er\\u0100BP\\u1348\\u135d\\u0100ar\\u134d\\u1350r;\\u405fac\\u0100ek\\u1357\\u1359;\\u63dfet;\\u63b5arenthesis;\\u63ddon\\u0100;P\\u1370\\u1371\\u62c3lus;\\u628e\\u0100gp\\u137b\\u137fon;\\u4172f;\\uc000\\ud835\\udd4c\\u0400ADETadps\\u1395\\u13ae\\u13b8\\u13c4\\u03e8\\u13d2\\u13d7\\u13f3rrow\\u0180;BD\\u1150\\u13a0\\u13a4ar;\\u6912ownArrow;\\u61c5ownArrow;\\u6195quilibrium;\\u696eee\\u0100;A\\u13cb\\u13cc\\u62a5rrow;\\u61a5own\\xe1\\u03f3er\\u0100LR\\u13de\\u13e8eftArrow;\\u6196ightArrow;\\u6197i\\u0100;l\\u13f9\\u13fa\\u43d2on;\\u43a5ing;\\u416ecr;\\uc000\\ud835\\udcb0ilde;\\u4168ml\\u803b\\xdc\\u40dc\\u0480Dbcdefosv\\u1427\\u142c\\u1430\\u1433\\u143e\\u1485\\u148a\\u1490\\u1496ash;\\u62abar;\\u6aeby;\\u4412ash\\u0100;l\\u143b\\u143c\\u62a9;\\u6ae6\\u0100er\\u1443\\u1445;\\u62c1\\u0180bty\\u144c\\u1450\\u147aar;\\u6016\\u0100;i\\u144f\\u1455cal\\u0200BLST\\u1461\\u1465\\u146a\\u1474ar;\\u6223ine;\\u407ceparator;\\u6758ilde;\\u6240ThinSpace;\\u600ar;\\uc000\\ud835\\udd19pf;\\uc000\\ud835\\udd4dcr;\\uc000\\ud835\\udcb1dash;\\u62aa\\u0280cefos\\u14a7\\u14ac\\u14b1\\u14b6\\u14bcirc;\\u4174dge;\\u62c0r;\\uc000\\ud835\\udd1apf;\\uc000\\ud835\\udd4ecr;\\uc000\\ud835\\udcb2\\u0200fios\\u14cb\\u14d0\\u14d2\\u14d8r;\\uc000\\ud835\\udd1b;\\u439epf;\\uc000\\ud835\\udd4fcr;\\uc000\\ud835\\udcb3\\u0480AIUacfosu\\u14f1\\u14f5\\u14f9\\u14fd\\u1504\\u150f\\u1514\\u151a\\u1520cy;\\u442fcy;\\u4407cy;\\u442ecute\\u803b\\xdd\\u40dd\\u0100iy\\u1509\\u150drc;\\u4176;\\u442br;\\uc000\\ud835\\udd1cpf;\\uc000\\ud835\\udd50cr;\\uc000\\ud835\\udcb4ml;\\u4178\\u0400Hacdefos\\u1535\\u1539\\u153f\\u154b\\u154f\\u155d\\u1560\\u1564cy;\\u4416cute;\\u4179\\u0100ay\\u1544\\u1549ron;\\u417d;\\u4417ot;\\u417b\\u01f2\\u1554\\0\\u155boWidt\\xe8\\u0ad9a;\\u4396r;\\u6128pf;\\u6124cr;\\uc000\\ud835\\udcb5\\u0be1\\u1583\\u158a\\u1590\\0\\u15b0\\u15b6\\u15bf\\0\\0\\0\\0\\u15c6\\u15db\\u15eb\\u165f\\u166d\\0\\u1695\\u169b\\u16b2\\u16b9\\0\\u16becute\\u803b\\xe1\\u40e1reve;\\u4103\\u0300;Ediuy\\u159c\\u159d\\u15a1\\u15a3\\u15a8\\u15ad\\u623e;\\uc000\\u223e\\u0333;\\u623frc\\u803b\\xe2\\u40e2te\\u80bb\\xb4\\u0306;\\u4430lig\\u803b\\xe6\\u40e6\\u0100;r\\xb2\\u15ba;\\uc000\\ud835\\udd1erave\\u803b\\xe0\\u40e0\\u0100ep\\u15ca\\u15d6\\u0100fp\\u15cf\\u15d4sym;\\u6135\\xe8\\u15d3ha;\\u43b1\\u0100ap\\u15dfc\\u0100cl\\u15e4\\u15e7r;\\u4101g;\\u6a3f\\u0264\\u15f0\\0\\0\\u160a\\u0280;adsv\\u15fa\\u15fb\\u15ff\\u1601\\u1607\\u6227nd;\\u6a55;\\u6a5clope;\\u6a58;\\u6a5a\\u0380;elmrsz\\u1618\\u1619\\u161b\\u161e\\u163f\\u164f\\u1659\\u6220;\\u69a4e\\xbb\\u1619sd\\u0100;a\\u1625\\u1626\\u6221\\u0461\\u1630\\u1632\\u1634\\u1636\\u1638\\u163a\\u163c\\u163e;\\u69a8;\\u69a9;\\u69aa;\\u69ab;\\u69ac;\\u69ad;\\u69ae;\\u69aft\\u0100;v\\u1645\\u1646\\u621fb\\u0100;d\\u164c\\u164d\\u62be;\\u699d\\u0100pt\\u1654\\u1657h;\\u6222\\xbb\\xb9arr;\\u637c\\u0100gp\\u1663\\u1667on;\\u4105f;\\uc000\\ud835\\udd52\\u0380;Eaeiop\\u12c1\\u167b\\u167d\\u1682\\u1684\\u1687\\u168a;\\u6a70cir;\\u6a6f;\\u624ad;\\u624bs;\\u4027rox\\u0100;e\\u12c1\\u1692\\xf1\\u1683ing\\u803b\\xe5\\u40e5\\u0180cty\\u16a1\\u16a6\\u16a8r;\\uc000\\ud835\\udcb6;\\u402amp\\u0100;e\\u12c1\\u16af\\xf1\\u0288ilde\\u803b\\xe3\\u40e3ml\\u803b\\xe4\\u40e4\\u0100ci\\u16c2\\u16c8onin\\xf4\\u0272nt;\\u6a11\\u0800Nabcdefiklnoprsu\\u16ed\\u16f1\\u1730\\u173c\\u1743\\u1748\\u1778\\u177d\\u17e0\\u17e6\\u1839\\u1850\\u170d\\u193d\\u1948\\u1970ot;\\u6aed\\u0100cr\\u16f6\\u171ek\\u0200ceps\\u1700\\u1705\\u170d\\u1713ong;\\u624cpsilon;\\u43f6rime;\\u6035im\\u0100;e\\u171a\\u171b\\u623dq;\\u62cd\\u0176\\u1722\\u1726ee;\\u62bded\\u0100;g\\u172c\\u172d\\u6305e\\xbb\\u172drk\\u0100;t\\u135c\\u1737brk;\\u63b6\\u0100oy\\u1701\\u1741;\\u4431quo;\\u601e\\u0280cmprt\\u1753\\u175b\\u1761\\u1764\\u1768aus\\u0100;e\\u010a\\u0109ptyv;\\u69b0s\\xe9\\u170cno\\xf5\\u0113\\u0180ahw\\u176f\\u1771\\u1773;\\u43b2;\\u6136een;\\u626cr;\\uc000\\ud835\\udd1fg\\u0380costuvw\\u178d\\u179d\\u17b3\\u17c1\\u17d5\\u17db\\u17de\\u0180aiu\\u1794\\u1796\\u179a\\xf0\\u0760rc;\\u65efp\\xbb\\u1371\\u0180dpt\\u17a4\\u17a8\\u17adot;\\u6a00lus;\\u6a01imes;\\u6a02\\u0271\\u17b9\\0\\0\\u17becup;\\u6a06ar;\\u6605riangle\\u0100du\\u17cd\\u17d2own;\\u65bdp;\\u65b3plus;\\u6a04e\\xe5\\u1444\\xe5\\u14adarow;\\u690d\\u0180ako\\u17ed\\u1826\\u1835\\u0100cn\\u17f2\\u1823k\\u0180lst\\u17fa\\u05ab\\u1802ozenge;\\u69ebriangle\\u0200;dlr\\u1812\\u1813\\u1818\\u181d\\u65b4own;\\u65beeft;\\u65c2ight;\\u65b8k;\\u6423\\u01b1\\u182b\\0\\u1833\\u01b2\\u182f\\0\\u1831;\\u6592;\\u65914;\\u6593ck;\\u6588\\u0100eo\\u183e\\u184d\\u0100;q\\u1843\\u1846\\uc000=\\u20e5uiv;\\uc000\\u2261\\u20e5t;\\u6310\\u0200ptwx\\u1859\\u185e\\u1867\\u186cf;\\uc000\\ud835\\udd53\\u0100;t\\u13cb\\u1863om\\xbb\\u13cctie;\\u62c8\\u0600DHUVbdhmptuv\\u1885\\u1896\\u18aa\\u18bb\\u18d7\\u18db\\u18ec\\u18ff\\u1905\\u190a\\u1910\\u1921\\u0200LRlr\\u188e\\u1890\\u1892\\u1894;\\u6557;\\u6554;\\u6556;\\u6553\\u0280;DUdu\\u18a1\\u18a2\\u18a4\\u18a6\\u18a8\\u6550;\\u6566;\\u6569;\\u6564;\\u6567\\u0200LRlr\\u18b3\\u18b5\\u18b7\\u18b9;\\u655d;\\u655a;\\u655c;\\u6559\\u0380;HLRhlr\\u18ca\\u18cb\\u18cd\\u18cf\\u18d1\\u18d3\\u18d5\\u6551;\\u656c;\\u6563;\\u6560;\\u656b;\\u6562;\\u655fox;\\u69c9\\u0200LRlr\\u18e4\\u18e6\\u18e8\\u18ea;\\u6555;\\u6552;\\u6510;\\u650c\\u0280;DUdu\\u06bd\\u18f7\\u18f9\\u18fb\\u18fd;\\u6565;\\u6568;\\u652c;\\u6534inus;\\u629flus;\\u629eimes;\\u62a0\\u0200LRlr\\u1919\\u191b\\u191d\\u191f;\\u655b;\\u6558;\\u6518;\\u6514\\u0380;HLRhlr\\u1930\\u1931\\u1933\\u1935\\u1937\\u1939\\u193b\\u6502;\\u656a;\\u6561;\\u655e;\\u653c;\\u6524;\\u651c\\u0100ev\\u0123\\u1942bar\\u803b\\xa6\\u40a6\\u0200ceio\\u1951\\u1956\\u195a\\u1960r;\\uc000\\ud835\\udcb7mi;\\u604fm\\u0100;e\\u171a\\u171cl\\u0180;bh\\u1968\\u1969\\u196b\\u405c;\\u69c5sub;\\u67c8\\u016c\\u1974\\u197el\\u0100;e\\u1979\\u197a\\u6022t\\xbb\\u197ap\\u0180;Ee\\u012f\\u1985\\u1987;\\u6aae\\u0100;q\\u06dc\\u06db\\u0ce1\\u19a7\\0\\u19e8\\u1a11\\u1a15\\u1a32\\0\\u1a37\\u1a50\\0\\0\\u1ab4\\0\\0\\u1ac1\\0\\0\\u1b21\\u1b2e\\u1b4d\\u1b52\\0\\u1bfd\\0\\u1c0c\\u0180cpr\\u19ad\\u19b2\\u19ddute;\\u4107\\u0300;abcds\\u19bf\\u19c0\\u19c4\\u19ca\\u19d5\\u19d9\\u6229nd;\\u6a44rcup;\\u6a49\\u0100au\\u19cf\\u19d2p;\\u6a4bp;\\u6a47ot;\\u6a40;\\uc000\\u2229\\ufe00\\u0100eo\\u19e2\\u19e5t;\\u6041\\xee\\u0693\\u0200aeiu\\u19f0\\u19fb\\u1a01\\u1a05\\u01f0\\u19f5\\0\\u19f8s;\\u6a4don;\\u410ddil\\u803b\\xe7\\u40e7rc;\\u4109ps\\u0100;s\\u1a0c\\u1a0d\\u6a4cm;\\u6a50ot;\\u410b\\u0180dmn\\u1a1b\\u1a20\\u1a26il\\u80bb\\xb8\\u01adptyv;\\u69b2t\\u8100\\xa2;e\\u1a2d\\u1a2e\\u40a2r\\xe4\\u01b2r;\\uc000\\ud835\\udd20\\u0180cei\\u1a3d\\u1a40\\u1a4dy;\\u4447ck\\u0100;m\\u1a47\\u1a48\\u6713ark\\xbb\\u1a48;\\u43c7r\\u0380;Ecefms\\u1a5f\\u1a60\\u1a62\\u1a6b\\u1aa4\\u1aaa\\u1aae\\u65cb;\\u69c3\\u0180;el\\u1a69\\u1a6a\\u1a6d\\u42c6q;\\u6257e\\u0261\\u1a74\\0\\0\\u1a88rrow\\u0100lr\\u1a7c\\u1a81eft;\\u61baight;\\u61bb\\u0280RSacd\\u1a92\\u1a94\\u1a96\\u1a9a\\u1a9f\\xbb\\u0f47;\\u64c8st;\\u629birc;\\u629aash;\\u629dnint;\\u6a10id;\\u6aefcir;\\u69c2ubs\\u0100;u\\u1abb\\u1abc\\u6663it\\xbb\\u1abc\\u02ec\\u1ac7\\u1ad4\\u1afa\\0\\u1b0aon\\u0100;e\\u1acd\\u1ace\\u403a\\u0100;q\\xc7\\xc6\\u026d\\u1ad9\\0\\0\\u1ae2a\\u0100;t\\u1ade\\u1adf\\u402c;\\u4040\\u0180;fl\\u1ae8\\u1ae9\\u1aeb\\u6201\\xee\\u1160e\\u0100mx\\u1af1\\u1af6ent\\xbb\\u1ae9e\\xf3\\u024d\\u01e7\\u1afe\\0\\u1b07\\u0100;d\\u12bb\\u1b02ot;\\u6a6dn\\xf4\\u0246\\u0180fry\\u1b10\\u1b14\\u1b17;\\uc000\\ud835\\udd54o\\xe4\\u0254\\u8100\\xa9;s\\u0155\\u1b1dr;\\u6117\\u0100ao\\u1b25\\u1b29rr;\\u61b5ss;\\u6717\\u0100cu\\u1b32\\u1b37r;\\uc000\\ud835\\udcb8\\u0100bp\\u1b3c\\u1b44\\u0100;e\\u1b41\\u1b42\\u6acf;\\u6ad1\\u0100;e\\u1b49\\u1b4a\\u6ad0;\\u6ad2dot;\\u62ef\\u0380delprvw\\u1b60\\u1b6c\\u1b77\\u1b82\\u1bac\\u1bd4\\u1bf9arr\\u0100lr\\u1b68\\u1b6a;\\u6938;\\u6935\\u0270\\u1b72\\0\\0\\u1b75r;\\u62dec;\\u62dfarr\\u0100;p\\u1b7f\\u1b80\\u61b6;\\u693d\\u0300;bcdos\\u1b8f\\u1b90\\u1b96\\u1ba1\\u1ba5\\u1ba8\\u622arcap;\\u6a48\\u0100au\\u1b9b\\u1b9ep;\\u6a46p;\\u6a4aot;\\u628dr;\\u6a45;\\uc000\\u222a\\ufe00\\u0200alrv\\u1bb5\\u1bbf\\u1bde\\u1be3rr\\u0100;m\\u1bbc\\u1bbd\\u61b7;\\u693cy\\u0180evw\\u1bc7\\u1bd4\\u1bd8q\\u0270\\u1bce\\0\\0\\u1bd2re\\xe3\\u1b73u\\xe3\\u1b75ee;\\u62ceedge;\\u62cfen\\u803b\\xa4\\u40a4earrow\\u0100lr\\u1bee\\u1bf3eft\\xbb\\u1b80ight\\xbb\\u1bbde\\xe4\\u1bdd\\u0100ci\\u1c01\\u1c07onin\\xf4\\u01f7nt;\\u6231lcty;\\u632d\\u0980AHabcdefhijlorstuwz\\u1c38\\u1c3b\\u1c3f\\u1c5d\\u1c69\\u1c75\\u1c8a\\u1c9e\\u1cac\\u1cb7\\u1cfb\\u1cff\\u1d0d\\u1d7b\\u1d91\\u1dab\\u1dbb\\u1dc6\\u1dcdr\\xf2\\u0381ar;\\u6965\\u0200glrs\\u1c48\\u1c4d\\u1c52\\u1c54ger;\\u6020eth;\\u6138\\xf2\\u1133h\\u0100;v\\u1c5a\\u1c5b\\u6010\\xbb\\u090a\\u016b\\u1c61\\u1c67arow;\\u690fa\\xe3\\u0315\\u0100ay\\u1c6e\\u1c73ron;\\u410f;\\u4434\\u0180;ao\\u0332\\u1c7c\\u1c84\\u0100gr\\u02bf\\u1c81r;\\u61catseq;\\u6a77\\u0180glm\\u1c91\\u1c94\\u1c98\\u803b\\xb0\\u40b0ta;\\u43b4ptyv;\\u69b1\\u0100ir\\u1ca3\\u1ca8sht;\\u697f;\\uc000\\ud835\\udd21ar\\u0100lr\\u1cb3\\u1cb5\\xbb\\u08dc\\xbb\\u101e\\u0280aegsv\\u1cc2\\u0378\\u1cd6\\u1cdc\\u1ce0m\\u0180;os\\u0326\\u1cca\\u1cd4nd\\u0100;s\\u0326\\u1cd1uit;\\u6666amma;\\u43ddin;\\u62f2\\u0180;io\\u1ce7\\u1ce8\\u1cf8\\u40f7de\\u8100\\xf7;o\\u1ce7\\u1cf0ntimes;\\u62c7n\\xf8\\u1cf7cy;\\u4452c\\u026f\\u1d06\\0\\0\\u1d0arn;\\u631eop;\\u630d\\u0280lptuw\\u1d18\\u1d1d\\u1d22\\u1d49\\u1d55lar;\\u4024f;\\uc000\\ud835\\udd55\\u0280;emps\\u030b\\u1d2d\\u1d37\\u1d3d\\u1d42q\\u0100;d\\u0352\\u1d33ot;\\u6251inus;\\u6238lus;\\u6214quare;\\u62a1blebarwedg\\xe5\\xfan\\u0180adh\\u112e\\u1d5d\\u1d67ownarrow\\xf3\\u1c83arpoon\\u0100lr\\u1d72\\u1d76ef\\xf4\\u1cb4igh\\xf4\\u1cb6\\u0162\\u1d7f\\u1d85karo\\xf7\\u0f42\\u026f\\u1d8a\\0\\0\\u1d8ern;\\u631fop;\\u630c\\u0180cot\\u1d98\\u1da3\\u1da6\\u0100ry\\u1d9d\\u1da1;\\uc000\\ud835\\udcb9;\\u4455l;\\u69f6rok;\\u4111\\u0100dr\\u1db0\\u1db4ot;\\u62f1i\\u0100;f\\u1dba\\u1816\\u65bf\\u0100ah\\u1dc0\\u1dc3r\\xf2\\u0429a\\xf2\\u0fa6angle;\\u69a6\\u0100ci\\u1dd2\\u1dd5y;\\u445fgrarr;\\u67ff\\u0900Dacdefglmnopqrstux\\u1e01\\u1e09\\u1e19\\u1e38\\u0578\\u1e3c\\u1e49\\u1e61\\u1e7e\\u1ea5\\u1eaf\\u1ebd\\u1ee1\\u1f2a\\u1f37\\u1f44\\u1f4e\\u1f5a\\u0100Do\\u1e06\\u1d34o\\xf4\\u1c89\\u0100cs\\u1e0e\\u1e14ute\\u803b\\xe9\\u40e9ter;\\u6a6e\\u0200aioy\\u1e22\\u1e27\\u1e31\\u1e36ron;\\u411br\\u0100;c\\u1e2d\\u1e2e\\u6256\\u803b\\xea\\u40ealon;\\u6255;\\u444dot;\\u4117\\u0100Dr\\u1e41\\u1e45ot;\\u6252;\\uc000\\ud835\\udd22\\u0180;rs\\u1e50\\u1e51\\u1e57\\u6a9aave\\u803b\\xe8\\u40e8\\u0100;d\\u1e5c\\u1e5d\\u6a96ot;\\u6a98\\u0200;ils\\u1e6a\\u1e6b\\u1e72\\u1e74\\u6a99nters;\\u63e7;\\u6113\\u0100;d\\u1e79\\u1e7a\\u6a95ot;\\u6a97\\u0180aps\\u1e85\\u1e89\\u1e97cr;\\u4113ty\\u0180;sv\\u1e92\\u1e93\\u1e95\\u6205et\\xbb\\u1e93p\\u01001;\\u1e9d\\u1ea4\\u0133\\u1ea1\\u1ea3;\\u6004;\\u6005\\u6003\\u0100gs\\u1eaa\\u1eac;\\u414bp;\\u6002\\u0100gp\\u1eb4\\u1eb8on;\\u4119f;\\uc000\\ud835\\udd56\\u0180als\\u1ec4\\u1ece\\u1ed2r\\u0100;s\\u1eca\\u1ecb\\u62d5l;\\u69e3us;\\u6a71i\\u0180;lv\\u1eda\\u1edb\\u1edf\\u43b5on\\xbb\\u1edb;\\u43f5\\u0200csuv\\u1eea\\u1ef3\\u1f0b\\u1f23\\u0100io\\u1eef\\u1e31rc\\xbb\\u1e2e\\u0269\\u1ef9\\0\\0\\u1efb\\xed\\u0548ant\\u0100gl\\u1f02\\u1f06tr\\xbb\\u1e5dess\\xbb\\u1e7a\\u0180aei\\u1f12\\u1f16\\u1f1als;\\u403dst;\\u625fv\\u0100;D\\u0235\\u1f20D;\\u6a78parsl;\\u69e5\\u0100Da\\u1f2f\\u1f33ot;\\u6253rr;\\u6971\\u0180cdi\\u1f3e\\u1f41\\u1ef8r;\\u612fo\\xf4\\u0352\\u0100ah\\u1f49\\u1f4b;\\u43b7\\u803b\\xf0\\u40f0\\u0100mr\\u1f53\\u1f57l\\u803b\\xeb\\u40ebo;\\u60ac\\u0180cip\\u1f61\\u1f64\\u1f67l;\\u4021s\\xf4\\u056e\\u0100eo\\u1f6c\\u1f74ctatio\\xee\\u0559nential\\xe5\\u0579\\u09e1\\u1f92\\0\\u1f9e\\0\\u1fa1\\u1fa7\\0\\0\\u1fc6\\u1fcc\\0\\u1fd3\\0\\u1fe6\\u1fea\\u2000\\0\\u2008\\u205allingdotse\\xf1\\u1e44y;\\u4444male;\\u6640\\u0180ilr\\u1fad\\u1fb3\\u1fc1lig;\\u8000\\ufb03\\u0269\\u1fb9\\0\\0\\u1fbdg;\\u8000\\ufb00ig;\\u8000\\ufb04;\\uc000\\ud835\\udd23lig;\\u8000\\ufb01lig;\\uc000fj\\u0180alt\\u1fd9\\u1fdc\\u1fe1t;\\u666dig;\\u8000\\ufb02ns;\\u65b1of;\\u4192\\u01f0\\u1fee\\0\\u1ff3f;\\uc000\\ud835\\udd57\\u0100ak\\u05bf\\u1ff7\\u0100;v\\u1ffc\\u1ffd\\u62d4;\\u6ad9artint;\\u6a0d\\u0100ao\\u200c\\u2055\\u0100cs\\u2011\\u2052\\u03b1\\u201a\\u2030\\u2038\\u2045\\u2048\\0\\u2050\\u03b2\\u2022\\u2025\\u2027\\u202a\\u202c\\0\\u202e\\u803b\\xbd\\u40bd;\\u6153\\u803b\\xbc\\u40bc;\\u6155;\\u6159;\\u615b\\u01b3\\u2034\\0\\u2036;\\u6154;\\u6156\\u02b4\\u203e\\u2041\\0\\0\\u2043\\u803b\\xbe\\u40be;\\u6157;\\u615c5;\\u6158\\u01b6\\u204c\\0\\u204e;\\u615a;\\u615d8;\\u615el;\\u6044wn;\\u6322cr;\\uc000\\ud835\\udcbb\\u0880Eabcdefgijlnorstv\\u2082\\u2089\\u209f\\u20a5\\u20b0\\u20b4\\u20f0\\u20f5\\u20fa\\u20ff\\u2103\\u2112\\u2138\\u0317\\u213e\\u2152\\u219e\\u0100;l\\u064d\\u2087;\\u6a8c\\u0180cmp\\u2090\\u2095\\u209dute;\\u41f5ma\\u0100;d\\u209c\\u1cda\\u43b3;\\u6a86reve;\\u411f\\u0100iy\\u20aa\\u20aerc;\\u411d;\\u4433ot;\\u4121\\u0200;lqs\\u063e\\u0642\\u20bd\\u20c9\\u0180;qs\\u063e\\u064c\\u20c4lan\\xf4\\u0665\\u0200;cdl\\u0665\\u20d2\\u20d5\\u20e5c;\\u6aa9ot\\u0100;o\\u20dc\\u20dd\\u6a80\\u0100;l\\u20e2\\u20e3\\u6a82;\\u6a84\\u0100;e\\u20ea\\u20ed\\uc000\\u22db\\ufe00s;\\u6a94r;\\uc000\\ud835\\udd24\\u0100;g\\u0673\\u061bmel;\\u6137cy;\\u4453\\u0200;Eaj\\u065a\\u210c\\u210e\\u2110;\\u6a92;\\u6aa5;\\u6aa4\\u0200Eaes\\u211b\\u211d\\u2129\\u2134;\\u6269p\\u0100;p\\u2123\\u2124\\u6a8arox\\xbb\\u2124\\u0100;q\\u212e\\u212f\\u6a88\\u0100;q\\u212e\\u211bim;\\u62e7pf;\\uc000\\ud835\\udd58\\u0100ci\\u2143\\u2146r;\\u610am\\u0180;el\\u066b\\u214e\\u2150;\\u6a8e;\\u6a90\\u8300>;cdlqr\\u05ee\\u2160\\u216a\\u216e\\u2173\\u2179\\u0100ci\\u2165\\u2167;\\u6aa7r;\\u6a7aot;\\u62d7Par;\\u6995uest;\\u6a7c\\u0280adels\\u2184\\u216a\\u2190\\u0656\\u219b\\u01f0\\u2189\\0\\u218epro\\xf8\\u209er;\\u6978q\\u0100lq\\u063f\\u2196les\\xf3\\u2088i\\xed\\u066b\\u0100en\\u21a3\\u21adrtneqq;\\uc000\\u2269\\ufe00\\xc5\\u21aa\\u0500Aabcefkosy\\u21c4\\u21c7\\u21f1\\u21f5\\u21fa\\u2218\\u221d\\u222f\\u2268\\u227dr\\xf2\\u03a0\\u0200ilmr\\u21d0\\u21d4\\u21d7\\u21dbrs\\xf0\\u1484f\\xbb\\u2024il\\xf4\\u06a9\\u0100dr\\u21e0\\u21e4cy;\\u444a\\u0180;cw\\u08f4\\u21eb\\u21efir;\\u6948;\\u61adar;\\u610firc;\\u4125\\u0180alr\\u2201\\u220e\\u2213rts\\u0100;u\\u2209\\u220a\\u6665it\\xbb\\u220alip;\\u6026con;\\u62b9r;\\uc000\\ud835\\udd25s\\u0100ew\\u2223\\u2229arow;\\u6925arow;\\u6926\\u0280amopr\\u223a\\u223e\\u2243\\u225e\\u2263rr;\\u61fftht;\\u623bk\\u0100lr\\u2249\\u2253eftarrow;\\u61a9ightarrow;\\u61aaf;\\uc000\\ud835\\udd59bar;\\u6015\\u0180clt\\u226f\\u2274\\u2278r;\\uc000\\ud835\\udcbdas\\xe8\\u21f4rok;\\u4127\\u0100bp\\u2282\\u2287ull;\\u6043hen\\xbb\\u1c5b\\u0ae1\\u22a3\\0\\u22aa\\0\\u22b8\\u22c5\\u22ce\\0\\u22d5\\u22f3\\0\\0\\u22f8\\u2322\\u2367\\u2362\\u237f\\0\\u2386\\u23aa\\u23b4cute\\u803b\\xed\\u40ed\\u0180;iy\\u0771\\u22b0\\u22b5rc\\u803b\\xee\\u40ee;\\u4438\\u0100cx\\u22bc\\u22bfy;\\u4435cl\\u803b\\xa1\\u40a1\\u0100fr\\u039f\\u22c9;\\uc000\\ud835\\udd26rave\\u803b\\xec\\u40ec\\u0200;ino\\u073e\\u22dd\\u22e9\\u22ee\\u0100in\\u22e2\\u22e6nt;\\u6a0ct;\\u622dfin;\\u69dcta;\\u6129lig;\\u4133\\u0180aop\\u22fe\\u231a\\u231d\\u0180cgt\\u2305\\u2308\\u2317r;\\u412b\\u0180elp\\u071f\\u230f\\u2313in\\xe5\\u078ear\\xf4\\u0720h;\\u4131f;\\u62b7ed;\\u41b5\\u0280;cfot\\u04f4\\u232c\\u2331\\u233d\\u2341are;\\u6105in\\u0100;t\\u2338\\u2339\\u621eie;\\u69dddo\\xf4\\u2319\\u0280;celp\\u0757\\u234c\\u2350\\u235b\\u2361al;\\u62ba\\u0100gr\\u2355\\u2359er\\xf3\\u1563\\xe3\\u234darhk;\\u6a17rod;\\u6a3c\\u0200cgpt\\u236f\\u2372\\u2376\\u237by;\\u4451on;\\u412ff;\\uc000\\ud835\\udd5aa;\\u43b9uest\\u803b\\xbf\\u40bf\\u0100ci\\u238a\\u238fr;\\uc000\\ud835\\udcben\\u0280;Edsv\\u04f4\\u239b\\u239d\\u23a1\\u04f3;\\u62f9ot;\\u62f5\\u0100;v\\u23a6\\u23a7\\u62f4;\\u62f3\\u0100;i\\u0777\\u23aelde;\\u4129\\u01eb\\u23b8\\0\\u23bccy;\\u4456l\\u803b\\xef\\u40ef\\u0300cfmosu\\u23cc\\u23d7\\u23dc\\u23e1\\u23e7\\u23f5\\u0100iy\\u23d1\\u23d5rc;\\u4135;\\u4439r;\\uc000\\ud835\\udd27ath;\\u4237pf;\\uc000\\ud835\\udd5b\\u01e3\\u23ec\\0\\u23f1r;\\uc000\\ud835\\udcbfrcy;\\u4458kcy;\\u4454\\u0400acfghjos\\u240b\\u2416\\u2422\\u2427\\u242d\\u2431\\u2435\\u243bppa\\u0100;v\\u2413\\u2414\\u43ba;\\u43f0\\u0100ey\\u241b\\u2420dil;\\u4137;\\u443ar;\\uc000\\ud835\\udd28reen;\\u4138cy;\\u4445cy;\\u445cpf;\\uc000\\ud835\\udd5ccr;\\uc000\\ud835\\udcc0\\u0b80ABEHabcdefghjlmnoprstuv\\u2470\\u2481\\u2486\\u248d\\u2491\\u250e\\u253d\\u255a\\u2580\\u264e\\u265e\\u2665\\u2679\\u267d\\u269a\\u26b2\\u26d8\\u275d\\u2768\\u278b\\u27c0\\u2801\\u2812\\u0180art\\u2477\\u247a\\u247cr\\xf2\\u09c6\\xf2\\u0395ail;\\u691barr;\\u690e\\u0100;g\\u0994\\u248b;\\u6a8bar;\\u6962\\u0963\\u24a5\\0\\u24aa\\0\\u24b1\\0\\0\\0\\0\\0\\u24b5\\u24ba\\0\\u24c6\\u24c8\\u24cd\\0\\u24f9ute;\\u413amptyv;\\u69b4ra\\xee\\u084cbda;\\u43bbg\\u0180;dl\\u088e\\u24c1\\u24c3;\\u6991\\xe5\\u088e;\\u6a85uo\\u803b\\xab\\u40abr\\u0400;bfhlpst\\u0899\\u24de\\u24e6\\u24e9\\u24eb\\u24ee\\u24f1\\u24f5\\u0100;f\\u089d\\u24e3s;\\u691fs;\\u691d\\xeb\\u2252p;\\u61abl;\\u6939im;\\u6973l;\\u61a2\\u0180;ae\\u24ff\\u2500\\u2504\\u6aabil;\\u6919\\u0100;s\\u2509\\u250a\\u6aad;\\uc000\\u2aad\\ufe00\\u0180abr\\u2515\\u2519\\u251drr;\\u690crk;\\u6772\\u0100ak\\u2522\\u252cc\\u0100ek\\u2528\\u252a;\\u407b;\\u405b\\u0100es\\u2531\\u2533;\\u698bl\\u0100du\\u2539\\u253b;\\u698f;\\u698d\\u0200aeuy\\u2546\\u254b\\u2556\\u2558ron;\\u413e\\u0100di\\u2550\\u2554il;\\u413c\\xec\\u08b0\\xe2\\u2529;\\u443b\\u0200cqrs\\u2563\\u2566\\u256d\\u257da;\\u6936uo\\u0100;r\\u0e19\\u1746\\u0100du\\u2572\\u2577har;\\u6967shar;\\u694bh;\\u61b2\\u0280;fgqs\\u258b\\u258c\\u0989\\u25f3\\u25ff\\u6264t\\u0280ahlrt\\u2598\\u25a4\\u25b7\\u25c2\\u25e8rrow\\u0100;t\\u0899\\u25a1a\\xe9\\u24f6arpoon\\u0100du\\u25af\\u25b4own\\xbb\\u045ap\\xbb\\u0966eftarrows;\\u61c7ight\\u0180ahs\\u25cd\\u25d6\\u25derrow\\u0100;s\\u08f4\\u08a7arpoon\\xf3\\u0f98quigarro\\xf7\\u21f0hreetimes;\\u62cb\\u0180;qs\\u258b\\u0993\\u25falan\\xf4\\u09ac\\u0280;cdgs\\u09ac\\u260a\\u260d\\u261d\\u2628c;\\u6aa8ot\\u0100;o\\u2614\\u2615\\u6a7f\\u0100;r\\u261a\\u261b\\u6a81;\\u6a83\\u0100;e\\u2622\\u2625\\uc000\\u22da\\ufe00s;\\u6a93\\u0280adegs\\u2633\\u2639\\u263d\\u2649\\u264bppro\\xf8\\u24c6ot;\\u62d6q\\u0100gq\\u2643\\u2645\\xf4\\u0989gt\\xf2\\u248c\\xf4\\u099bi\\xed\\u09b2\\u0180ilr\\u2655\\u08e1\\u265asht;\\u697c;\\uc000\\ud835\\udd29\\u0100;E\\u099c\\u2663;\\u6a91\\u0161\\u2669\\u2676r\\u0100du\\u25b2\\u266e\\u0100;l\\u0965\\u2673;\\u696alk;\\u6584cy;\\u4459\\u0280;acht\\u0a48\\u2688\\u268b\\u2691\\u2696r\\xf2\\u25c1orne\\xf2\\u1d08ard;\\u696bri;\\u65fa\\u0100io\\u269f\\u26a4dot;\\u4140ust\\u0100;a\\u26ac\\u26ad\\u63b0che\\xbb\\u26ad\\u0200Eaes\\u26bb\\u26bd\\u26c9\\u26d4;\\u6268p\\u0100;p\\u26c3\\u26c4\\u6a89rox\\xbb\\u26c4\\u0100;q\\u26ce\\u26cf\\u6a87\\u0100;q\\u26ce\\u26bbim;\\u62e6\\u0400abnoptwz\\u26e9\\u26f4\\u26f7\\u271a\\u272f\\u2741\\u2747\\u2750\\u0100nr\\u26ee\\u26f1g;\\u67ecr;\\u61fdr\\xeb\\u08c1g\\u0180lmr\\u26ff\\u270d\\u2714eft\\u0100ar\\u09e6\\u2707ight\\xe1\\u09f2apsto;\\u67fcight\\xe1\\u09fdparrow\\u0100lr\\u2725\\u2729ef\\xf4\\u24edight;\\u61ac\\u0180afl\\u2736\\u2739\\u273dr;\\u6985;\\uc000\\ud835\\udd5dus;\\u6a2dimes;\\u6a34\\u0161\\u274b\\u274fst;\\u6217\\xe1\\u134e\\u0180;ef\\u2757\\u2758\\u1800\\u65cange\\xbb\\u2758ar\\u0100;l\\u2764\\u2765\\u4028t;\\u6993\\u0280achmt\\u2773\\u2776\\u277c\\u2785\\u2787r\\xf2\\u08a8orne\\xf2\\u1d8car\\u0100;d\\u0f98\\u2783;\\u696d;\\u600eri;\\u62bf\\u0300achiqt\\u2798\\u279d\\u0a40\\u27a2\\u27ae\\u27bbquo;\\u6039r;\\uc000\\ud835\\udcc1m\\u0180;eg\\u09b2\\u27aa\\u27ac;\\u6a8d;\\u6a8f\\u0100bu\\u252a\\u27b3o\\u0100;r\\u0e1f\\u27b9;\\u601arok;\\u4142\\u8400<;cdhilqr\\u082b\\u27d2\\u2639\\u27dc\\u27e0\\u27e5\\u27ea\\u27f0\\u0100ci\\u27d7\\u27d9;\\u6aa6r;\\u6a79re\\xe5\\u25f2mes;\\u62c9arr;\\u6976uest;\\u6a7b\\u0100Pi\\u27f5\\u27f9ar;\\u6996\\u0180;ef\\u2800\\u092d\\u181b\\u65c3r\\u0100du\\u2807\\u280dshar;\\u694ahar;\\u6966\\u0100en\\u2817\\u2821rtneqq;\\uc000\\u2268\\ufe00\\xc5\\u281e\\u0700Dacdefhilnopsu\\u2840\\u2845\\u2882\\u288e\\u2893\\u28a0\\u28a5\\u28a8\\u28da\\u28e2\\u28e4\\u0a83\\u28f3\\u2902Dot;\\u623a\\u0200clpr\\u284e\\u2852\\u2863\\u287dr\\u803b\\xaf\\u40af\\u0100et\\u2857\\u2859;\\u6642\\u0100;e\\u285e\\u285f\\u6720se\\xbb\\u285f\\u0100;s\\u103b\\u2868to\\u0200;dlu\\u103b\\u2873\\u2877\\u287bow\\xee\\u048cef\\xf4\\u090f\\xf0\\u13d1ker;\\u65ae\\u0100oy\\u2887\\u288cmma;\\u6a29;\\u443cash;\\u6014asuredangle\\xbb\\u1626r;\\uc000\\ud835\\udd2ao;\\u6127\\u0180cdn\\u28af\\u28b4\\u28c9ro\\u803b\\xb5\\u40b5\\u0200;acd\\u1464\\u28bd\\u28c0\\u28c4s\\xf4\\u16a7ir;\\u6af0ot\\u80bb\\xb7\\u01b5us\\u0180;bd\\u28d2\\u1903\\u28d3\\u6212\\u0100;u\\u1d3c\\u28d8;\\u6a2a\\u0163\\u28de\\u28e1p;\\u6adb\\xf2\\u2212\\xf0\\u0a81\\u0100dp\\u28e9\\u28eeels;\\u62a7f;\\uc000\\ud835\\udd5e\\u0100ct\\u28f8\\u28fdr;\\uc000\\ud835\\udcc2pos\\xbb\\u159d\\u0180;lm\\u2909\\u290a\\u290d\\u43bctimap;\\u62b8\\u0c00GLRVabcdefghijlmoprstuvw\\u2942\\u2953\\u297e\\u2989\\u2998\\u29da\\u29e9\\u2a15\\u2a1a\\u2a58\\u2a5d\\u2a83\\u2a95\\u2aa4\\u2aa8\\u2b04\\u2b07\\u2b44\\u2b7f\\u2bae\\u2c34\\u2c67\\u2c7c\\u2ce9\\u0100gt\\u2947\\u294b;\\uc000\\u22d9\\u0338\\u0100;v\\u2950\\u0bcf\\uc000\\u226b\\u20d2\\u0180elt\\u295a\\u2972\\u2976ft\\u0100ar\\u2961\\u2967rrow;\\u61cdightarrow;\\u61ce;\\uc000\\u22d8\\u0338\\u0100;v\\u297b\\u0c47\\uc000\\u226a\\u20d2ightarrow;\\u61cf\\u0100Dd\\u298e\\u2993ash;\\u62afash;\\u62ae\\u0280bcnpt\\u29a3\\u29a7\\u29ac\\u29b1\\u29ccla\\xbb\\u02deute;\\u4144g;\\uc000\\u2220\\u20d2\\u0280;Eiop\\u0d84\\u29bc\\u29c0\\u29c5\\u29c8;\\uc000\\u2a70\\u0338d;\\uc000\\u224b\\u0338s;\\u4149ro\\xf8\\u0d84ur\\u0100;a\\u29d3\\u29d4\\u666el\\u0100;s\\u29d3\\u0b38\\u01f3\\u29df\\0\\u29e3p\\u80bb\\xa0\\u0b37mp\\u0100;e\\u0bf9\\u0c00\\u0280aeouy\\u29f4\\u29fe\\u2a03\\u2a10\\u2a13\\u01f0\\u29f9\\0\\u29fb;\\u6a43on;\\u4148dil;\\u4146ng\\u0100;d\\u0d7e\\u2a0aot;\\uc000\\u2a6d\\u0338p;\\u6a42;\\u443dash;\\u6013\\u0380;Aadqsx\\u0b92\\u2a29\\u2a2d\\u2a3b\\u2a41\\u2a45\\u2a50rr;\\u61d7r\\u0100hr\\u2a33\\u2a36k;\\u6924\\u0100;o\\u13f2\\u13f0ot;\\uc000\\u2250\\u0338ui\\xf6\\u0b63\\u0100ei\\u2a4a\\u2a4ear;\\u6928\\xed\\u0b98ist\\u0100;s\\u0ba0\\u0b9fr;\\uc000\\ud835\\udd2b\\u0200Eest\\u0bc5\\u2a66\\u2a79\\u2a7c\\u0180;qs\\u0bbc\\u2a6d\\u0be1\\u0180;qs\\u0bbc\\u0bc5\\u2a74lan\\xf4\\u0be2i\\xed\\u0bea\\u0100;r\\u0bb6\\u2a81\\xbb\\u0bb7\\u0180Aap\\u2a8a\\u2a8d\\u2a91r\\xf2\\u2971rr;\\u61aear;\\u6af2\\u0180;sv\\u0f8d\\u2a9c\\u0f8c\\u0100;d\\u2aa1\\u2aa2\\u62fc;\\u62facy;\\u445a\\u0380AEadest\\u2ab7\\u2aba\\u2abe\\u2ac2\\u2ac5\\u2af6\\u2af9r\\xf2\\u2966;\\uc000\\u2266\\u0338rr;\\u619ar;\\u6025\\u0200;fqs\\u0c3b\\u2ace\\u2ae3\\u2aeft\\u0100ar\\u2ad4\\u2ad9rro\\xf7\\u2ac1ightarro\\xf7\\u2a90\\u0180;qs\\u0c3b\\u2aba\\u2aealan\\xf4\\u0c55\\u0100;s\\u0c55\\u2af4\\xbb\\u0c36i\\xed\\u0c5d\\u0100;r\\u0c35\\u2afei\\u0100;e\\u0c1a\\u0c25i\\xe4\\u0d90\\u0100pt\\u2b0c\\u2b11f;\\uc000\\ud835\\udd5f\\u8180\\xac;in\\u2b19\\u2b1a\\u2b36\\u40acn\\u0200;Edv\\u0b89\\u2b24\\u2b28\\u2b2e;\\uc000\\u22f9\\u0338ot;\\uc000\\u22f5\\u0338\\u01e1\\u0b89\\u2b33\\u2b35;\\u62f7;\\u62f6i\\u0100;v\\u0cb8\\u2b3c\\u01e1\\u0cb8\\u2b41\\u2b43;\\u62fe;\\u62fd\\u0180aor\\u2b4b\\u2b63\\u2b69r\\u0200;ast\\u0b7b\\u2b55\\u2b5a\\u2b5flle\\xec\\u0b7bl;\\uc000\\u2afd\\u20e5;\\uc000\\u2202\\u0338lint;\\u6a14\\u0180;ce\\u0c92\\u2b70\\u2b73u\\xe5\\u0ca5\\u0100;c\\u0c98\\u2b78\\u0100;e\\u0c92\\u2b7d\\xf1\\u0c98\\u0200Aait\\u2b88\\u2b8b\\u2b9d\\u2ba7r\\xf2\\u2988rr\\u0180;cw\\u2b94\\u2b95\\u2b99\\u619b;\\uc000\\u2933\\u0338;\\uc000\\u219d\\u0338ghtarrow\\xbb\\u2b95ri\\u0100;e\\u0ccb\\u0cd6\\u0380chimpqu\\u2bbd\\u2bcd\\u2bd9\\u2b04\\u0b78\\u2be4\\u2bef\\u0200;cer\\u0d32\\u2bc6\\u0d37\\u2bc9u\\xe5\\u0d45;\\uc000\\ud835\\udcc3ort\\u026d\\u2b05\\0\\0\\u2bd6ar\\xe1\\u2b56m\\u0100;e\\u0d6e\\u2bdf\\u0100;q\\u0d74\\u0d73su\\u0100bp\\u2beb\\u2bed\\xe5\\u0cf8\\xe5\\u0d0b\\u0180bcp\\u2bf6\\u2c11\\u2c19\\u0200;Ees\\u2bff\\u2c00\\u0d22\\u2c04\\u6284;\\uc000\\u2ac5\\u0338et\\u0100;e\\u0d1b\\u2c0bq\\u0100;q\\u0d23\\u2c00c\\u0100;e\\u0d32\\u2c17\\xf1\\u0d38\\u0200;Ees\\u2c22\\u2c23\\u0d5f\\u2c27\\u6285;\\uc000\\u2ac6\\u0338et\\u0100;e\\u0d58\\u2c2eq\\u0100;q\\u0d60\\u2c23\\u0200gilr\\u2c3d\\u2c3f\\u2c45\\u2c47\\xec\\u0bd7lde\\u803b\\xf1\\u40f1\\xe7\\u0c43iangle\\u0100lr\\u2c52\\u2c5ceft\\u0100;e\\u0c1a\\u2c5a\\xf1\\u0c26ight\\u0100;e\\u0ccb\\u2c65\\xf1\\u0cd7\\u0100;m\\u2c6c\\u2c6d\\u43bd\\u0180;es\\u2c74\\u2c75\\u2c79\\u4023ro;\\u6116p;\\u6007\\u0480DHadgilrs\\u2c8f\\u2c94\\u2c99\\u2c9e\\u2ca3\\u2cb0\\u2cb6\\u2cd3\\u2ce3ash;\\u62adarr;\\u6904p;\\uc000\\u224d\\u20d2ash;\\u62ac\\u0100et\\u2ca8\\u2cac;\\uc000\\u2265\\u20d2;\\uc000>\\u20d2nfin;\\u69de\\u0180Aet\\u2cbd\\u2cc1\\u2cc5rr;\\u6902;\\uc000\\u2264\\u20d2\\u0100;r\\u2cca\\u2ccd\\uc000<\\u20d2ie;\\uc000\\u22b4\\u20d2\\u0100At\\u2cd8\\u2cdcrr;\\u6903rie;\\uc000\\u22b5\\u20d2im;\\uc000\\u223c\\u20d2\\u0180Aan\\u2cf0\\u2cf4\\u2d02rr;\\u61d6r\\u0100hr\\u2cfa\\u2cfdk;\\u6923\\u0100;o\\u13e7\\u13e5ear;\\u6927\\u1253\\u1a95\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\u2d2d\\0\\u2d38\\u2d48\\u2d60\\u2d65\\u2d72\\u2d84\\u1b07\\0\\0\\u2d8d\\u2dab\\0\\u2dc8\\u2dce\\0\\u2ddc\\u2e19\\u2e2b\\u2e3e\\u2e43\\u0100cs\\u2d31\\u1a97ute\\u803b\\xf3\\u40f3\\u0100iy\\u2d3c\\u2d45r\\u0100;c\\u1a9e\\u2d42\\u803b\\xf4\\u40f4;\\u443e\\u0280abios\\u1aa0\\u2d52\\u2d57\\u01c8\\u2d5alac;\\u4151v;\\u6a38old;\\u69bclig;\\u4153\\u0100cr\\u2d69\\u2d6dir;\\u69bf;\\uc000\\ud835\\udd2c\\u036f\\u2d79\\0\\0\\u2d7c\\0\\u2d82n;\\u42dbave\\u803b\\xf2\\u40f2;\\u69c1\\u0100bm\\u2d88\\u0df4ar;\\u69b5\\u0200acit\\u2d95\\u2d98\\u2da5\\u2da8r\\xf2\\u1a80\\u0100ir\\u2d9d\\u2da0r;\\u69beoss;\\u69bbn\\xe5\\u0e52;\\u69c0\\u0180aei\\u2db1\\u2db5\\u2db9cr;\\u414dga;\\u43c9\\u0180cdn\\u2dc0\\u2dc5\\u01cdron;\\u43bf;\\u69b6pf;\\uc000\\ud835\\udd60\\u0180ael\\u2dd4\\u2dd7\\u01d2r;\\u69b7rp;\\u69b9\\u0380;adiosv\\u2dea\\u2deb\\u2dee\\u2e08\\u2e0d\\u2e10\\u2e16\\u6228r\\xf2\\u1a86\\u0200;efm\\u2df7\\u2df8\\u2e02\\u2e05\\u6a5dr\\u0100;o\\u2dfe\\u2dff\\u6134f\\xbb\\u2dff\\u803b\\xaa\\u40aa\\u803b\\xba\\u40bagof;\\u62b6r;\\u6a56lope;\\u6a57;\\u6a5b\\u0180clo\\u2e1f\\u2e21\\u2e27\\xf2\\u2e01ash\\u803b\\xf8\\u40f8l;\\u6298i\\u016c\\u2e2f\\u2e34de\\u803b\\xf5\\u40f5es\\u0100;a\\u01db\\u2e3as;\\u6a36ml\\u803b\\xf6\\u40f6bar;\\u633d\\u0ae1\\u2e5e\\0\\u2e7d\\0\\u2e80\\u2e9d\\0\\u2ea2\\u2eb9\\0\\0\\u2ecb\\u0e9c\\0\\u2f13\\0\\0\\u2f2b\\u2fbc\\0\\u2fc8r\\u0200;ast\\u0403\\u2e67\\u2e72\\u0e85\\u8100\\xb6;l\\u2e6d\\u2e6e\\u40b6le\\xec\\u0403\\u0269\\u2e78\\0\\0\\u2e7bm;\\u6af3;\\u6afdy;\\u443fr\\u0280cimpt\\u2e8b\\u2e8f\\u2e93\\u1865\\u2e97nt;\\u4025od;\\u402eil;\\u6030enk;\\u6031r;\\uc000\\ud835\\udd2d\\u0180imo\\u2ea8\\u2eb0\\u2eb4\\u0100;v\\u2ead\\u2eae\\u43c6;\\u43d5ma\\xf4\\u0a76ne;\\u660e\\u0180;tv\\u2ebf\\u2ec0\\u2ec8\\u43c0chfork\\xbb\\u1ffd;\\u43d6\\u0100au\\u2ecf\\u2edfn\\u0100ck\\u2ed5\\u2eddk\\u0100;h\\u21f4\\u2edb;\\u610e\\xf6\\u21f4s\\u0480;abcdemst\\u2ef3\\u2ef4\\u1908\\u2ef9\\u2efd\\u2f04\\u2f06\\u2f0a\\u2f0e\\u402bcir;\\u6a23ir;\\u6a22\\u0100ou\\u1d40\\u2f02;\\u6a25;\\u6a72n\\u80bb\\xb1\\u0e9dim;\\u6a26wo;\\u6a27\\u0180ipu\\u2f19\\u2f20\\u2f25ntint;\\u6a15f;\\uc000\\ud835\\udd61nd\\u803b\\xa3\\u40a3\\u0500;Eaceinosu\\u0ec8\\u2f3f\\u2f41\\u2f44\\u2f47\\u2f81\\u2f89\\u2f92\\u2f7e\\u2fb6;\\u6ab3p;\\u6ab7u\\xe5\\u0ed9\\u0100;c\\u0ece\\u2f4c\\u0300;acens\\u0ec8\\u2f59\\u2f5f\\u2f66\\u2f68\\u2f7eppro\\xf8\\u2f43urlye\\xf1\\u0ed9\\xf1\\u0ece\\u0180aes\\u2f6f\\u2f76\\u2f7approx;\\u6ab9qq;\\u6ab5im;\\u62e8i\\xed\\u0edfme\\u0100;s\\u2f88\\u0eae\\u6032\\u0180Eas\\u2f78\\u2f90\\u2f7a\\xf0\\u2f75\\u0180dfp\\u0eec\\u2f99\\u2faf\\u0180als\\u2fa0\\u2fa5\\u2faalar;\\u632eine;\\u6312urf;\\u6313\\u0100;t\\u0efb\\u2fb4\\xef\\u0efbrel;\\u62b0\\u0100ci\\u2fc0\\u2fc5r;\\uc000\\ud835\\udcc5;\\u43c8ncsp;\\u6008\\u0300fiopsu\\u2fda\\u22e2\\u2fdf\\u2fe5\\u2feb\\u2ff1r;\\uc000\\ud835\\udd2epf;\\uc000\\ud835\\udd62rime;\\u6057cr;\\uc000\\ud835\\udcc6\\u0180aeo\\u2ff8\\u3009\\u3013t\\u0100ei\\u2ffe\\u3005rnion\\xf3\\u06b0nt;\\u6a16st\\u0100;e\\u3010\\u3011\\u403f\\xf1\\u1f19\\xf4\\u0f14\\u0a80ABHabcdefhilmnoprstux\\u3040\\u3051\\u3055\\u3059\\u30e0\\u310e\\u312b\\u3147\\u3162\\u3172\\u318e\\u3206\\u3215\\u3224\\u3229\\u3258\\u326e\\u3272\\u3290\\u32b0\\u32b7\\u0180art\\u3047\\u304a\\u304cr\\xf2\\u10b3\\xf2\\u03ddail;\\u691car\\xf2\\u1c65ar;\\u6964\\u0380cdenqrt\\u3068\\u3075\\u3078\\u307f\\u308f\\u3094\\u30cc\\u0100eu\\u306d\\u3071;\\uc000\\u223d\\u0331te;\\u4155i\\xe3\\u116emptyv;\\u69b3g\\u0200;del\\u0fd1\\u3089\\u308b\\u308d;\\u6992;\\u69a5\\xe5\\u0fd1uo\\u803b\\xbb\\u40bbr\\u0580;abcfhlpstw\\u0fdc\\u30ac\\u30af\\u30b7\\u30b9\\u30bc\\u30be\\u30c0\\u30c3\\u30c7\\u30cap;\\u6975\\u0100;f\\u0fe0\\u30b4s;\\u6920;\\u6933s;\\u691e\\xeb\\u225d\\xf0\\u272el;\\u6945im;\\u6974l;\\u61a3;\\u619d\\u0100ai\\u30d1\\u30d5il;\\u691ao\\u0100;n\\u30db\\u30dc\\u6236al\\xf3\\u0f1e\\u0180abr\\u30e7\\u30ea\\u30eer\\xf2\\u17e5rk;\\u6773\\u0100ak\\u30f3\\u30fdc\\u0100ek\\u30f9\\u30fb;\\u407d;\\u405d\\u0100es\\u3102\\u3104;\\u698cl\\u0100du\\u310a\\u310c;\\u698e;\\u6990\\u0200aeuy\\u3117\\u311c\\u3127\\u3129ron;\\u4159\\u0100di\\u3121\\u3125il;\\u4157\\xec\\u0ff2\\xe2\\u30fa;\\u4440\\u0200clqs\\u3134\\u3137\\u313d\\u3144a;\\u6937dhar;\\u6969uo\\u0100;r\\u020e\\u020dh;\\u61b3\\u0180acg\\u314e\\u315f\\u0f44l\\u0200;ips\\u0f78\\u3158\\u315b\\u109cn\\xe5\\u10bbar\\xf4\\u0fa9t;\\u65ad\\u0180ilr\\u3169\\u1023\\u316esht;\\u697d;\\uc000\\ud835\\udd2f\\u0100ao\\u3177\\u3186r\\u0100du\\u317d\\u317f\\xbb\\u047b\\u0100;l\\u1091\\u3184;\\u696c\\u0100;v\\u318b\\u318c\\u43c1;\\u43f1\\u0180gns\\u3195\\u31f9\\u31fcht\\u0300ahlrst\\u31a4\\u31b0\\u31c2\\u31d8\\u31e4\\u31eerrow\\u0100;t\\u0fdc\\u31ada\\xe9\\u30c8arpoon\\u0100du\\u31bb\\u31bfow\\xee\\u317ep\\xbb\\u1092eft\\u0100ah\\u31ca\\u31d0rrow\\xf3\\u0feaarpoon\\xf3\\u0551ightarrows;\\u61c9quigarro\\xf7\\u30cbhreetimes;\\u62ccg;\\u42daingdotse\\xf1\\u1f32\\u0180ahm\\u320d\\u3210\\u3213r\\xf2\\u0feaa\\xf2\\u0551;\\u600foust\\u0100;a\\u321e\\u321f\\u63b1che\\xbb\\u321fmid;\\u6aee\\u0200abpt\\u3232\\u323d\\u3240\\u3252\\u0100nr\\u3237\\u323ag;\\u67edr;\\u61fer\\xeb\\u1003\\u0180afl\\u3247\\u324a\\u324er;\\u6986;\\uc000\\ud835\\udd63us;\\u6a2eimes;\\u6a35\\u0100ap\\u325d\\u3267r\\u0100;g\\u3263\\u3264\\u4029t;\\u6994olint;\\u6a12ar\\xf2\\u31e3\\u0200achq\\u327b\\u3280\\u10bc\\u3285quo;\\u603ar;\\uc000\\ud835\\udcc7\\u0100bu\\u30fb\\u328ao\\u0100;r\\u0214\\u0213\\u0180hir\\u3297\\u329b\\u32a0re\\xe5\\u31f8mes;\\u62cai\\u0200;efl\\u32aa\\u1059\\u1821\\u32ab\\u65b9tri;\\u69celuhar;\\u6968;\\u611e\\u0d61\\u32d5\\u32db\\u32df\\u332c\\u3338\\u3371\\0\\u337a\\u33a4\\0\\0\\u33ec\\u33f0\\0\\u3428\\u3448\\u345a\\u34ad\\u34b1\\u34ca\\u34f1\\0\\u3616\\0\\0\\u3633cute;\\u415bqu\\xef\\u27ba\\u0500;Eaceinpsy\\u11ed\\u32f3\\u32f5\\u32ff\\u3302\\u330b\\u330f\\u331f\\u3326\\u3329;\\u6ab4\\u01f0\\u32fa\\0\\u32fc;\\u6ab8on;\\u4161u\\xe5\\u11fe\\u0100;d\\u11f3\\u3307il;\\u415frc;\\u415d\\u0180Eas\\u3316\\u3318\\u331b;\\u6ab6p;\\u6abaim;\\u62e9olint;\\u6a13i\\xed\\u1204;\\u4441ot\\u0180;be\\u3334\\u1d47\\u3335\\u62c5;\\u6a66\\u0380Aacmstx\\u3346\\u334a\\u3357\\u335b\\u335e\\u3363\\u336drr;\\u61d8r\\u0100hr\\u3350\\u3352\\xeb\\u2228\\u0100;o\\u0a36\\u0a34t\\u803b\\xa7\\u40a7i;\\u403bwar;\\u6929m\\u0100in\\u3369\\xf0nu\\xf3\\xf1t;\\u6736r\\u0100;o\\u3376\\u2055\\uc000\\ud835\\udd30\\u0200acoy\\u3382\\u3386\\u3391\\u33a0rp;\\u666f\\u0100hy\\u338b\\u338fcy;\\u4449;\\u4448rt\\u026d\\u3399\\0\\0\\u339ci\\xe4\\u1464ara\\xec\\u2e6f\\u803b\\xad\\u40ad\\u0100gm\\u33a8\\u33b4ma\\u0180;fv\\u33b1\\u33b2\\u33b2\\u43c3;\\u43c2\\u0400;deglnpr\\u12ab\\u33c5\\u33c9\\u33ce\\u33d6\\u33de\\u33e1\\u33e6ot;\\u6a6a\\u0100;q\\u12b1\\u12b0\\u0100;E\\u33d3\\u33d4\\u6a9e;\\u6aa0\\u0100;E\\u33db\\u33dc\\u6a9d;\\u6a9fe;\\u6246lus;\\u6a24arr;\\u6972ar\\xf2\\u113d\\u0200aeit\\u33f8\\u3408\\u340f\\u3417\\u0100ls\\u33fd\\u3404lsetm\\xe9\\u336ahp;\\u6a33parsl;\\u69e4\\u0100dl\\u1463\\u3414e;\\u6323\\u0100;e\\u341c\\u341d\\u6aaa\\u0100;s\\u3422\\u3423\\u6aac;\\uc000\\u2aac\\ufe00\\u0180flp\\u342e\\u3433\\u3442tcy;\\u444c\\u0100;b\\u3438\\u3439\\u402f\\u0100;a\\u343e\\u343f\\u69c4r;\\u633ff;\\uc000\\ud835\\udd64a\\u0100dr\\u344d\\u0402es\\u0100;u\\u3454\\u3455\\u6660it\\xbb\\u3455\\u0180csu\\u3460\\u3479\\u349f\\u0100au\\u3465\\u346fp\\u0100;s\\u1188\\u346b;\\uc000\\u2293\\ufe00p\\u0100;s\\u11b4\\u3475;\\uc000\\u2294\\ufe00u\\u0100bp\\u347f\\u348f\\u0180;es\\u1197\\u119c\\u3486et\\u0100;e\\u1197\\u348d\\xf1\\u119d\\u0180;es\\u11a8\\u11ad\\u3496et\\u0100;e\\u11a8\\u349d\\xf1\\u11ae\\u0180;af\\u117b\\u34a6\\u05b0r\\u0165\\u34ab\\u05b1\\xbb\\u117car\\xf2\\u1148\\u0200cemt\\u34b9\\u34be\\u34c2\\u34c5r;\\uc000\\ud835\\udcc8tm\\xee\\xf1i\\xec\\u3415ar\\xe6\\u11be\\u0100ar\\u34ce\\u34d5r\\u0100;f\\u34d4\\u17bf\\u6606\\u0100an\\u34da\\u34edight\\u0100ep\\u34e3\\u34eapsilo\\xee\\u1ee0h\\xe9\\u2eafs\\xbb\\u2852\\u0280bcmnp\\u34fb\\u355e\\u1209\\u358b\\u358e\\u0480;Edemnprs\\u350e\\u350f\\u3511\\u3515\\u351e\\u3523\\u352c\\u3531\\u3536\\u6282;\\u6ac5ot;\\u6abd\\u0100;d\\u11da\\u351aot;\\u6ac3ult;\\u6ac1\\u0100Ee\\u3528\\u352a;\\u6acb;\\u628alus;\\u6abfarr;\\u6979\\u0180eiu\\u353d\\u3552\\u3555t\\u0180;en\\u350e\\u3545\\u354bq\\u0100;q\\u11da\\u350feq\\u0100;q\\u352b\\u3528m;\\u6ac7\\u0100bp\\u355a\\u355c;\\u6ad5;\\u6ad3c\\u0300;acens\\u11ed\\u356c\\u3572\\u3579\\u357b\\u3326ppro\\xf8\\u32faurlye\\xf1\\u11fe\\xf1\\u11f3\\u0180aes\\u3582\\u3588\\u331bppro\\xf8\\u331aq\\xf1\\u3317g;\\u666a\\u0680123;Edehlmnps\\u35a9\\u35ac\\u35af\\u121c\\u35b2\\u35b4\\u35c0\\u35c9\\u35d5\\u35da\\u35df\\u35e8\\u35ed\\u803b\\xb9\\u40b9\\u803b\\xb2\\u40b2\\u803b\\xb3\\u40b3;\\u6ac6\\u0100os\\u35b9\\u35bct;\\u6abeub;\\u6ad8\\u0100;d\\u1222\\u35c5ot;\\u6ac4s\\u0100ou\\u35cf\\u35d2l;\\u67c9b;\\u6ad7arr;\\u697bult;\\u6ac2\\u0100Ee\\u35e4\\u35e6;\\u6acc;\\u628blus;\\u6ac0\\u0180eiu\\u35f4\\u3609\\u360ct\\u0180;en\\u121c\\u35fc\\u3602q\\u0100;q\\u1222\\u35b2eq\\u0100;q\\u35e7\\u35e4m;\\u6ac8\\u0100bp\\u3611\\u3613;\\u6ad4;\\u6ad6\\u0180Aan\\u361c\\u3620\\u362drr;\\u61d9r\\u0100hr\\u3626\\u3628\\xeb\\u222e\\u0100;o\\u0a2b\\u0a29war;\\u692alig\\u803b\\xdf\\u40df\\u0be1\\u3651\\u365d\\u3660\\u12ce\\u3673\\u3679\\0\\u367e\\u36c2\\0\\0\\0\\0\\0\\u36db\\u3703\\0\\u3709\\u376c\\0\\0\\0\\u3787\\u0272\\u3656\\0\\0\\u365bget;\\u6316;\\u43c4r\\xeb\\u0e5f\\u0180aey\\u3666\\u366b\\u3670ron;\\u4165dil;\\u4163;\\u4442lrec;\\u6315r;\\uc000\\ud835\\udd31\\u0200eiko\\u3686\\u369d\\u36b5\\u36bc\\u01f2\\u368b\\0\\u3691e\\u01004f\\u1284\\u1281a\\u0180;sv\\u3698\\u3699\\u369b\\u43b8ym;\\u43d1\\u0100cn\\u36a2\\u36b2k\\u0100as\\u36a8\\u36aeppro\\xf8\\u12c1im\\xbb\\u12acs\\xf0\\u129e\\u0100as\\u36ba\\u36ae\\xf0\\u12c1rn\\u803b\\xfe\\u40fe\\u01ec\\u031f\\u36c6\\u22e7es\\u8180\\xd7;bd\\u36cf\\u36d0\\u36d8\\u40d7\\u0100;a\\u190f\\u36d5r;\\u6a31;\\u6a30\\u0180eps\\u36e1\\u36e3\\u3700\\xe1\\u2a4d\\u0200;bcf\\u0486\\u36ec\\u36f0\\u36f4ot;\\u6336ir;\\u6af1\\u0100;o\\u36f9\\u36fc\\uc000\\ud835\\udd65rk;\\u6ada\\xe1\\u3362rime;\\u6034\\u0180aip\\u370f\\u3712\\u3764d\\xe5\\u1248\\u0380adempst\\u3721\\u374d\\u3740\\u3751\\u3757\\u375c\\u375fngle\\u0280;dlqr\\u3730\\u3731\\u3736\\u3740\\u3742\\u65b5own\\xbb\\u1dbbeft\\u0100;e\\u2800\\u373e\\xf1\\u092e;\\u625cight\\u0100;e\\u32aa\\u374b\\xf1\\u105aot;\\u65ecinus;\\u6a3alus;\\u6a39b;\\u69cdime;\\u6a3bezium;\\u63e2\\u0180cht\\u3772\\u377d\\u3781\\u0100ry\\u3777\\u377b;\\uc000\\ud835\\udcc9;\\u4446cy;\\u445brok;\\u4167\\u0100io\\u378b\\u378ex\\xf4\\u1777head\\u0100lr\\u3797\\u37a0eftarro\\xf7\\u084fightarrow\\xbb\\u0f5d\\u0900AHabcdfghlmoprstuw\\u37d0\\u37d3\\u37d7\\u37e4\\u37f0\\u37fc\\u380e\\u381c\\u3823\\u3834\\u3851\\u385d\\u386b\\u38a9\\u38cc\\u38d2\\u38ea\\u38f6r\\xf2\\u03edar;\\u6963\\u0100cr\\u37dc\\u37e2ute\\u803b\\xfa\\u40fa\\xf2\\u1150r\\u01e3\\u37ea\\0\\u37edy;\\u445eve;\\u416d\\u0100iy\\u37f5\\u37farc\\u803b\\xfb\\u40fb;\\u4443\\u0180abh\\u3803\\u3806\\u380br\\xf2\\u13adlac;\\u4171a\\xf2\\u13c3\\u0100ir\\u3813\\u3818sht;\\u697e;\\uc000\\ud835\\udd32rave\\u803b\\xf9\\u40f9\\u0161\\u3827\\u3831r\\u0100lr\\u382c\\u382e\\xbb\\u0957\\xbb\\u1083lk;\\u6580\\u0100ct\\u3839\\u384d\\u026f\\u383f\\0\\0\\u384arn\\u0100;e\\u3845\\u3846\\u631cr\\xbb\\u3846op;\\u630fri;\\u65f8\\u0100al\\u3856\\u385acr;\\u416b\\u80bb\\xa8\\u0349\\u0100gp\\u3862\\u3866on;\\u4173f;\\uc000\\ud835\\udd66\\u0300adhlsu\\u114b\\u3878\\u387d\\u1372\\u3891\\u38a0own\\xe1\\u13b3arpoon\\u0100lr\\u3888\\u388cef\\xf4\\u382digh\\xf4\\u382fi\\u0180;hl\\u3899\\u389a\\u389c\\u43c5\\xbb\\u13faon\\xbb\\u389aparrows;\\u61c8\\u0180cit\\u38b0\\u38c4\\u38c8\\u026f\\u38b6\\0\\0\\u38c1rn\\u0100;e\\u38bc\\u38bd\\u631dr\\xbb\\u38bdop;\\u630eng;\\u416fri;\\u65f9cr;\\uc000\\ud835\\udcca\\u0180dir\\u38d9\\u38dd\\u38e2ot;\\u62f0lde;\\u4169i\\u0100;f\\u3730\\u38e8\\xbb\\u1813\\u0100am\\u38ef\\u38f2r\\xf2\\u38a8l\\u803b\\xfc\\u40fcangle;\\u69a7\\u0780ABDacdeflnoprsz\\u391c\\u391f\\u3929\\u392d\\u39b5\\u39b8\\u39bd\\u39df\\u39e4\\u39e8\\u39f3\\u39f9\\u39fd\\u3a01\\u3a20r\\xf2\\u03f7ar\\u0100;v\\u3926\\u3927\\u6ae8;\\u6ae9as\\xe8\\u03e1\\u0100nr\\u3932\\u3937grt;\\u699c\\u0380eknprst\\u34e3\\u3946\\u394b\\u3952\\u395d\\u3964\\u3996app\\xe1\\u2415othin\\xe7\\u1e96\\u0180hir\\u34eb\\u2ec8\\u3959op\\xf4\\u2fb5\\u0100;h\\u13b7\\u3962\\xef\\u318d\\u0100iu\\u3969\\u396dgm\\xe1\\u33b3\\u0100bp\\u3972\\u3984setneq\\u0100;q\\u397d\\u3980\\uc000\\u228a\\ufe00;\\uc000\\u2acb\\ufe00setneq\\u0100;q\\u398f\\u3992\\uc000\\u228b\\ufe00;\\uc000\\u2acc\\ufe00\\u0100hr\\u399b\\u399fet\\xe1\\u369ciangle\\u0100lr\\u39aa\\u39afeft\\xbb\\u0925ight\\xbb\\u1051y;\\u4432ash\\xbb\\u1036\\u0180elr\\u39c4\\u39d2\\u39d7\\u0180;be\\u2dea\\u39cb\\u39cfar;\\u62bbq;\\u625alip;\\u62ee\\u0100bt\\u39dc\\u1468a\\xf2\\u1469r;\\uc000\\ud835\\udd33tr\\xe9\\u39aesu\\u0100bp\\u39ef\\u39f1\\xbb\\u0d1c\\xbb\\u0d59pf;\\uc000\\ud835\\udd67ro\\xf0\\u0efbtr\\xe9\\u39b4\\u0100cu\\u3a06\\u3a0br;\\uc000\\ud835\\udccb\\u0100bp\\u3a10\\u3a18n\\u0100Ee\\u3980\\u3a16\\xbb\\u397en\\u0100Ee\\u3992\\u3a1e\\xbb\\u3990igzag;\\u699a\\u0380cefoprs\\u3a36\\u3a3b\\u3a56\\u3a5b\\u3a54\\u3a61\\u3a6airc;\\u4175\\u0100di\\u3a40\\u3a51\\u0100bg\\u3a45\\u3a49ar;\\u6a5fe\\u0100;q\\u15fa\\u3a4f;\\u6259erp;\\u6118r;\\uc000\\ud835\\udd34pf;\\uc000\\ud835\\udd68\\u0100;e\\u1479\\u3a66at\\xe8\\u1479cr;\\uc000\\ud835\\udccc\\u0ae3\\u178e\\u3a87\\0\\u3a8b\\0\\u3a90\\u3a9b\\0\\0\\u3a9d\\u3aa8\\u3aab\\u3aaf\\0\\0\\u3ac3\\u3ace\\0\\u3ad8\\u17dc\\u17dftr\\xe9\\u17d1r;\\uc000\\ud835\\udd35\\u0100Aa\\u3a94\\u3a97r\\xf2\\u03c3r\\xf2\\u09f6;\\u43be\\u0100Aa\\u3aa1\\u3aa4r\\xf2\\u03b8r\\xf2\\u09eba\\xf0\\u2713is;\\u62fb\\u0180dpt\\u17a4\\u3ab5\\u3abe\\u0100fl\\u3aba\\u17a9;\\uc000\\ud835\\udd69im\\xe5\\u17b2\\u0100Aa\\u3ac7\\u3acar\\xf2\\u03cer\\xf2\\u0a01\\u0100cq\\u3ad2\\u17b8r;\\uc000\\ud835\\udccd\\u0100pt\\u17d6\\u3adcr\\xe9\\u17d4\\u0400acefiosu\\u3af0\\u3afd\\u3b08\\u3b0c\\u3b11\\u3b15\\u3b1b\\u3b21c\\u0100uy\\u3af6\\u3afbte\\u803b\\xfd\\u40fd;\\u444f\\u0100iy\\u3b02\\u3b06rc;\\u4177;\\u444bn\\u803b\\xa5\\u40a5r;\\uc000\\ud835\\udd36cy;\\u4457pf;\\uc000\\ud835\\udd6acr;\\uc000\\ud835\\udcce\\u0100cm\\u3b26\\u3b29y;\\u444el\\u803b\\xff\\u40ff\\u0500acdefhiosw\\u3b42\\u3b48\\u3b54\\u3b58\\u3b64\\u3b69\\u3b6d\\u3b74\\u3b7a\\u3b80cute;\\u417a\\u0100ay\\u3b4d\\u3b52ron;\\u417e;\\u4437ot;\\u417c\\u0100et\\u3b5d\\u3b61tr\\xe6\\u155fa;\\u43b6r;\\uc000\\ud835\\udd37cy;\\u4436grarr;\\u61ddpf;\\uc000\\ud835\\udd6bcr;\\uc000\\ud835\\udccf\\u0100jn\\u3b85\\u3b87;\\u600dj;\\u600c\"\n    .split(\"\")\n    .map((c) => c.charCodeAt(0)));\n//# sourceMappingURL=decode-data-html.js.map","// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134\nvar _a;\nconst decodeMap = new Map([\n    [0, 65533],\n    // C1 Unicode control character reference replacements\n    [128, 8364],\n    [130, 8218],\n    [131, 402],\n    [132, 8222],\n    [133, 8230],\n    [134, 8224],\n    [135, 8225],\n    [136, 710],\n    [137, 8240],\n    [138, 352],\n    [139, 8249],\n    [140, 338],\n    [142, 381],\n    [145, 8216],\n    [146, 8217],\n    [147, 8220],\n    [148, 8221],\n    [149, 8226],\n    [150, 8211],\n    [151, 8212],\n    [152, 732],\n    [153, 8482],\n    [154, 353],\n    [155, 8250],\n    [156, 339],\n    [158, 382],\n    [159, 376],\n]);\n/**\n * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.\n */\nexport const fromCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins\n(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function (codePoint) {\n    let output = \"\";\n    if (codePoint > 0xffff) {\n        codePoint -= 0x10000;\n        output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);\n        codePoint = 0xdc00 | (codePoint & 0x3ff);\n    }\n    output += String.fromCharCode(codePoint);\n    return output;\n};\n/**\n * Replace the given code point with a replacement character if it is a\n * surrogate or is outside the valid range. Otherwise return the code\n * point unchanged.\n */\nexport function replaceCodePoint(codePoint) {\n    var _a;\n    if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {\n        return 0xfffd;\n    }\n    return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;\n}\n/**\n * Replace the code point if relevant, then convert it to a string.\n *\n * @deprecated Use `fromCodePoint(replaceCodePoint(codePoint))` instead.\n * @param codePoint The code point to decode.\n * @returns The decoded code point.\n */\nexport default function decodeCodePoint(codePoint) {\n    return fromCodePoint(replaceCodePoint(codePoint));\n}\n//# sourceMappingURL=decode_codepoint.js.map","// Generated using scripts/write-decode-map.ts\nexport default new Uint16Array(\n// prettier-ignore\n\"\\u0200aglq\\t\\x15\\x18\\x1b\\u026d\\x0f\\0\\0\\x12p;\\u4026os;\\u4027t;\\u403et;\\u403cuot;\\u4022\"\n    .split(\"\")\n    .map((c) => c.charCodeAt(0)));\n//# sourceMappingURL=decode-data-xml.js.map","import htmlDecodeTree from \"./generated/decode-data-html.js\";\nimport xmlDecodeTree from \"./generated/decode-data-xml.js\";\nimport decodeCodePoint, { replaceCodePoint, fromCodePoint, } from \"./decode_codepoint.js\";\n// Re-export for use by eg. htmlparser2\nexport { htmlDecodeTree, xmlDecodeTree, decodeCodePoint };\nexport { replaceCodePoint, fromCodePoint } from \"./decode_codepoint.js\";\nvar CharCodes;\n(function (CharCodes) {\n    CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n    CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n    CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n    CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n    CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n    CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n    CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n    CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n    CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n    CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n    CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n    CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n})(CharCodes || (CharCodes = {}));\n/** Bit that needs to be set to convert an upper case ASCII character to lower case */\nconst TO_LOWER_BIT = 0b100000;\nexport var BinTrieFlags;\n(function (BinTrieFlags) {\n    BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags || (BinTrieFlags = {}));\nfunction isNumber(code) {\n    return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n}\nfunction isHexadecimalCharacter(code) {\n    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F) ||\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F));\n}\nfunction isAsciiAlphaNumeric(code) {\n    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z) ||\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z) ||\n        isNumber(code));\n}\n/**\n * Checks if the given character is a valid end character for an entity in an attribute.\n *\n * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n */\nfunction isEntityInAttributeInvalidEnd(code) {\n    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n}\nvar EntityDecoderState;\n(function (EntityDecoderState) {\n    EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n    EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n    EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n})(EntityDecoderState || (EntityDecoderState = {}));\nexport var DecodingMode;\n(function (DecodingMode) {\n    /** Entities in text nodes that can end with any character. */\n    DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n    /** Only allow entities terminated with a semicolon. */\n    DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n    /** Entities in attributes have limitations on ending characters. */\n    DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n})(DecodingMode || (DecodingMode = {}));\n/**\n * Token decoder with support of writing partial entities.\n */\nexport class EntityDecoder {\n    constructor(\n    /** The tree used to decode entities. */\n    decodeTree, \n    /**\n     * The function that is called when a codepoint is decoded.\n     *\n     * For multi-byte named entities, this will be called multiple times,\n     * with the second codepoint, and the same `consumed` value.\n     *\n     * @param codepoint The decoded codepoint.\n     * @param consumed The number of bytes consumed by the decoder.\n     */\n    emitCodePoint, \n    /** An object that is used to produce errors. */\n    errors) {\n        this.decodeTree = decodeTree;\n        this.emitCodePoint = emitCodePoint;\n        this.errors = errors;\n        /** The current state of the decoder. */\n        this.state = EntityDecoderState.EntityStart;\n        /** Characters that were consumed while parsing an entity. */\n        this.consumed = 1;\n        /**\n         * The result of the entity.\n         *\n         * Either the result index of a numeric entity, or the codepoint of a\n         * numeric entity.\n         */\n        this.result = 0;\n        /** The current index in the decode tree. */\n        this.treeIndex = 0;\n        /** The number of characters that were consumed in excess. */\n        this.excess = 1;\n        /** The mode in which the decoder is operating. */\n        this.decodeMode = DecodingMode.Strict;\n    }\n    /** Resets the instance to make it reusable. */\n    startEntity(decodeMode) {\n        this.decodeMode = decodeMode;\n        this.state = EntityDecoderState.EntityStart;\n        this.result = 0;\n        this.treeIndex = 0;\n        this.excess = 1;\n        this.consumed = 1;\n    }\n    /**\n     * Write an entity to the decoder. This can be called multiple times with partial entities.\n     * If the entity is incomplete, the decoder will return -1.\n     *\n     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n     * entity is incomplete, and resume when the next string is written.\n     *\n     * @param string The string containing the entity (or a continuation of the entity).\n     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    write(str, offset) {\n        switch (this.state) {\n            case EntityDecoderState.EntityStart: {\n                if (str.charCodeAt(offset) === CharCodes.NUM) {\n                    this.state = EntityDecoderState.NumericStart;\n                    this.consumed += 1;\n                    return this.stateNumericStart(str, offset + 1);\n                }\n                this.state = EntityDecoderState.NamedEntity;\n                return this.stateNamedEntity(str, offset);\n            }\n            case EntityDecoderState.NumericStart: {\n                return this.stateNumericStart(str, offset);\n            }\n            case EntityDecoderState.NumericDecimal: {\n                return this.stateNumericDecimal(str, offset);\n            }\n            case EntityDecoderState.NumericHex: {\n                return this.stateNumericHex(str, offset);\n            }\n            case EntityDecoderState.NamedEntity: {\n                return this.stateNamedEntity(str, offset);\n            }\n        }\n    }\n    /**\n     * Switches between the numeric decimal and hexadecimal states.\n     *\n     * Equivalent to the `Numeric character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNumericStart(str, offset) {\n        if (offset >= str.length) {\n            return -1;\n        }\n        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n            this.state = EntityDecoderState.NumericHex;\n            this.consumed += 1;\n            return this.stateNumericHex(str, offset + 1);\n        }\n        this.state = EntityDecoderState.NumericDecimal;\n        return this.stateNumericDecimal(str, offset);\n    }\n    addToNumericResult(str, start, end, base) {\n        if (start !== end) {\n            const digitCount = end - start;\n            this.result =\n                this.result * Math.pow(base, digitCount) +\n                    parseInt(str.substr(start, digitCount), base);\n            this.consumed += digitCount;\n        }\n    }\n    /**\n     * Parses a hexadecimal numeric entity.\n     *\n     * Equivalent to the `Hexademical character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNumericHex(str, offset) {\n        const startIdx = offset;\n        while (offset < str.length) {\n            const char = str.charCodeAt(offset);\n            if (isNumber(char) || isHexadecimalCharacter(char)) {\n                offset += 1;\n            }\n            else {\n                this.addToNumericResult(str, startIdx, offset, 16);\n                return this.emitNumericEntity(char, 3);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 16);\n        return -1;\n    }\n    /**\n     * Parses a decimal numeric entity.\n     *\n     * Equivalent to the `Decimal character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNumericDecimal(str, offset) {\n        const startIdx = offset;\n        while (offset < str.length) {\n            const char = str.charCodeAt(offset);\n            if (isNumber(char)) {\n                offset += 1;\n            }\n            else {\n                this.addToNumericResult(str, startIdx, offset, 10);\n                return this.emitNumericEntity(char, 2);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 10);\n        return -1;\n    }\n    /**\n     * Validate and emit a numeric entity.\n     *\n     * Implements the logic from the `Hexademical character reference start\n     * state` and `Numeric character reference end state` in the HTML spec.\n     *\n     * @param lastCp The last code point of the entity. Used to see if the\n     *               entity was terminated with a semicolon.\n     * @param expectedLength The minimum number of characters that should be\n     *                       consumed. Used to validate that at least one digit\n     *                       was consumed.\n     * @returns The number of characters that were consumed.\n     */\n    emitNumericEntity(lastCp, expectedLength) {\n        var _a;\n        // Ensure we consumed at least one digit.\n        if (this.consumed <= expectedLength) {\n            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n            return 0;\n        }\n        // Figure out if this is a legit end of the entity\n        if (lastCp === CharCodes.SEMI) {\n            this.consumed += 1;\n        }\n        else if (this.decodeMode === DecodingMode.Strict) {\n            return 0;\n        }\n        this.emitCodePoint(replaceCodePoint(this.result), this.consumed);\n        if (this.errors) {\n            if (lastCp !== CharCodes.SEMI) {\n                this.errors.missingSemicolonAfterCharacterReference();\n            }\n            this.errors.validateNumericCharacterReference(this.result);\n        }\n        return this.consumed;\n    }\n    /**\n     * Parses a named entity.\n     *\n     * Equivalent to the `Named character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNamedEntity(str, offset) {\n        const { decodeTree } = this;\n        let current = decodeTree[this.treeIndex];\n        // The mask is the number of bytes of the value, including the current byte.\n        let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n        for (; offset < str.length; offset++, this.excess++) {\n            const char = str.charCodeAt(offset);\n            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n            if (this.treeIndex < 0) {\n                return this.result === 0 ||\n                    // If we are parsing an attribute\n                    (this.decodeMode === DecodingMode.Attribute &&\n                        // We shouldn't have consumed any characters after the entity,\n                        (valueLength === 0 ||\n                            // And there should be no invalid characters.\n                            isEntityInAttributeInvalidEnd(char)))\n                    ? 0\n                    : this.emitNotTerminatedNamedEntity();\n            }\n            current = decodeTree[this.treeIndex];\n            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n            // If the branch is a value, store it and continue\n            if (valueLength !== 0) {\n                // If the entity is terminated by a semicolon, we are done.\n                if (char === CharCodes.SEMI) {\n                    return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n                }\n                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n                if (this.decodeMode !== DecodingMode.Strict) {\n                    this.result = this.treeIndex;\n                    this.consumed += this.excess;\n                    this.excess = 0;\n                }\n            }\n        }\n        return -1;\n    }\n    /**\n     * Emit a named entity that was not terminated with a semicolon.\n     *\n     * @returns The number of characters consumed.\n     */\n    emitNotTerminatedNamedEntity() {\n        var _a;\n        const { result, decodeTree } = this;\n        const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n        this.emitNamedEntityData(result, valueLength, this.consumed);\n        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n        return this.consumed;\n    }\n    /**\n     * Emit a named entity.\n     *\n     * @param result The index of the entity in the decode tree.\n     * @param valueLength The number of bytes in the entity.\n     * @param consumed The number of characters consumed.\n     *\n     * @returns The number of characters consumed.\n     */\n    emitNamedEntityData(result, valueLength, consumed) {\n        const { decodeTree } = this;\n        this.emitCodePoint(valueLength === 1\n            ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH\n            : decodeTree[result + 1], consumed);\n        if (valueLength === 3) {\n            // For multi-byte values, we need to emit the second byte.\n            this.emitCodePoint(decodeTree[result + 2], consumed);\n        }\n        return consumed;\n    }\n    /**\n     * Signal to the parser that the end of the input was reached.\n     *\n     * Remaining data will be emitted and relevant errors will be produced.\n     *\n     * @returns The number of characters consumed.\n     */\n    end() {\n        var _a;\n        switch (this.state) {\n            case EntityDecoderState.NamedEntity: {\n                // Emit a named entity if we have one.\n                return this.result !== 0 &&\n                    (this.decodeMode !== DecodingMode.Attribute ||\n                        this.result === this.treeIndex)\n                    ? this.emitNotTerminatedNamedEntity()\n                    : 0;\n            }\n            // Otherwise, emit a numeric entity if we have one.\n            case EntityDecoderState.NumericDecimal: {\n                return this.emitNumericEntity(0, 2);\n            }\n            case EntityDecoderState.NumericHex: {\n                return this.emitNumericEntity(0, 3);\n            }\n            case EntityDecoderState.NumericStart: {\n                (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n                return 0;\n            }\n            case EntityDecoderState.EntityStart: {\n                // Return 0 if we have no entity.\n                return 0;\n            }\n        }\n    }\n}\n/**\n * Creates a function that decodes entities in a string.\n *\n * @param decodeTree The decode tree.\n * @returns A function that decodes entities in a string.\n */\nfunction getDecoder(decodeTree) {\n    let ret = \"\";\n    const decoder = new EntityDecoder(decodeTree, (str) => (ret += fromCodePoint(str)));\n    return function decodeWithTrie(str, decodeMode) {\n        let lastIndex = 0;\n        let offset = 0;\n        while ((offset = str.indexOf(\"&\", offset)) >= 0) {\n            ret += str.slice(lastIndex, offset);\n            decoder.startEntity(decodeMode);\n            const len = decoder.write(str, \n            // Skip the \"&\"\n            offset + 1);\n            if (len < 0) {\n                lastIndex = offset + decoder.end();\n                break;\n            }\n            lastIndex = offset + len;\n            // If `len` is 0, skip the current `&` and continue.\n            offset = len === 0 ? lastIndex + 1 : lastIndex;\n        }\n        const result = ret + str.slice(lastIndex);\n        // Make sure we don't keep a reference to the final string.\n        ret = \"\";\n        return result;\n    };\n}\n/**\n * Determines the branch of the current node that is taken given the current\n * character. This function is used to traverse the trie.\n *\n * @param decodeTree The trie.\n * @param current The current node.\n * @param nodeIdx The index right after the current node and its value.\n * @param char The current character.\n * @returns The index of the next node, or -1 if no branch is taken.\n */\nexport function determineBranch(decodeTree, current, nodeIdx, char) {\n    const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n    const jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n    // Case 1: Single branch encoded in jump offset\n    if (branchCount === 0) {\n        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n    }\n    // Case 2: Multiple branches encoded in jump table\n    if (jumpOffset) {\n        const value = char - jumpOffset;\n        return value < 0 || value >= branchCount\n            ? -1\n            : decodeTree[nodeIdx + value] - 1;\n    }\n    // Case 3: Multiple branches encoded in dictionary\n    // Binary search for the character.\n    let lo = nodeIdx;\n    let hi = lo + branchCount - 1;\n    while (lo <= hi) {\n        const mid = (lo + hi) >>> 1;\n        const midVal = decodeTree[mid];\n        if (midVal < char) {\n            lo = mid + 1;\n        }\n        else if (midVal > char) {\n            hi = mid - 1;\n        }\n        else {\n            return decodeTree[mid + branchCount];\n        }\n    }\n    return -1;\n}\nconst htmlDecoder = getDecoder(htmlDecodeTree);\nconst xmlDecoder = getDecoder(xmlDecodeTree);\n/**\n * Decodes an HTML string.\n *\n * @param str The string to decode.\n * @param mode The decoding mode.\n * @returns The decoded string.\n */\nexport function decodeHTML(str, mode = DecodingMode.Legacy) {\n    return htmlDecoder(str, mode);\n}\n/**\n * Decodes an HTML string in an attribute.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeHTMLAttribute(str) {\n    return htmlDecoder(str, DecodingMode.Attribute);\n}\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeHTMLStrict(str) {\n    return htmlDecoder(str, DecodingMode.Strict);\n}\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nexport function decodeXML(str) {\n    return xmlDecoder(str, DecodingMode.Strict);\n}\n//# sourceMappingURL=decode.js.map","/** All valid namespaces in HTML. */\nexport var NS;\n(function (NS) {\n    NS[\"HTML\"] = \"http://www.w3.org/1999/xhtml\";\n    NS[\"MATHML\"] = \"http://www.w3.org/1998/Math/MathML\";\n    NS[\"SVG\"] = \"http://www.w3.org/2000/svg\";\n    NS[\"XLINK\"] = \"http://www.w3.org/1999/xlink\";\n    NS[\"XML\"] = \"http://www.w3.org/XML/1998/namespace\";\n    NS[\"XMLNS\"] = \"http://www.w3.org/2000/xmlns/\";\n})(NS = NS || (NS = {}));\nexport var ATTRS;\n(function (ATTRS) {\n    ATTRS[\"TYPE\"] = \"type\";\n    ATTRS[\"ACTION\"] = \"action\";\n    ATTRS[\"ENCODING\"] = \"encoding\";\n    ATTRS[\"PROMPT\"] = \"prompt\";\n    ATTRS[\"NAME\"] = \"name\";\n    ATTRS[\"COLOR\"] = \"color\";\n    ATTRS[\"FACE\"] = \"face\";\n    ATTRS[\"SIZE\"] = \"size\";\n})(ATTRS = ATTRS || (ATTRS = {}));\n/**\n * The mode of the document.\n *\n * @see {@link https://dom.spec.whatwg.org/#concept-document-limited-quirks}\n */\nexport var DOCUMENT_MODE;\n(function (DOCUMENT_MODE) {\n    DOCUMENT_MODE[\"NO_QUIRKS\"] = \"no-quirks\";\n    DOCUMENT_MODE[\"QUIRKS\"] = \"quirks\";\n    DOCUMENT_MODE[\"LIMITED_QUIRKS\"] = \"limited-quirks\";\n})(DOCUMENT_MODE = DOCUMENT_MODE || (DOCUMENT_MODE = {}));\nexport var TAG_NAMES;\n(function (TAG_NAMES) {\n    TAG_NAMES[\"A\"] = \"a\";\n    TAG_NAMES[\"ADDRESS\"] = \"address\";\n    TAG_NAMES[\"ANNOTATION_XML\"] = \"annotation-xml\";\n    TAG_NAMES[\"APPLET\"] = \"applet\";\n    TAG_NAMES[\"AREA\"] = \"area\";\n    TAG_NAMES[\"ARTICLE\"] = \"article\";\n    TAG_NAMES[\"ASIDE\"] = \"aside\";\n    TAG_NAMES[\"B\"] = \"b\";\n    TAG_NAMES[\"BASE\"] = \"base\";\n    TAG_NAMES[\"BASEFONT\"] = \"basefont\";\n    TAG_NAMES[\"BGSOUND\"] = \"bgsound\";\n    TAG_NAMES[\"BIG\"] = \"big\";\n    TAG_NAMES[\"BLOCKQUOTE\"] = \"blockquote\";\n    TAG_NAMES[\"BODY\"] = \"body\";\n    TAG_NAMES[\"BR\"] = \"br\";\n    TAG_NAMES[\"BUTTON\"] = \"button\";\n    TAG_NAMES[\"CAPTION\"] = \"caption\";\n    TAG_NAMES[\"CENTER\"] = \"center\";\n    TAG_NAMES[\"CODE\"] = \"code\";\n    TAG_NAMES[\"COL\"] = \"col\";\n    TAG_NAMES[\"COLGROUP\"] = \"colgroup\";\n    TAG_NAMES[\"DD\"] = \"dd\";\n    TAG_NAMES[\"DESC\"] = \"desc\";\n    TAG_NAMES[\"DETAILS\"] = \"details\";\n    TAG_NAMES[\"DIALOG\"] = \"dialog\";\n    TAG_NAMES[\"DIR\"] = \"dir\";\n    TAG_NAMES[\"DIV\"] = \"div\";\n    TAG_NAMES[\"DL\"] = \"dl\";\n    TAG_NAMES[\"DT\"] = \"dt\";\n    TAG_NAMES[\"EM\"] = \"em\";\n    TAG_NAMES[\"EMBED\"] = \"embed\";\n    TAG_NAMES[\"FIELDSET\"] = \"fieldset\";\n    TAG_NAMES[\"FIGCAPTION\"] = \"figcaption\";\n    TAG_NAMES[\"FIGURE\"] = \"figure\";\n    TAG_NAMES[\"FONT\"] = \"font\";\n    TAG_NAMES[\"FOOTER\"] = \"footer\";\n    TAG_NAMES[\"FOREIGN_OBJECT\"] = \"foreignObject\";\n    TAG_NAMES[\"FORM\"] = \"form\";\n    TAG_NAMES[\"FRAME\"] = \"frame\";\n    TAG_NAMES[\"FRAMESET\"] = \"frameset\";\n    TAG_NAMES[\"H1\"] = \"h1\";\n    TAG_NAMES[\"H2\"] = \"h2\";\n    TAG_NAMES[\"H3\"] = \"h3\";\n    TAG_NAMES[\"H4\"] = \"h4\";\n    TAG_NAMES[\"H5\"] = \"h5\";\n    TAG_NAMES[\"H6\"] = \"h6\";\n    TAG_NAMES[\"HEAD\"] = \"head\";\n    TAG_NAMES[\"HEADER\"] = \"header\";\n    TAG_NAMES[\"HGROUP\"] = \"hgroup\";\n    TAG_NAMES[\"HR\"] = \"hr\";\n    TAG_NAMES[\"HTML\"] = \"html\";\n    TAG_NAMES[\"I\"] = \"i\";\n    TAG_NAMES[\"IMG\"] = \"img\";\n    TAG_NAMES[\"IMAGE\"] = \"image\";\n    TAG_NAMES[\"INPUT\"] = \"input\";\n    TAG_NAMES[\"IFRAME\"] = \"iframe\";\n    TAG_NAMES[\"KEYGEN\"] = \"keygen\";\n    TAG_NAMES[\"LABEL\"] = \"label\";\n    TAG_NAMES[\"LI\"] = \"li\";\n    TAG_NAMES[\"LINK\"] = \"link\";\n    TAG_NAMES[\"LISTING\"] = \"listing\";\n    TAG_NAMES[\"MAIN\"] = \"main\";\n    TAG_NAMES[\"MALIGNMARK\"] = \"malignmark\";\n    TAG_NAMES[\"MARQUEE\"] = \"marquee\";\n    TAG_NAMES[\"MATH\"] = \"math\";\n    TAG_NAMES[\"MENU\"] = \"menu\";\n    TAG_NAMES[\"META\"] = \"meta\";\n    TAG_NAMES[\"MGLYPH\"] = \"mglyph\";\n    TAG_NAMES[\"MI\"] = \"mi\";\n    TAG_NAMES[\"MO\"] = \"mo\";\n    TAG_NAMES[\"MN\"] = \"mn\";\n    TAG_NAMES[\"MS\"] = \"ms\";\n    TAG_NAMES[\"MTEXT\"] = \"mtext\";\n    TAG_NAMES[\"NAV\"] = \"nav\";\n    TAG_NAMES[\"NOBR\"] = \"nobr\";\n    TAG_NAMES[\"NOFRAMES\"] = \"noframes\";\n    TAG_NAMES[\"NOEMBED\"] = \"noembed\";\n    TAG_NAMES[\"NOSCRIPT\"] = \"noscript\";\n    TAG_NAMES[\"OBJECT\"] = \"object\";\n    TAG_NAMES[\"OL\"] = \"ol\";\n    TAG_NAMES[\"OPTGROUP\"] = \"optgroup\";\n    TAG_NAMES[\"OPTION\"] = \"option\";\n    TAG_NAMES[\"P\"] = \"p\";\n    TAG_NAMES[\"PARAM\"] = \"param\";\n    TAG_NAMES[\"PLAINTEXT\"] = \"plaintext\";\n    TAG_NAMES[\"PRE\"] = \"pre\";\n    TAG_NAMES[\"RB\"] = \"rb\";\n    TAG_NAMES[\"RP\"] = \"rp\";\n    TAG_NAMES[\"RT\"] = \"rt\";\n    TAG_NAMES[\"RTC\"] = \"rtc\";\n    TAG_NAMES[\"RUBY\"] = \"ruby\";\n    TAG_NAMES[\"S\"] = \"s\";\n    TAG_NAMES[\"SCRIPT\"] = \"script\";\n    TAG_NAMES[\"SECTION\"] = \"section\";\n    TAG_NAMES[\"SELECT\"] = \"select\";\n    TAG_NAMES[\"SOURCE\"] = \"source\";\n    TAG_NAMES[\"SMALL\"] = \"small\";\n    TAG_NAMES[\"SPAN\"] = \"span\";\n    TAG_NAMES[\"STRIKE\"] = \"strike\";\n    TAG_NAMES[\"STRONG\"] = \"strong\";\n    TAG_NAMES[\"STYLE\"] = \"style\";\n    TAG_NAMES[\"SUB\"] = \"sub\";\n    TAG_NAMES[\"SUMMARY\"] = \"summary\";\n    TAG_NAMES[\"SUP\"] = \"sup\";\n    TAG_NAMES[\"TABLE\"] = \"table\";\n    TAG_NAMES[\"TBODY\"] = \"tbody\";\n    TAG_NAMES[\"TEMPLATE\"] = \"template\";\n    TAG_NAMES[\"TEXTAREA\"] = \"textarea\";\n    TAG_NAMES[\"TFOOT\"] = \"tfoot\";\n    TAG_NAMES[\"TD\"] = \"td\";\n    TAG_NAMES[\"TH\"] = \"th\";\n    TAG_NAMES[\"THEAD\"] = \"thead\";\n    TAG_NAMES[\"TITLE\"] = \"title\";\n    TAG_NAMES[\"TR\"] = \"tr\";\n    TAG_NAMES[\"TRACK\"] = \"track\";\n    TAG_NAMES[\"TT\"] = \"tt\";\n    TAG_NAMES[\"U\"] = \"u\";\n    TAG_NAMES[\"UL\"] = \"ul\";\n    TAG_NAMES[\"SVG\"] = \"svg\";\n    TAG_NAMES[\"VAR\"] = \"var\";\n    TAG_NAMES[\"WBR\"] = \"wbr\";\n    TAG_NAMES[\"XMP\"] = \"xmp\";\n})(TAG_NAMES = TAG_NAMES || (TAG_NAMES = {}));\n/**\n * Tag IDs are numeric IDs for known tag names.\n *\n * We use tag IDs to improve the performance of tag name comparisons.\n */\nexport var TAG_ID;\n(function (TAG_ID) {\n    TAG_ID[TAG_ID[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    TAG_ID[TAG_ID[\"A\"] = 1] = \"A\";\n    TAG_ID[TAG_ID[\"ADDRESS\"] = 2] = \"ADDRESS\";\n    TAG_ID[TAG_ID[\"ANNOTATION_XML\"] = 3] = \"ANNOTATION_XML\";\n    TAG_ID[TAG_ID[\"APPLET\"] = 4] = \"APPLET\";\n    TAG_ID[TAG_ID[\"AREA\"] = 5] = \"AREA\";\n    TAG_ID[TAG_ID[\"ARTICLE\"] = 6] = \"ARTICLE\";\n    TAG_ID[TAG_ID[\"ASIDE\"] = 7] = \"ASIDE\";\n    TAG_ID[TAG_ID[\"B\"] = 8] = \"B\";\n    TAG_ID[TAG_ID[\"BASE\"] = 9] = \"BASE\";\n    TAG_ID[TAG_ID[\"BASEFONT\"] = 10] = \"BASEFONT\";\n    TAG_ID[TAG_ID[\"BGSOUND\"] = 11] = \"BGSOUND\";\n    TAG_ID[TAG_ID[\"BIG\"] = 12] = \"BIG\";\n    TAG_ID[TAG_ID[\"BLOCKQUOTE\"] = 13] = \"BLOCKQUOTE\";\n    TAG_ID[TAG_ID[\"BODY\"] = 14] = \"BODY\";\n    TAG_ID[TAG_ID[\"BR\"] = 15] = \"BR\";\n    TAG_ID[TAG_ID[\"BUTTON\"] = 16] = \"BUTTON\";\n    TAG_ID[TAG_ID[\"CAPTION\"] = 17] = \"CAPTION\";\n    TAG_ID[TAG_ID[\"CENTER\"] = 18] = \"CENTER\";\n    TAG_ID[TAG_ID[\"CODE\"] = 19] = \"CODE\";\n    TAG_ID[TAG_ID[\"COL\"] = 20] = \"COL\";\n    TAG_ID[TAG_ID[\"COLGROUP\"] = 21] = \"COLGROUP\";\n    TAG_ID[TAG_ID[\"DD\"] = 22] = \"DD\";\n    TAG_ID[TAG_ID[\"DESC\"] = 23] = \"DESC\";\n    TAG_ID[TAG_ID[\"DETAILS\"] = 24] = \"DETAILS\";\n    TAG_ID[TAG_ID[\"DIALOG\"] = 25] = \"DIALOG\";\n    TAG_ID[TAG_ID[\"DIR\"] = 26] = \"DIR\";\n    TAG_ID[TAG_ID[\"DIV\"] = 27] = \"DIV\";\n    TAG_ID[TAG_ID[\"DL\"] = 28] = \"DL\";\n    TAG_ID[TAG_ID[\"DT\"] = 29] = \"DT\";\n    TAG_ID[TAG_ID[\"EM\"] = 30] = \"EM\";\n    TAG_ID[TAG_ID[\"EMBED\"] = 31] = \"EMBED\";\n    TAG_ID[TAG_ID[\"FIELDSET\"] = 32] = \"FIELDSET\";\n    TAG_ID[TAG_ID[\"FIGCAPTION\"] = 33] = \"FIGCAPTION\";\n    TAG_ID[TAG_ID[\"FIGURE\"] = 34] = \"FIGURE\";\n    TAG_ID[TAG_ID[\"FONT\"] = 35] = \"FONT\";\n    TAG_ID[TAG_ID[\"FOOTER\"] = 36] = \"FOOTER\";\n    TAG_ID[TAG_ID[\"FOREIGN_OBJECT\"] = 37] = \"FOREIGN_OBJECT\";\n    TAG_ID[TAG_ID[\"FORM\"] = 38] = \"FORM\";\n    TAG_ID[TAG_ID[\"FRAME\"] = 39] = \"FRAME\";\n    TAG_ID[TAG_ID[\"FRAMESET\"] = 40] = \"FRAMESET\";\n    TAG_ID[TAG_ID[\"H1\"] = 41] = \"H1\";\n    TAG_ID[TAG_ID[\"H2\"] = 42] = \"H2\";\n    TAG_ID[TAG_ID[\"H3\"] = 43] = \"H3\";\n    TAG_ID[TAG_ID[\"H4\"] = 44] = \"H4\";\n    TAG_ID[TAG_ID[\"H5\"] = 45] = \"H5\";\n    TAG_ID[TAG_ID[\"H6\"] = 46] = \"H6\";\n    TAG_ID[TAG_ID[\"HEAD\"] = 47] = \"HEAD\";\n    TAG_ID[TAG_ID[\"HEADER\"] = 48] = \"HEADER\";\n    TAG_ID[TAG_ID[\"HGROUP\"] = 49] = \"HGROUP\";\n    TAG_ID[TAG_ID[\"HR\"] = 50] = \"HR\";\n    TAG_ID[TAG_ID[\"HTML\"] = 51] = \"HTML\";\n    TAG_ID[TAG_ID[\"I\"] = 52] = \"I\";\n    TAG_ID[TAG_ID[\"IMG\"] = 53] = \"IMG\";\n    TAG_ID[TAG_ID[\"IMAGE\"] = 54] = \"IMAGE\";\n    TAG_ID[TAG_ID[\"INPUT\"] = 55] = \"INPUT\";\n    TAG_ID[TAG_ID[\"IFRAME\"] = 56] = \"IFRAME\";\n    TAG_ID[TAG_ID[\"KEYGEN\"] = 57] = \"KEYGEN\";\n    TAG_ID[TAG_ID[\"LABEL\"] = 58] = \"LABEL\";\n    TAG_ID[TAG_ID[\"LI\"] = 59] = \"LI\";\n    TAG_ID[TAG_ID[\"LINK\"] = 60] = \"LINK\";\n    TAG_ID[TAG_ID[\"LISTING\"] = 61] = \"LISTING\";\n    TAG_ID[TAG_ID[\"MAIN\"] = 62] = \"MAIN\";\n    TAG_ID[TAG_ID[\"MALIGNMARK\"] = 63] = \"MALIGNMARK\";\n    TAG_ID[TAG_ID[\"MARQUEE\"] = 64] = \"MARQUEE\";\n    TAG_ID[TAG_ID[\"MATH\"] = 65] = \"MATH\";\n    TAG_ID[TAG_ID[\"MENU\"] = 66] = \"MENU\";\n    TAG_ID[TAG_ID[\"META\"] = 67] = \"META\";\n    TAG_ID[TAG_ID[\"MGLYPH\"] = 68] = \"MGLYPH\";\n    TAG_ID[TAG_ID[\"MI\"] = 69] = \"MI\";\n    TAG_ID[TAG_ID[\"MO\"] = 70] = \"MO\";\n    TAG_ID[TAG_ID[\"MN\"] = 71] = \"MN\";\n    TAG_ID[TAG_ID[\"MS\"] = 72] = \"MS\";\n    TAG_ID[TAG_ID[\"MTEXT\"] = 73] = \"MTEXT\";\n    TAG_ID[TAG_ID[\"NAV\"] = 74] = \"NAV\";\n    TAG_ID[TAG_ID[\"NOBR\"] = 75] = \"NOBR\";\n    TAG_ID[TAG_ID[\"NOFRAMES\"] = 76] = \"NOFRAMES\";\n    TAG_ID[TAG_ID[\"NOEMBED\"] = 77] = \"NOEMBED\";\n    TAG_ID[TAG_ID[\"NOSCRIPT\"] = 78] = \"NOSCRIPT\";\n    TAG_ID[TAG_ID[\"OBJECT\"] = 79] = \"OBJECT\";\n    TAG_ID[TAG_ID[\"OL\"] = 80] = \"OL\";\n    TAG_ID[TAG_ID[\"OPTGROUP\"] = 81] = \"OPTGROUP\";\n    TAG_ID[TAG_ID[\"OPTION\"] = 82] = \"OPTION\";\n    TAG_ID[TAG_ID[\"P\"] = 83] = \"P\";\n    TAG_ID[TAG_ID[\"PARAM\"] = 84] = \"PARAM\";\n    TAG_ID[TAG_ID[\"PLAINTEXT\"] = 85] = \"PLAINTEXT\";\n    TAG_ID[TAG_ID[\"PRE\"] = 86] = \"PRE\";\n    TAG_ID[TAG_ID[\"RB\"] = 87] = \"RB\";\n    TAG_ID[TAG_ID[\"RP\"] = 88] = \"RP\";\n    TAG_ID[TAG_ID[\"RT\"] = 89] = \"RT\";\n    TAG_ID[TAG_ID[\"RTC\"] = 90] = \"RTC\";\n    TAG_ID[TAG_ID[\"RUBY\"] = 91] = \"RUBY\";\n    TAG_ID[TAG_ID[\"S\"] = 92] = \"S\";\n    TAG_ID[TAG_ID[\"SCRIPT\"] = 93] = \"SCRIPT\";\n    TAG_ID[TAG_ID[\"SECTION\"] = 94] = \"SECTION\";\n    TAG_ID[TAG_ID[\"SELECT\"] = 95] = \"SELECT\";\n    TAG_ID[TAG_ID[\"SOURCE\"] = 96] = \"SOURCE\";\n    TAG_ID[TAG_ID[\"SMALL\"] = 97] = \"SMALL\";\n    TAG_ID[TAG_ID[\"SPAN\"] = 98] = \"SPAN\";\n    TAG_ID[TAG_ID[\"STRIKE\"] = 99] = \"STRIKE\";\n    TAG_ID[TAG_ID[\"STRONG\"] = 100] = \"STRONG\";\n    TAG_ID[TAG_ID[\"STYLE\"] = 101] = \"STYLE\";\n    TAG_ID[TAG_ID[\"SUB\"] = 102] = \"SUB\";\n    TAG_ID[TAG_ID[\"SUMMARY\"] = 103] = \"SUMMARY\";\n    TAG_ID[TAG_ID[\"SUP\"] = 104] = \"SUP\";\n    TAG_ID[TAG_ID[\"TABLE\"] = 105] = \"TABLE\";\n    TAG_ID[TAG_ID[\"TBODY\"] = 106] = \"TBODY\";\n    TAG_ID[TAG_ID[\"TEMPLATE\"] = 107] = \"TEMPLATE\";\n    TAG_ID[TAG_ID[\"TEXTAREA\"] = 108] = \"TEXTAREA\";\n    TAG_ID[TAG_ID[\"TFOOT\"] = 109] = \"TFOOT\";\n    TAG_ID[TAG_ID[\"TD\"] = 110] = \"TD\";\n    TAG_ID[TAG_ID[\"TH\"] = 111] = \"TH\";\n    TAG_ID[TAG_ID[\"THEAD\"] = 112] = \"THEAD\";\n    TAG_ID[TAG_ID[\"TITLE\"] = 113] = \"TITLE\";\n    TAG_ID[TAG_ID[\"TR\"] = 114] = \"TR\";\n    TAG_ID[TAG_ID[\"TRACK\"] = 115] = \"TRACK\";\n    TAG_ID[TAG_ID[\"TT\"] = 116] = \"TT\";\n    TAG_ID[TAG_ID[\"U\"] = 117] = \"U\";\n    TAG_ID[TAG_ID[\"UL\"] = 118] = \"UL\";\n    TAG_ID[TAG_ID[\"SVG\"] = 119] = \"SVG\";\n    TAG_ID[TAG_ID[\"VAR\"] = 120] = \"VAR\";\n    TAG_ID[TAG_ID[\"WBR\"] = 121] = \"WBR\";\n    TAG_ID[TAG_ID[\"XMP\"] = 122] = \"XMP\";\n})(TAG_ID = TAG_ID || (TAG_ID = {}));\nconst TAG_NAME_TO_ID = new Map([\n    [TAG_NAMES.A, TAG_ID.A],\n    [TAG_NAMES.ADDRESS, TAG_ID.ADDRESS],\n    [TAG_NAMES.ANNOTATION_XML, TAG_ID.ANNOTATION_XML],\n    [TAG_NAMES.APPLET, TAG_ID.APPLET],\n    [TAG_NAMES.AREA, TAG_ID.AREA],\n    [TAG_NAMES.ARTICLE, TAG_ID.ARTICLE],\n    [TAG_NAMES.ASIDE, TAG_ID.ASIDE],\n    [TAG_NAMES.B, TAG_ID.B],\n    [TAG_NAMES.BASE, TAG_ID.BASE],\n    [TAG_NAMES.BASEFONT, TAG_ID.BASEFONT],\n    [TAG_NAMES.BGSOUND, TAG_ID.BGSOUND],\n    [TAG_NAMES.BIG, TAG_ID.BIG],\n    [TAG_NAMES.BLOCKQUOTE, TAG_ID.BLOCKQUOTE],\n    [TAG_NAMES.BODY, TAG_ID.BODY],\n    [TAG_NAMES.BR, TAG_ID.BR],\n    [TAG_NAMES.BUTTON, TAG_ID.BUTTON],\n    [TAG_NAMES.CAPTION, TAG_ID.CAPTION],\n    [TAG_NAMES.CENTER, TAG_ID.CENTER],\n    [TAG_NAMES.CODE, TAG_ID.CODE],\n    [TAG_NAMES.COL, TAG_ID.COL],\n    [TAG_NAMES.COLGROUP, TAG_ID.COLGROUP],\n    [TAG_NAMES.DD, TAG_ID.DD],\n    [TAG_NAMES.DESC, TAG_ID.DESC],\n    [TAG_NAMES.DETAILS, TAG_ID.DETAILS],\n    [TAG_NAMES.DIALOG, TAG_ID.DIALOG],\n    [TAG_NAMES.DIR, TAG_ID.DIR],\n    [TAG_NAMES.DIV, TAG_ID.DIV],\n    [TAG_NAMES.DL, TAG_ID.DL],\n    [TAG_NAMES.DT, TAG_ID.DT],\n    [TAG_NAMES.EM, TAG_ID.EM],\n    [TAG_NAMES.EMBED, TAG_ID.EMBED],\n    [TAG_NAMES.FIELDSET, TAG_ID.FIELDSET],\n    [TAG_NAMES.FIGCAPTION, TAG_ID.FIGCAPTION],\n    [TAG_NAMES.FIGURE, TAG_ID.FIGURE],\n    [TAG_NAMES.FONT, TAG_ID.FONT],\n    [TAG_NAMES.FOOTER, TAG_ID.FOOTER],\n    [TAG_NAMES.FOREIGN_OBJECT, TAG_ID.FOREIGN_OBJECT],\n    [TAG_NAMES.FORM, TAG_ID.FORM],\n    [TAG_NAMES.FRAME, TAG_ID.FRAME],\n    [TAG_NAMES.FRAMESET, TAG_ID.FRAMESET],\n    [TAG_NAMES.H1, TAG_ID.H1],\n    [TAG_NAMES.H2, TAG_ID.H2],\n    [TAG_NAMES.H3, TAG_ID.H3],\n    [TAG_NAMES.H4, TAG_ID.H4],\n    [TAG_NAMES.H5, TAG_ID.H5],\n    [TAG_NAMES.H6, TAG_ID.H6],\n    [TAG_NAMES.HEAD, TAG_ID.HEAD],\n    [TAG_NAMES.HEADER, TAG_ID.HEADER],\n    [TAG_NAMES.HGROUP, TAG_ID.HGROUP],\n    [TAG_NAMES.HR, TAG_ID.HR],\n    [TAG_NAMES.HTML, TAG_ID.HTML],\n    [TAG_NAMES.I, TAG_ID.I],\n    [TAG_NAMES.IMG, TAG_ID.IMG],\n    [TAG_NAMES.IMAGE, TAG_ID.IMAGE],\n    [TAG_NAMES.INPUT, TAG_ID.INPUT],\n    [TAG_NAMES.IFRAME, TAG_ID.IFRAME],\n    [TAG_NAMES.KEYGEN, TAG_ID.KEYGEN],\n    [TAG_NAMES.LABEL, TAG_ID.LABEL],\n    [TAG_NAMES.LI, TAG_ID.LI],\n    [TAG_NAMES.LINK, TAG_ID.LINK],\n    [TAG_NAMES.LISTING, TAG_ID.LISTING],\n    [TAG_NAMES.MAIN, TAG_ID.MAIN],\n    [TAG_NAMES.MALIGNMARK, TAG_ID.MALIGNMARK],\n    [TAG_NAMES.MARQUEE, TAG_ID.MARQUEE],\n    [TAG_NAMES.MATH, TAG_ID.MATH],\n    [TAG_NAMES.MENU, TAG_ID.MENU],\n    [TAG_NAMES.META, TAG_ID.META],\n    [TAG_NAMES.MGLYPH, TAG_ID.MGLYPH],\n    [TAG_NAMES.MI, TAG_ID.MI],\n    [TAG_NAMES.MO, TAG_ID.MO],\n    [TAG_NAMES.MN, TAG_ID.MN],\n    [TAG_NAMES.MS, TAG_ID.MS],\n    [TAG_NAMES.MTEXT, TAG_ID.MTEXT],\n    [TAG_NAMES.NAV, TAG_ID.NAV],\n    [TAG_NAMES.NOBR, TAG_ID.NOBR],\n    [TAG_NAMES.NOFRAMES, TAG_ID.NOFRAMES],\n    [TAG_NAMES.NOEMBED, TAG_ID.NOEMBED],\n    [TAG_NAMES.NOSCRIPT, TAG_ID.NOSCRIPT],\n    [TAG_NAMES.OBJECT, TAG_ID.OBJECT],\n    [TAG_NAMES.OL, TAG_ID.OL],\n    [TAG_NAMES.OPTGROUP, TAG_ID.OPTGROUP],\n    [TAG_NAMES.OPTION, TAG_ID.OPTION],\n    [TAG_NAMES.P, TAG_ID.P],\n    [TAG_NAMES.PARAM, TAG_ID.PARAM],\n    [TAG_NAMES.PLAINTEXT, TAG_ID.PLAINTEXT],\n    [TAG_NAMES.PRE, TAG_ID.PRE],\n    [TAG_NAMES.RB, TAG_ID.RB],\n    [TAG_NAMES.RP, TAG_ID.RP],\n    [TAG_NAMES.RT, TAG_ID.RT],\n    [TAG_NAMES.RTC, TAG_ID.RTC],\n    [TAG_NAMES.RUBY, TAG_ID.RUBY],\n    [TAG_NAMES.S, TAG_ID.S],\n    [TAG_NAMES.SCRIPT, TAG_ID.SCRIPT],\n    [TAG_NAMES.SECTION, TAG_ID.SECTION],\n    [TAG_NAMES.SELECT, TAG_ID.SELECT],\n    [TAG_NAMES.SOURCE, TAG_ID.SOURCE],\n    [TAG_NAMES.SMALL, TAG_ID.SMALL],\n    [TAG_NAMES.SPAN, TAG_ID.SPAN],\n    [TAG_NAMES.STRIKE, TAG_ID.STRIKE],\n    [TAG_NAMES.STRONG, TAG_ID.STRONG],\n    [TAG_NAMES.STYLE, TAG_ID.STYLE],\n    [TAG_NAMES.SUB, TAG_ID.SUB],\n    [TAG_NAMES.SUMMARY, TAG_ID.SUMMARY],\n    [TAG_NAMES.SUP, TAG_ID.SUP],\n    [TAG_NAMES.TABLE, TAG_ID.TABLE],\n    [TAG_NAMES.TBODY, TAG_ID.TBODY],\n    [TAG_NAMES.TEMPLATE, TAG_ID.TEMPLATE],\n    [TAG_NAMES.TEXTAREA, TAG_ID.TEXTAREA],\n    [TAG_NAMES.TFOOT, TAG_ID.TFOOT],\n    [TAG_NAMES.TD, TAG_ID.TD],\n    [TAG_NAMES.TH, TAG_ID.TH],\n    [TAG_NAMES.THEAD, TAG_ID.THEAD],\n    [TAG_NAMES.TITLE, TAG_ID.TITLE],\n    [TAG_NAMES.TR, TAG_ID.TR],\n    [TAG_NAMES.TRACK, TAG_ID.TRACK],\n    [TAG_NAMES.TT, TAG_ID.TT],\n    [TAG_NAMES.U, TAG_ID.U],\n    [TAG_NAMES.UL, TAG_ID.UL],\n    [TAG_NAMES.SVG, TAG_ID.SVG],\n    [TAG_NAMES.VAR, TAG_ID.VAR],\n    [TAG_NAMES.WBR, TAG_ID.WBR],\n    [TAG_NAMES.XMP, TAG_ID.XMP],\n]);\nexport function getTagID(tagName) {\n    var _a;\n    return (_a = TAG_NAME_TO_ID.get(tagName)) !== null && _a !== void 0 ? _a : TAG_ID.UNKNOWN;\n}\nconst $ = TAG_ID;\nexport const SPECIAL_ELEMENTS = {\n    [NS.HTML]: new Set([\n        $.ADDRESS,\n        $.APPLET,\n        $.AREA,\n        $.ARTICLE,\n        $.ASIDE,\n        $.BASE,\n        $.BASEFONT,\n        $.BGSOUND,\n        $.BLOCKQUOTE,\n        $.BODY,\n        $.BR,\n        $.BUTTON,\n        $.CAPTION,\n        $.CENTER,\n        $.COL,\n        $.COLGROUP,\n        $.DD,\n        $.DETAILS,\n        $.DIR,\n        $.DIV,\n        $.DL,\n        $.DT,\n        $.EMBED,\n        $.FIELDSET,\n        $.FIGCAPTION,\n        $.FIGURE,\n        $.FOOTER,\n        $.FORM,\n        $.FRAME,\n        $.FRAMESET,\n        $.H1,\n        $.H2,\n        $.H3,\n        $.H4,\n        $.H5,\n        $.H6,\n        $.HEAD,\n        $.HEADER,\n        $.HGROUP,\n        $.HR,\n        $.HTML,\n        $.IFRAME,\n        $.IMG,\n        $.INPUT,\n        $.LI,\n        $.LINK,\n        $.LISTING,\n        $.MAIN,\n        $.MARQUEE,\n        $.MENU,\n        $.META,\n        $.NAV,\n        $.NOEMBED,\n        $.NOFRAMES,\n        $.NOSCRIPT,\n        $.OBJECT,\n        $.OL,\n        $.P,\n        $.PARAM,\n        $.PLAINTEXT,\n        $.PRE,\n        $.SCRIPT,\n        $.SECTION,\n        $.SELECT,\n        $.SOURCE,\n        $.STYLE,\n        $.SUMMARY,\n        $.TABLE,\n        $.TBODY,\n        $.TD,\n        $.TEMPLATE,\n        $.TEXTAREA,\n        $.TFOOT,\n        $.TH,\n        $.THEAD,\n        $.TITLE,\n        $.TR,\n        $.TRACK,\n        $.UL,\n        $.WBR,\n        $.XMP,\n    ]),\n    [NS.MATHML]: new Set([$.MI, $.MO, $.MN, $.MS, $.MTEXT, $.ANNOTATION_XML]),\n    [NS.SVG]: new Set([$.TITLE, $.FOREIGN_OBJECT, $.DESC]),\n    [NS.XLINK]: new Set(),\n    [NS.XML]: new Set(),\n    [NS.XMLNS]: new Set(),\n};\nexport function isNumberedHeader(tn) {\n    return tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6;\n}\nconst UNESCAPED_TEXT = new Set([\n    TAG_NAMES.STYLE,\n    TAG_NAMES.SCRIPT,\n    TAG_NAMES.XMP,\n    TAG_NAMES.IFRAME,\n    TAG_NAMES.NOEMBED,\n    TAG_NAMES.NOFRAMES,\n    TAG_NAMES.PLAINTEXT,\n]);\nexport function hasUnescapedText(tn, scriptingEnabled) {\n    return UNESCAPED_TEXT.has(tn) || (scriptingEnabled && tn === TAG_NAMES.NOSCRIPT);\n}\n//# sourceMappingURL=html.js.map","import { Preprocessor } from './preprocessor.js';\nimport { CODE_POINTS as $, SEQUENCES as $$, REPLACEMENT_CHARACTER, isSurrogate, isUndefinedCodePoint, isControlCodePoint, } from '../common/unicode.js';\nimport { TokenType, getTokenAttr, } from '../common/token.js';\nimport { htmlDecodeTree, BinTrieFlags, determineBranch } from 'entities/lib/decode.js';\nimport { ERR } from '../common/error-codes.js';\nimport { TAG_ID, getTagID } from '../common/html.js';\n//C1 Unicode control character reference replacements\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = new Map([\n    [0x80, 8364],\n    [0x82, 8218],\n    [0x83, 402],\n    [0x84, 8222],\n    [0x85, 8230],\n    [0x86, 8224],\n    [0x87, 8225],\n    [0x88, 710],\n    [0x89, 8240],\n    [0x8a, 352],\n    [0x8b, 8249],\n    [0x8c, 338],\n    [0x8e, 381],\n    [0x91, 8216],\n    [0x92, 8217],\n    [0x93, 8220],\n    [0x94, 8221],\n    [0x95, 8226],\n    [0x96, 8211],\n    [0x97, 8212],\n    [0x98, 732],\n    [0x99, 8482],\n    [0x9a, 353],\n    [0x9b, 8250],\n    [0x9c, 339],\n    [0x9e, 382],\n    [0x9f, 376],\n]);\n//States\nvar State;\n(function (State) {\n    State[State[\"DATA\"] = 0] = \"DATA\";\n    State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n    State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n    State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n    State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n    State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n    State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n    State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n    State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n    State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n    State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n    State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n    State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n    State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n    State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n    State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n    State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n    State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n    State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n    State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n    State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n    State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n    State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n    State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n    State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n    State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n    State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n    State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n    State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n    State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n    State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n    State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n    State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n    State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n    State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n    State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n    State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n    State[State[\"NAMED_CHARACTER_REFERENCE\"] = 72] = \"NAMED_CHARACTER_REFERENCE\";\n    State[State[\"AMBIGUOUS_AMPERSAND\"] = 73] = \"AMBIGUOUS_AMPERSAND\";\n    State[State[\"NUMERIC_CHARACTER_REFERENCE\"] = 74] = \"NUMERIC_CHARACTER_REFERENCE\";\n    State[State[\"HEXADEMICAL_CHARACTER_REFERENCE_START\"] = 75] = \"HEXADEMICAL_CHARACTER_REFERENCE_START\";\n    State[State[\"HEXADEMICAL_CHARACTER_REFERENCE\"] = 76] = \"HEXADEMICAL_CHARACTER_REFERENCE\";\n    State[State[\"DECIMAL_CHARACTER_REFERENCE\"] = 77] = \"DECIMAL_CHARACTER_REFERENCE\";\n    State[State[\"NUMERIC_CHARACTER_REFERENCE_END\"] = 78] = \"NUMERIC_CHARACTER_REFERENCE_END\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexport const TokenizerMode = {\n    DATA: State.DATA,\n    RCDATA: State.RCDATA,\n    RAWTEXT: State.RAWTEXT,\n    SCRIPT_DATA: State.SCRIPT_DATA,\n    PLAINTEXT: State.PLAINTEXT,\n    CDATA_SECTION: State.CDATA_SECTION,\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;\n}\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\nfunction toAsciiLower(cp) {\n    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN;\n}\n//Tokenizer\nexport class Tokenizer {\n    constructor(options, handler) {\n        this.options = options;\n        this.handler = handler;\n        this.paused = false;\n        /** Ensures that the parsing loop isn't run multiple times at once. */\n        this.inLoop = false;\n        /**\n         * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n         * and that it is not an integration point for either MathML or HTML.\n         *\n         * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n         */\n        this.inForeignNode = false;\n        this.lastStartTagName = '';\n        this.active = false;\n        this.state = State.DATA;\n        this.returnState = State.DATA;\n        this.charRefCode = -1;\n        this.consumedAfterSnapshot = -1;\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = { name: '', value: '' };\n        this.preprocessor = new Preprocessor(handler);\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    //Errors\n    _err(code) {\n        var _a, _b;\n        (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code));\n    }\n    // NOTE: `offset` may never run across line boundaries.\n    getCurrentLocation(offset) {\n        if (!this.options.sourceCodeLocationInfo) {\n            return null;\n        }\n        return {\n            startLine: this.preprocessor.line,\n            startCol: this.preprocessor.col - offset,\n            startOffset: this.preprocessor.offset - offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1,\n        };\n    }\n    _runParsingLoop() {\n        if (this.inLoop)\n            return;\n        this.inLoop = true;\n        while (this.active && !this.paused) {\n            this.consumedAfterSnapshot = 0;\n            const cp = this._consume();\n            if (!this._ensureHibernation()) {\n                this._callState(cp);\n            }\n        }\n        this.inLoop = false;\n    }\n    //API\n    pause() {\n        this.paused = true;\n    }\n    resume(writeCallback) {\n        if (!this.paused) {\n            throw new Error('Parser was already resumed');\n        }\n        this.paused = false;\n        // Necessary for synchronous resume.\n        if (this.inLoop)\n            return;\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    write(chunk, isLastChunk, writeCallback) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n        this._runParsingLoop();\n    }\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            this._unconsume(this.consumedAfterSnapshot);\n            this.active = false;\n            return true;\n        }\n        return false;\n    }\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n    _unconsume(count) {\n        this.consumedAfterSnapshot -= count;\n        this.preprocessor.retreat(count);\n    }\n    _reconsumeInState(state, cp) {\n        this.state = state;\n        this._callState(cp);\n    }\n    _advanceBy(count) {\n        this.consumedAfterSnapshot += count;\n        for (let i = 0; i < count; i++) {\n            this.preprocessor.advance();\n        }\n    }\n    _consumeSequenceIfMatch(pattern, caseSensitive) {\n        if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n            // We will already have consumed one character before calling this method.\n            this._advanceBy(pattern.length - 1);\n            return true;\n        }\n        return false;\n    }\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: TokenType.START_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(1),\n        };\n    }\n    _createEndTagToken() {\n        this.currentToken = {\n            type: TokenType.END_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(2),\n        };\n    }\n    _createCommentToken(offset) {\n        this.currentToken = {\n            type: TokenType.COMMENT,\n            data: '',\n            location: this.getCurrentLocation(offset),\n        };\n    }\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: TokenType.DOCTYPE,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null,\n            location: this.currentLocation,\n        };\n    }\n    _createCharacterToken(type, chars) {\n        this.currentCharacterToken = {\n            type,\n            chars,\n            location: this.currentLocation,\n        };\n    }\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: '',\n        };\n        this.currentLocation = this.getCurrentLocation(0);\n    }\n    _leaveAttrName() {\n        var _a;\n        var _b;\n        const token = this.currentToken;\n        if (getTokenAttr(token, this.currentAttr.name) === null) {\n            token.attrs.push(this.currentAttr);\n            if (token.location && this.currentLocation) {\n                const attrLocations = ((_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : (_b.attrs = Object.create(null)));\n                attrLocations[this.currentAttr.name] = this.currentLocation;\n                // Set end location\n                this._leaveAttrValue();\n            }\n        }\n        else {\n            this._err(ERR.duplicateAttribute);\n        }\n    }\n    _leaveAttrValue() {\n        if (this.currentLocation) {\n            this.currentLocation.endLine = this.preprocessor.line;\n            this.currentLocation.endCol = this.preprocessor.col;\n            this.currentLocation.endOffset = this.preprocessor.offset;\n        }\n    }\n    //Token emission\n    prepareToken(ct) {\n        this._emitCurrentCharacterToken(ct.location);\n        this.currentToken = null;\n        if (ct.location) {\n            ct.location.endLine = this.preprocessor.line;\n            ct.location.endCol = this.preprocessor.col + 1;\n            ct.location.endOffset = this.preprocessor.offset + 1;\n        }\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    emitCurrentTagToken() {\n        const ct = this.currentToken;\n        this.prepareToken(ct);\n        ct.tagID = getTagID(ct.tagName);\n        if (ct.type === TokenType.START_TAG) {\n            this.lastStartTagName = ct.tagName;\n            this.handler.onStartTag(ct);\n        }\n        else {\n            if (ct.attrs.length > 0) {\n                this._err(ERR.endTagWithAttributes);\n            }\n            if (ct.selfClosing) {\n                this._err(ERR.endTagWithTrailingSolidus);\n            }\n            this.handler.onEndTag(ct);\n        }\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentComment(ct) {\n        this.prepareToken(ct);\n        this.handler.onComment(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentDoctype(ct) {\n        this.prepareToken(ct);\n        this.handler.onDoctype(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    _emitCurrentCharacterToken(nextLocation) {\n        if (this.currentCharacterToken) {\n            //NOTE: if we have a pending character token, make it's end location equal to the\n            //current token's start location.\n            if (nextLocation && this.currentCharacterToken.location) {\n                this.currentCharacterToken.location.endLine = nextLocation.startLine;\n                this.currentCharacterToken.location.endCol = nextLocation.startCol;\n                this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n            }\n            switch (this.currentCharacterToken.type) {\n                case TokenType.CHARACTER: {\n                    this.handler.onCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.NULL_CHARACTER: {\n                    this.handler.onNullCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.WHITESPACE_CHARACTER: {\n                    this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n                    break;\n                }\n            }\n            this.currentCharacterToken = null;\n        }\n    }\n    _emitEOFToken() {\n        const location = this.getCurrentLocation(0);\n        if (location) {\n            location.endLine = location.startLine;\n            location.endCol = location.startCol;\n            location.endOffset = location.startOffset;\n        }\n        this._emitCurrentCharacterToken(location);\n        this.handler.onEof({ type: TokenType.EOF, location });\n        this.active = false;\n    }\n    //Characters emission\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, the parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken) {\n            if (this.currentCharacterToken.type !== type) {\n                this.currentLocation = this.getCurrentLocation(0);\n                this._emitCurrentCharacterToken(this.currentLocation);\n                this.preprocessor.dropParsedChunk();\n            }\n            else {\n                this.currentCharacterToken.chars += ch;\n                return;\n            }\n        }\n        this._createCharacterToken(type, ch);\n    }\n    _emitCodePoint(cp) {\n        const type = isWhitespace(cp)\n            ? TokenType.WHITESPACE_CHARACTER\n            : cp === $.NULL\n                ? TokenType.NULL_CHARACTER\n                : TokenType.CHARACTER;\n        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n    }\n    //NOTE: used when we emit characters explicitly.\n    //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);\n    }\n    // Character reference helpers\n    _matchNamedCharacterReference(cp) {\n        let result = null;\n        let excess = 0;\n        let withoutSemicolon = false;\n        for (let i = 0, current = htmlDecodeTree[0]; i >= 0; cp = this._consume()) {\n            i = determineBranch(htmlDecodeTree, current, i + 1, cp);\n            if (i < 0)\n                break;\n            excess += 1;\n            current = htmlDecodeTree[i];\n            const masked = current & BinTrieFlags.VALUE_LENGTH;\n            // If the branch is a value, store it and continue\n            if (masked) {\n                // The mask is the number of bytes of the value, including the current byte.\n                const valueLength = (masked >> 14) - 1;\n                // Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n                // See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n                if (cp !== $.SEMICOLON &&\n                    this._isCharacterReferenceInAttribute() &&\n                    isEntityInAttributeInvalidEnd(this.preprocessor.peek(1))) {\n                    //NOTE: we don't flush all consumed code points here, and instead switch back to the original state after\n                    //emitting an ampersand. This is fine, as alphanumeric characters won't be parsed differently in attributes.\n                    result = [$.AMPERSAND];\n                    // Skip over the value.\n                    i += valueLength;\n                }\n                else {\n                    // If this is a surrogate pair, consume the next two bytes.\n                    result =\n                        valueLength === 0\n                            ? [htmlDecodeTree[i] & ~BinTrieFlags.VALUE_LENGTH]\n                            : valueLength === 1\n                                ? [htmlDecodeTree[++i]]\n                                : [htmlDecodeTree[++i], htmlDecodeTree[++i]];\n                    excess = 0;\n                    withoutSemicolon = cp !== $.SEMICOLON;\n                }\n                if (valueLength === 0) {\n                    // If the value is zero-length, we're done.\n                    this._consume();\n                    break;\n                }\n            }\n        }\n        this._unconsume(excess);\n        if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n        }\n        // We want to emit the error above on the code point after the entity.\n        // We always consume one code point too many in the loop, and we wait to\n        // unconsume it until after the error is emitted.\n        this._unconsume(1);\n        return result;\n    }\n    _isCharacterReferenceInAttribute() {\n        return (this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED);\n    }\n    _flushCodePointConsumedAsCharacterReference(cp) {\n        if (this._isCharacterReferenceInAttribute()) {\n            this.currentAttr.value += String.fromCodePoint(cp);\n        }\n        else {\n            this._emitCodePoint(cp);\n        }\n    }\n    // Calling states this way turns out to be much faster than any other approach.\n    _callState(cp) {\n        switch (this.state) {\n            case State.DATA: {\n                this._stateData(cp);\n                break;\n            }\n            case State.RCDATA: {\n                this._stateRcdata(cp);\n                break;\n            }\n            case State.RAWTEXT: {\n                this._stateRawtext(cp);\n                break;\n            }\n            case State.SCRIPT_DATA: {\n                this._stateScriptData(cp);\n                break;\n            }\n            case State.PLAINTEXT: {\n                this._statePlaintext(cp);\n                break;\n            }\n            case State.TAG_OPEN: {\n                this._stateTagOpen(cp);\n                break;\n            }\n            case State.END_TAG_OPEN: {\n                this._stateEndTagOpen(cp);\n                break;\n            }\n            case State.TAG_NAME: {\n                this._stateTagName(cp);\n                break;\n            }\n            case State.RCDATA_LESS_THAN_SIGN: {\n                this._stateRcdataLessThanSign(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_OPEN: {\n                this._stateRcdataEndTagOpen(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_NAME: {\n                this._stateRcdataEndTagName(cp);\n                break;\n            }\n            case State.RAWTEXT_LESS_THAN_SIGN: {\n                this._stateRawtextLessThanSign(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_OPEN: {\n                this._stateRawtextEndTagOpen(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_NAME: {\n                this._stateRawtextEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_LESS_THAN_SIGN: {\n                this._stateScriptDataLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_OPEN: {\n                this._stateScriptDataEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_NAME: {\n                this._stateScriptDataEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START: {\n                this._stateScriptDataEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START_DASH: {\n                this._stateScriptDataEscapeStartDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED: {\n                this._stateScriptDataEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH: {\n                this._stateScriptDataEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH_DASH: {\n                this._stateScriptDataEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {\n                this._stateScriptDataEscapedEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {\n                this._stateScriptDataEscapedEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_START: {\n                this._stateScriptDataDoubleEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED: {\n                this._stateScriptDataDoubleEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {\n                this._stateScriptDataDoubleEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {\n                this._stateScriptDataDoubleEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataDoubleEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_END: {\n                this._stateScriptDataDoubleEscapeEnd(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_NAME: {\n                this._stateBeforeAttributeName(cp);\n                break;\n            }\n            case State.ATTRIBUTE_NAME: {\n                this._stateAttributeName(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_NAME: {\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_VALUE: {\n                this._stateBeforeAttributeValue(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {\n                this._stateAttributeValueDoubleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_SINGLE_QUOTED: {\n                this._stateAttributeValueSingleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_UNQUOTED: {\n                this._stateAttributeValueUnquoted(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_VALUE_QUOTED: {\n                this._stateAfterAttributeValueQuoted(cp);\n                break;\n            }\n            case State.SELF_CLOSING_START_TAG: {\n                this._stateSelfClosingStartTag(cp);\n                break;\n            }\n            case State.BOGUS_COMMENT: {\n                this._stateBogusComment(cp);\n                break;\n            }\n            case State.MARKUP_DECLARATION_OPEN: {\n                this._stateMarkupDeclarationOpen(cp);\n                break;\n            }\n            case State.COMMENT_START: {\n                this._stateCommentStart(cp);\n                break;\n            }\n            case State.COMMENT_START_DASH: {\n                this._stateCommentStartDash(cp);\n                break;\n            }\n            case State.COMMENT: {\n                this._stateComment(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN: {\n                this._stateCommentLessThanSign(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG: {\n                this._stateCommentLessThanSignBang(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH: {\n                this._stateCommentLessThanSignBangDash(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {\n                this._stateCommentLessThanSignBangDashDash(cp);\n                break;\n            }\n            case State.COMMENT_END_DASH: {\n                this._stateCommentEndDash(cp);\n                break;\n            }\n            case State.COMMENT_END: {\n                this._stateCommentEnd(cp);\n                break;\n            }\n            case State.COMMENT_END_BANG: {\n                this._stateCommentEndBang(cp);\n                break;\n            }\n            case State.DOCTYPE: {\n                this._stateDoctype(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_NAME: {\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case State.DOCTYPE_NAME: {\n                this._stateDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_NAME: {\n                this._stateAfterDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_KEYWORD: {\n                this._stateAfterDoctypePublicKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateBeforeDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypePublicIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateAfterDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {\n                this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_KEYWORD: {\n                this._stateAfterDoctypeSystemKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateBeforeDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateAfterDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.BOGUS_DOCTYPE: {\n                this._stateBogusDoctype(cp);\n                break;\n            }\n            case State.CDATA_SECTION: {\n                this._stateCdataSection(cp);\n                break;\n            }\n            case State.CDATA_SECTION_BRACKET: {\n                this._stateCdataSectionBracket(cp);\n                break;\n            }\n            case State.CDATA_SECTION_END: {\n                this._stateCdataSectionEnd(cp);\n                break;\n            }\n            case State.CHARACTER_REFERENCE: {\n                this._stateCharacterReference(cp);\n                break;\n            }\n            case State.NAMED_CHARACTER_REFERENCE: {\n                this._stateNamedCharacterReference(cp);\n                break;\n            }\n            case State.AMBIGUOUS_AMPERSAND: {\n                this._stateAmbiguousAmpersand(cp);\n                break;\n            }\n            case State.NUMERIC_CHARACTER_REFERENCE: {\n                this._stateNumericCharacterReference(cp);\n                break;\n            }\n            case State.HEXADEMICAL_CHARACTER_REFERENCE_START: {\n                this._stateHexademicalCharacterReferenceStart(cp);\n                break;\n            }\n            case State.HEXADEMICAL_CHARACTER_REFERENCE: {\n                this._stateHexademicalCharacterReference(cp);\n                break;\n            }\n            case State.DECIMAL_CHARACTER_REFERENCE: {\n                this._stateDecimalCharacterReference(cp);\n                break;\n            }\n            case State.NUMERIC_CHARACTER_REFERENCE_END: {\n                this._stateNumericCharacterReferenceEnd(cp);\n                break;\n            }\n            default: {\n                throw new Error('Unknown state');\n            }\n        }\n    }\n    // State machine\n    // Data state\n    //------------------------------------------------------------------\n    _stateData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.TAG_OPEN;\n                break;\n            }\n            case $.AMPERSAND: {\n                this.returnState = State.DATA;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    //  RCDATA state\n    //------------------------------------------------------------------\n    _stateRcdata(cp) {\n        switch (cp) {\n            case $.AMPERSAND: {\n                this.returnState = State.RCDATA;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RCDATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    _stateRawtext(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RAWTEXT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data state\n    //------------------------------------------------------------------\n    _stateScriptData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    _statePlaintext(cp) {\n        switch (cp) {\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Tag open state\n    //------------------------------------------------------------------\n    _stateTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.EXCLAMATION_MARK: {\n                    this.state = State.MARKUP_DECLARATION_OPEN;\n                    break;\n                }\n                case $.SOLIDUS: {\n                    this.state = State.END_TAG_OPEN;\n                    break;\n                }\n                case $.QUESTION_MARK: {\n                    this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n                    this._createCommentToken(1);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('<');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._emitChars('<');\n                    this.state = State.DATA;\n                    this._stateData(cp);\n                }\n            }\n    }\n    // End tag open state\n    //------------------------------------------------------------------\n    _stateEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingEndTagName);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('</');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._createCommentToken(2);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                }\n            }\n    }\n    // Tag name state\n    //------------------------------------------------------------------\n    _stateTagName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.tagName += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    _stateRcdataLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RCDATA_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RCDATA_END_TAG_NAME;\n            this._stateRcdataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    handleSpecialEndTag(_cp) {\n        if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n            return !this._ensureHibernation();\n        }\n        this._createEndTagToken();\n        const token = this.currentToken;\n        token.tagName = this.lastStartTagName;\n        const cp = this.preprocessor.peek(this.lastStartTagName.length);\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                return false;\n            }\n            case $.SOLIDUS: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.SELF_CLOSING_START_TAG;\n                return false;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.emitCurrentTagToken();\n                this.state = State.DATA;\n                return false;\n            }\n            default: {\n                return !this._ensureHibernation();\n            }\n        }\n    }\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    _stateRawtextLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RAWTEXT_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RAWTEXT_END_TAG_NAME;\n            this._stateRawtextEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataLessThanSign(cp) {\n        switch (cp) {\n            case $.SOLIDUS: {\n                this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.SCRIPT_DATA_ESCAPE_START;\n                this._emitChars('<!');\n                break;\n            }\n            default: {\n                this._emitChars('<');\n                this.state = State.SCRIPT_DATA;\n                this._stateScriptData(cp);\n            }\n        }\n    }\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_END_TAG_NAME;\n            this._stateScriptDataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStart(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStartDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n        }\n        else if (isAsciiLetter(cp)) {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n            this._stateScriptDataDoubleEscapeStart(cp);\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n            this._stateScriptDataEscapedEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeStart(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n            this._emitChars('/');\n        }\n        else {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeEnd(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Before attribute name state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n                this._createAttr('=');\n                this.state = State.ATTRIBUTE_NAME;\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Attribute name state\n    //------------------------------------------------------------------\n    _stateAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED:\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this._leaveAttrName();\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._leaveAttrName();\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN: {\n                this._err(ERR.unexpectedCharacterInAttributeName);\n                this.currentAttr.name += String.fromCodePoint(cp);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After attribute name state\n    //------------------------------------------------------------------\n    _stateAfterAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Before attribute value state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeValue(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingAttributeValue);\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            default: {\n                this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n                this._stateAttributeValueUnquoted(cp);\n            }\n        }\n    }\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueDoubleQuoted(cp) {\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this.returnState = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueSingleQuoted(cp) {\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this.returnState = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueUnquoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.AMPERSAND: {\n                this.returnState = State.ATTRIBUTE_VALUE_UNQUOTED;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN:\n            case $.EQUALS_SIGN:\n            case $.GRAVE_ACCENT: {\n                this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n                this.currentAttr.value += String.fromCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    _stateAfterAttributeValueQuoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this._leaveAttrValue();\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBetweenAttributes);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    _stateSelfClosingStartTag(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                const token = this.currentToken;\n                token.selfClosing = true;\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedSolidusInTag);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Bogus comment state\n    //------------------------------------------------------------------\n    _stateBogusComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    _stateMarkupDeclarationOpen(cp) {\n        if (this._consumeSequenceIfMatch($$.DASH_DASH, true)) {\n            this._createCommentToken($$.DASH_DASH.length + 1);\n            this.state = State.COMMENT_START;\n        }\n        else if (this._consumeSequenceIfMatch($$.DOCTYPE, false)) {\n            // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n            this.currentLocation = this.getCurrentLocation($$.DOCTYPE.length + 1);\n            this.state = State.DOCTYPE;\n        }\n        else if (this._consumeSequenceIfMatch($$.CDATA_START, true)) {\n            if (this.inForeignNode) {\n                this.state = State.CDATA_SECTION;\n            }\n            else {\n                this._err(ERR.cdataInHtmlContent);\n                this._createCommentToken($$.CDATA_START.length + 1);\n                this.currentToken.data = '[CDATA[';\n                this.state = State.BOGUS_COMMENT;\n            }\n        }\n        //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.incorrectlyOpenedComment);\n            this._createCommentToken(2);\n            this.state = State.BOGUS_COMMENT;\n            this._stateBogusComment(cp);\n        }\n    }\n    // Comment start state\n    //------------------------------------------------------------------\n    _stateCommentStart(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_START_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                const token = this.currentToken;\n                this.emitCurrentComment(token);\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment start dash state\n    //------------------------------------------------------------------\n    _stateCommentStartDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment state\n    //------------------------------------------------------------------\n    _stateComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                this.state = State.COMMENT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSign(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.EXCLAMATION_MARK: {\n                token.data += '!';\n                this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBang(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n        }\n        else {\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n        }\n    }\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n        }\n        else {\n            this.state = State.COMMENT_END_DASH;\n            this._stateCommentEndDash(cp);\n        }\n    }\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDashDash(cp) {\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n            this._err(ERR.nestedComment);\n        }\n        this.state = State.COMMENT_END;\n        this._stateCommentEnd(cp);\n    }\n    // Comment end dash state\n    //------------------------------------------------------------------\n    _stateCommentEndDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end state\n    //------------------------------------------------------------------\n    _stateCommentEnd(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.COMMENT_END_BANG;\n                break;\n            }\n            case $.HYPHEN_MINUS: {\n                token.data += '-';\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end bang state\n    //------------------------------------------------------------------\n    _stateCommentEndBang(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                token.data += '--!';\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.incorrectlyClosedComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--!';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    _stateDoctype(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                this._createDoctypeToken(null);\n                const token = this.currentToken;\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBeforeDoctypeName);\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n            }\n        }\n    }\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeName(cp) {\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n            this.state = State.DOCTYPE_NAME;\n        }\n        else\n            switch (cp) {\n                case $.SPACE:\n                case $.LINE_FEED:\n                case $.TABULATION:\n                case $.FORM_FEED: {\n                    // Ignore whitespace\n                    break;\n                }\n                case $.NULL: {\n                    this._err(ERR.unexpectedNullCharacter);\n                    this._createDoctypeToken(REPLACEMENT_CHARACTER);\n                    this.state = State.DOCTYPE_NAME;\n                    break;\n                }\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingDoctypeName);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofInDoctype);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._createDoctypeToken(String.fromCodePoint(cp));\n                    this.state = State.DOCTYPE_NAME;\n                }\n            }\n    }\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.AFTER_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                if (this._consumeSequenceIfMatch($$.PUBLIC, false)) {\n                    this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n                }\n                else if (this._consumeSequenceIfMatch($$.SYSTEM, false)) {\n                    this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n                }\n                //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n                //results are no longer valid and we will need to start over.\n                else if (!this._ensureHibernation()) {\n                    this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n            }\n        }\n    }\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    _stateBogusDoctype(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    // CDATA section state\n    //------------------------------------------------------------------\n    _stateCdataSection(cp) {\n        switch (cp) {\n            case $.RIGHT_SQUARE_BRACKET: {\n                this.state = State.CDATA_SECTION_BRACKET;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInCdata);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    _stateCdataSectionBracket(cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = State.CDATA_SECTION_END;\n        }\n        else {\n            this._emitChars(']');\n            this.state = State.CDATA_SECTION;\n            this._stateCdataSection(cp);\n        }\n    }\n    // CDATA section end state\n    //------------------------------------------------------------------\n    _stateCdataSectionEnd(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                break;\n            }\n            case $.RIGHT_SQUARE_BRACKET: {\n                this._emitChars(']');\n                break;\n            }\n            default: {\n                this._emitChars(']]');\n                this.state = State.CDATA_SECTION;\n                this._stateCdataSection(cp);\n            }\n        }\n    }\n    // Character reference state\n    //------------------------------------------------------------------\n    _stateCharacterReference(cp) {\n        if (cp === $.NUMBER_SIGN) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE;\n        }\n        else if (isAsciiAlphaNumeric(cp)) {\n            this.state = State.NAMED_CHARACTER_REFERENCE;\n            this._stateNamedCharacterReference(cp);\n        }\n        else {\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Named character reference state\n    //------------------------------------------------------------------\n    _stateNamedCharacterReference(cp) {\n        const matchResult = this._matchNamedCharacterReference(cp);\n        //NOTE: Matching can be abrupted by hibernation. In that case, match\n        //results are no longer valid and we will need to start over.\n        if (this._ensureHibernation()) {\n            // Stay in the state, try again.\n        }\n        else if (matchResult) {\n            for (let i = 0; i < matchResult.length; i++) {\n                this._flushCodePointConsumedAsCharacterReference(matchResult[i]);\n            }\n            this.state = this.returnState;\n        }\n        else {\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this.state = State.AMBIGUOUS_AMPERSAND;\n        }\n    }\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    _stateAmbiguousAmpersand(cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }\n        else {\n            if (cp === $.SEMICOLON) {\n                this._err(ERR.unknownNamedCharacterReference);\n            }\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Numeric character reference state\n    //------------------------------------------------------------------\n    _stateNumericCharacterReference(cp) {\n        this.charRefCode = 0;\n        if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {\n            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;\n        }\n        // Inlined decimal character reference start state\n        else if (isAsciiDigit(cp)) {\n            this.state = State.DECIMAL_CHARACTER_REFERENCE;\n            this._stateDecimalCharacterReference(cp);\n        }\n        else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this._flushCodePointConsumedAsCharacterReference($.NUMBER_SIGN);\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Hexademical character reference start state\n    //------------------------------------------------------------------\n    _stateHexademicalCharacterReferenceStart(cp) {\n        if (isAsciiHexDigit(cp)) {\n            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE;\n            this._stateHexademicalCharacterReference(cp);\n        }\n        else {\n            this._err(ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this._flushCodePointConsumedAsCharacterReference($.NUMBER_SIGN);\n            this._unconsume(2);\n            this.state = this.returnState;\n        }\n    }\n    // Hexademical character reference state\n    //------------------------------------------------------------------\n    _stateHexademicalCharacterReference(cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        }\n        else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        }\n        else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        }\n        else if (cp === $.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n        }\n        else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n            this._stateNumericCharacterReferenceEnd(cp);\n        }\n    }\n    // Decimal character reference state\n    //------------------------------------------------------------------\n    _stateDecimalCharacterReference(cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        }\n        else if (cp === $.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n        }\n        else {\n            this._err(ERR.missingSemicolonAfterCharacterReference);\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n            this._stateNumericCharacterReferenceEnd(cp);\n        }\n    }\n    // Numeric character reference end state\n    //------------------------------------------------------------------\n    _stateNumericCharacterReferenceEnd(cp) {\n        if (this.charRefCode === $.NULL) {\n            this._err(ERR.nullCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        }\n        else if (this.charRefCode > 1114111) {\n            this._err(ERR.characterReferenceOutsideUnicodeRange);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        }\n        else if (isSurrogate(this.charRefCode)) {\n            this._err(ERR.surrogateCharacterReference);\n            this.charRefCode = $.REPLACEMENT_CHARACTER;\n        }\n        else if (isUndefinedCodePoint(this.charRefCode)) {\n            this._err(ERR.noncharacterCharacterReference);\n        }\n        else if (isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {\n            this._err(ERR.controlCharacterReference);\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);\n            if (replacement !== undefined) {\n                this.charRefCode = replacement;\n            }\n        }\n        this._flushCodePointConsumedAsCharacterReference(this.charRefCode);\n        this._reconsumeInState(this.returnState, cp);\n    }\n}\n//# sourceMappingURL=index.js.map","import { TAG_ID as $, NS, isNumberedHeader } from '../common/html.js';\n//Element utils\nconst IMPLICIT_END_TAG_REQUIRED = new Set([$.DD, $.DT, $.LI, $.OPTGROUP, $.OPTION, $.P, $.RB, $.RP, $.RT, $.RTC]);\nconst IMPLICIT_END_TAG_REQUIRED_THOROUGHLY = new Set([\n    ...IMPLICIT_END_TAG_REQUIRED,\n    $.CAPTION,\n    $.COLGROUP,\n    $.TBODY,\n    $.TD,\n    $.TFOOT,\n    $.TH,\n    $.THEAD,\n    $.TR,\n]);\nconst SCOPING_ELEMENT_NS = new Map([\n    [$.APPLET, NS.HTML],\n    [$.CAPTION, NS.HTML],\n    [$.HTML, NS.HTML],\n    [$.MARQUEE, NS.HTML],\n    [$.OBJECT, NS.HTML],\n    [$.TABLE, NS.HTML],\n    [$.TD, NS.HTML],\n    [$.TEMPLATE, NS.HTML],\n    [$.TH, NS.HTML],\n    [$.ANNOTATION_XML, NS.MATHML],\n    [$.MI, NS.MATHML],\n    [$.MN, NS.MATHML],\n    [$.MO, NS.MATHML],\n    [$.MS, NS.MATHML],\n    [$.MTEXT, NS.MATHML],\n    [$.DESC, NS.SVG],\n    [$.FOREIGN_OBJECT, NS.SVG],\n    [$.TITLE, NS.SVG],\n]);\nconst NAMED_HEADERS = [$.H1, $.H2, $.H3, $.H4, $.H5, $.H6];\nconst TABLE_ROW_CONTEXT = [$.TR, $.TEMPLATE, $.HTML];\nconst TABLE_BODY_CONTEXT = [$.TBODY, $.TFOOT, $.THEAD, $.TEMPLATE, $.HTML];\nconst TABLE_CONTEXT = [$.TABLE, $.TEMPLATE, $.HTML];\nconst TABLE_CELLS = [$.TD, $.TH];\n//Stack of open elements\nexport class OpenElementStack {\n    get currentTmplContentOrNode() {\n        return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;\n    }\n    constructor(document, treeAdapter, handler) {\n        this.treeAdapter = treeAdapter;\n        this.handler = handler;\n        this.items = [];\n        this.tagIDs = [];\n        this.stackTop = -1;\n        this.tmplCount = 0;\n        this.currentTagId = $.UNKNOWN;\n        this.current = document;\n    }\n    //Index of element\n    _indexOf(element) {\n        return this.items.lastIndexOf(element, this.stackTop);\n    }\n    //Update current element\n    _isInTemplate() {\n        return this.currentTagId === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;\n    }\n    _updateCurrentElement() {\n        this.current = this.items[this.stackTop];\n        this.currentTagId = this.tagIDs[this.stackTop];\n    }\n    //Mutations\n    push(element, tagID) {\n        this.stackTop++;\n        this.items[this.stackTop] = element;\n        this.current = element;\n        this.tagIDs[this.stackTop] = tagID;\n        this.currentTagId = tagID;\n        if (this._isInTemplate()) {\n            this.tmplCount++;\n        }\n        this.handler.onItemPush(element, tagID, true);\n    }\n    pop() {\n        const popped = this.current;\n        if (this.tmplCount > 0 && this._isInTemplate()) {\n            this.tmplCount--;\n        }\n        this.stackTop--;\n        this._updateCurrentElement();\n        this.handler.onItemPop(popped, true);\n    }\n    replace(oldElement, newElement) {\n        const idx = this._indexOf(oldElement);\n        this.items[idx] = newElement;\n        if (idx === this.stackTop) {\n            this.current = newElement;\n        }\n    }\n    insertAfter(referenceElement, newElement, newElementID) {\n        const insertionIdx = this._indexOf(referenceElement) + 1;\n        this.items.splice(insertionIdx, 0, newElement);\n        this.tagIDs.splice(insertionIdx, 0, newElementID);\n        this.stackTop++;\n        if (insertionIdx === this.stackTop) {\n            this._updateCurrentElement();\n        }\n        this.handler.onItemPush(this.current, this.currentTagId, insertionIdx === this.stackTop);\n    }\n    popUntilTagNamePopped(tagName) {\n        let targetIdx = this.stackTop + 1;\n        do {\n            targetIdx = this.tagIDs.lastIndexOf(tagName, targetIdx - 1);\n        } while (targetIdx > 0 && this.treeAdapter.getNamespaceURI(this.items[targetIdx]) !== NS.HTML);\n        this.shortenToLength(targetIdx < 0 ? 0 : targetIdx);\n    }\n    shortenToLength(idx) {\n        while (this.stackTop >= idx) {\n            const popped = this.current;\n            if (this.tmplCount > 0 && this._isInTemplate()) {\n                this.tmplCount -= 1;\n            }\n            this.stackTop--;\n            this._updateCurrentElement();\n            this.handler.onItemPop(popped, this.stackTop < idx);\n        }\n    }\n    popUntilElementPopped(element) {\n        const idx = this._indexOf(element);\n        this.shortenToLength(idx < 0 ? 0 : idx);\n    }\n    popUntilPopped(tagNames, targetNS) {\n        const idx = this._indexOfTagNames(tagNames, targetNS);\n        this.shortenToLength(idx < 0 ? 0 : idx);\n    }\n    popUntilNumberedHeaderPopped() {\n        this.popUntilPopped(NAMED_HEADERS, NS.HTML);\n    }\n    popUntilTableCellPopped() {\n        this.popUntilPopped(TABLE_CELLS, NS.HTML);\n    }\n    popAllUpToHtmlElement() {\n        //NOTE: here we assume that the root <html> element is always first in the open element stack, so\n        //we perform this fast stack clean up.\n        this.tmplCount = 0;\n        this.shortenToLength(1);\n    }\n    _indexOfTagNames(tagNames, namespace) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (tagNames.includes(this.tagIDs[i]) && this.treeAdapter.getNamespaceURI(this.items[i]) === namespace) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    clearBackTo(tagNames, targetNS) {\n        const idx = this._indexOfTagNames(tagNames, targetNS);\n        this.shortenToLength(idx + 1);\n    }\n    clearBackToTableContext() {\n        this.clearBackTo(TABLE_CONTEXT, NS.HTML);\n    }\n    clearBackToTableBodyContext() {\n        this.clearBackTo(TABLE_BODY_CONTEXT, NS.HTML);\n    }\n    clearBackToTableRowContext() {\n        this.clearBackTo(TABLE_ROW_CONTEXT, NS.HTML);\n    }\n    remove(element) {\n        const idx = this._indexOf(element);\n        if (idx >= 0) {\n            if (idx === this.stackTop) {\n                this.pop();\n            }\n            else {\n                this.items.splice(idx, 1);\n                this.tagIDs.splice(idx, 1);\n                this.stackTop--;\n                this._updateCurrentElement();\n                this.handler.onItemPop(element, false);\n            }\n        }\n    }\n    //Search\n    tryPeekProperlyNestedBodyElement() {\n        //Properly nested <body> element (should be second element in stack).\n        return this.stackTop >= 1 && this.tagIDs[1] === $.BODY ? this.items[1] : null;\n    }\n    contains(element) {\n        return this._indexOf(element) > -1;\n    }\n    getCommonAncestor(element) {\n        const elementIdx = this._indexOf(element) - 1;\n        return elementIdx >= 0 ? this.items[elementIdx] : null;\n    }\n    isRootHtmlElementCurrent() {\n        return this.stackTop === 0 && this.tagIDs[0] === $.HTML;\n    }\n    //Element in scope\n    hasInScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n            if (SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasNumberedHeaderInScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (isNumberedHeader(tn) && ns === NS.HTML) {\n                return true;\n            }\n            if (SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasInListItemScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n            if (((tn === $.UL || tn === $.OL) && ns === NS.HTML) || SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasInButtonScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (tn === tagName && ns === NS.HTML) {\n                return true;\n            }\n            if ((tn === $.BUTTON && ns === NS.HTML) || SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasInTableScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (ns !== NS.HTML) {\n                continue;\n            }\n            if (tn === tagName) {\n                return true;\n            }\n            if (tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasTableBodyContextInTableScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (ns !== NS.HTML) {\n                continue;\n            }\n            if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT) {\n                return true;\n            }\n            if (tn === $.TABLE || tn === $.HTML) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasInSelectScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (ns !== NS.HTML) {\n                continue;\n            }\n            if (tn === tagName) {\n                return true;\n            }\n            if (tn !== $.OPTION && tn !== $.OPTGROUP) {\n                return false;\n            }\n        }\n        return true;\n    }\n    //Implied end tags\n    generateImpliedEndTags() {\n        while (IMPLICIT_END_TAG_REQUIRED.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n    generateImpliedEndTagsThoroughly() {\n        while (IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n    generateImpliedEndTagsWithExclusion(exclusionId) {\n        while (this.currentTagId !== exclusionId && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n}\n//# sourceMappingURL=open-element-stack.js.map","//Const\nconst NOAH_ARK_CAPACITY = 3;\nexport var EntryType;\n(function (EntryType) {\n    EntryType[EntryType[\"Marker\"] = 0] = \"Marker\";\n    EntryType[EntryType[\"Element\"] = 1] = \"Element\";\n})(EntryType = EntryType || (EntryType = {}));\nconst MARKER = { type: EntryType.Marker };\n//List of formatting elements\nexport class FormattingElementList {\n    constructor(treeAdapter) {\n        this.treeAdapter = treeAdapter;\n        this.entries = [];\n        this.bookmark = null;\n    }\n    //Noah Ark's condition\n    //OPTIMIZATION: at first we try to find possible candidates for exclusion using\n    //lightweight heuristics without thorough attributes check.\n    _getNoahArkConditionCandidates(newElement, neAttrs) {\n        const candidates = [];\n        const neAttrsLength = neAttrs.length;\n        const neTagName = this.treeAdapter.getTagName(newElement);\n        const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);\n        for (let i = 0; i < this.entries.length; i++) {\n            const entry = this.entries[i];\n            if (entry.type === EntryType.Marker) {\n                break;\n            }\n            const { element } = entry;\n            if (this.treeAdapter.getTagName(element) === neTagName &&\n                this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {\n                const elementAttrs = this.treeAdapter.getAttrList(element);\n                if (elementAttrs.length === neAttrsLength) {\n                    candidates.push({ idx: i, attrs: elementAttrs });\n                }\n            }\n        }\n        return candidates;\n    }\n    _ensureNoahArkCondition(newElement) {\n        if (this.entries.length < NOAH_ARK_CAPACITY)\n            return;\n        const neAttrs = this.treeAdapter.getAttrList(newElement);\n        const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);\n        if (candidates.length < NOAH_ARK_CAPACITY)\n            return;\n        //NOTE: build attrs map for the new element, so we can perform fast lookups\n        const neAttrsMap = new Map(neAttrs.map((neAttr) => [neAttr.name, neAttr.value]));\n        let validCandidates = 0;\n        //NOTE: remove bottommost candidates, until Noah's Ark condition will not be met\n        for (let i = 0; i < candidates.length; i++) {\n            const candidate = candidates[i];\n            // We know that `candidate.attrs.length === neAttrs.length`\n            if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {\n                validCandidates += 1;\n                if (validCandidates >= NOAH_ARK_CAPACITY) {\n                    this.entries.splice(candidate.idx, 1);\n                }\n            }\n        }\n    }\n    //Mutations\n    insertMarker() {\n        this.entries.unshift(MARKER);\n    }\n    pushElement(element, token) {\n        this._ensureNoahArkCondition(element);\n        this.entries.unshift({\n            type: EntryType.Element,\n            element,\n            token,\n        });\n    }\n    insertElementAfterBookmark(element, token) {\n        const bookmarkIdx = this.entries.indexOf(this.bookmark);\n        this.entries.splice(bookmarkIdx, 0, {\n            type: EntryType.Element,\n            element,\n            token,\n        });\n    }\n    removeEntry(entry) {\n        const entryIndex = this.entries.indexOf(entry);\n        if (entryIndex >= 0) {\n            this.entries.splice(entryIndex, 1);\n        }\n    }\n    /**\n     * Clears the list of formatting elements up to the last marker.\n     *\n     * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker\n     */\n    clearToLastMarker() {\n        const markerIdx = this.entries.indexOf(MARKER);\n        if (markerIdx >= 0) {\n            this.entries.splice(0, markerIdx + 1);\n        }\n        else {\n            this.entries.length = 0;\n        }\n    }\n    //Search\n    getElementEntryInScopeWithTagName(tagName) {\n        const entry = this.entries.find((entry) => entry.type === EntryType.Marker || this.treeAdapter.getTagName(entry.element) === tagName);\n        return entry && entry.type === EntryType.Element ? entry : null;\n    }\n    getElementEntry(element) {\n        return this.entries.find((entry) => entry.type === EntryType.Element && entry.element === element);\n    }\n}\n//# sourceMappingURL=formatting-element-list.js.map","import { DOCUMENT_MODE } from '../common/html.js';\nfunction createTextNode(value) {\n    return {\n        nodeName: '#text',\n        value,\n        parentNode: null,\n    };\n}\nexport const defaultTreeAdapter = {\n    //Node construction\n    createDocument() {\n        return {\n            nodeName: '#document',\n            mode: DOCUMENT_MODE.NO_QUIRKS,\n            childNodes: [],\n        };\n    },\n    createDocumentFragment() {\n        return {\n            nodeName: '#document-fragment',\n            childNodes: [],\n        };\n    },\n    createElement(tagName, namespaceURI, attrs) {\n        return {\n            nodeName: tagName,\n            tagName,\n            attrs,\n            namespaceURI,\n            childNodes: [],\n            parentNode: null,\n        };\n    },\n    createCommentNode(data) {\n        return {\n            nodeName: '#comment',\n            data,\n            parentNode: null,\n        };\n    },\n    //Tree mutation\n    appendChild(parentNode, newNode) {\n        parentNode.childNodes.push(newNode);\n        newNode.parentNode = parentNode;\n    },\n    insertBefore(parentNode, newNode, referenceNode) {\n        const insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n        parentNode.childNodes.splice(insertionIdx, 0, newNode);\n        newNode.parentNode = parentNode;\n    },\n    setTemplateContent(templateElement, contentElement) {\n        templateElement.content = contentElement;\n    },\n    getTemplateContent(templateElement) {\n        return templateElement.content;\n    },\n    setDocumentType(document, name, publicId, systemId) {\n        const doctypeNode = document.childNodes.find((node) => node.nodeName === '#documentType');\n        if (doctypeNode) {\n            doctypeNode.name = name;\n            doctypeNode.publicId = publicId;\n            doctypeNode.systemId = systemId;\n        }\n        else {\n            const node = {\n                nodeName: '#documentType',\n                name,\n                publicId,\n                systemId,\n                parentNode: null,\n            };\n            defaultTreeAdapter.appendChild(document, node);\n        }\n    },\n    setDocumentMode(document, mode) {\n        document.mode = mode;\n    },\n    getDocumentMode(document) {\n        return document.mode;\n    },\n    detachNode(node) {\n        if (node.parentNode) {\n            const idx = node.parentNode.childNodes.indexOf(node);\n            node.parentNode.childNodes.splice(idx, 1);\n            node.parentNode = null;\n        }\n    },\n    insertText(parentNode, text) {\n        if (parentNode.childNodes.length > 0) {\n            const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n            if (defaultTreeAdapter.isTextNode(prevNode)) {\n                prevNode.value += text;\n                return;\n            }\n        }\n        defaultTreeAdapter.appendChild(parentNode, createTextNode(text));\n    },\n    insertTextBefore(parentNode, text, referenceNode) {\n        const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n        if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {\n            prevNode.value += text;\n        }\n        else {\n            defaultTreeAdapter.insertBefore(parentNode, createTextNode(text), referenceNode);\n        }\n    },\n    adoptAttributes(recipient, attrs) {\n        const recipientAttrsMap = new Set(recipient.attrs.map((attr) => attr.name));\n        for (let j = 0; j < attrs.length; j++) {\n            if (!recipientAttrsMap.has(attrs[j].name)) {\n                recipient.attrs.push(attrs[j]);\n            }\n        }\n    },\n    //Tree traversing\n    getFirstChild(node) {\n        return node.childNodes[0];\n    },\n    getChildNodes(node) {\n        return node.childNodes;\n    },\n    getParentNode(node) {\n        return node.parentNode;\n    },\n    getAttrList(element) {\n        return element.attrs;\n    },\n    //Node data\n    getTagName(element) {\n        return element.tagName;\n    },\n    getNamespaceURI(element) {\n        return element.namespaceURI;\n    },\n    getTextNodeContent(textNode) {\n        return textNode.value;\n    },\n    getCommentNodeContent(commentNode) {\n        return commentNode.data;\n    },\n    getDocumentTypeNodeName(doctypeNode) {\n        return doctypeNode.name;\n    },\n    getDocumentTypeNodePublicId(doctypeNode) {\n        return doctypeNode.publicId;\n    },\n    getDocumentTypeNodeSystemId(doctypeNode) {\n        return doctypeNode.systemId;\n    },\n    //Node types\n    isTextNode(node) {\n        return node.nodeName === '#text';\n    },\n    isCommentNode(node) {\n        return node.nodeName === '#comment';\n    },\n    isDocumentTypeNode(node) {\n        return node.nodeName === '#documentType';\n    },\n    isElementNode(node) {\n        return Object.prototype.hasOwnProperty.call(node, 'tagName');\n    },\n    // Source code location\n    setNodeSourceCodeLocation(node, location) {\n        node.sourceCodeLocation = location;\n    },\n    getNodeSourceCodeLocation(node) {\n        return node.sourceCodeLocation;\n    },\n    updateNodeSourceCodeLocation(node, endLocation) {\n        node.sourceCodeLocation = { ...node.sourceCodeLocation, ...endLocation };\n    },\n};\n//# sourceMappingURL=default.js.map","import { DOCUMENT_MODE } from './html.js';\n//Const\nconst VALID_DOCTYPE_NAME = 'html';\nconst VALID_SYSTEM_ID = 'about:legacy-compat';\nconst QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd';\nconst QUIRKS_MODE_PUBLIC_ID_PREFIXES = [\n    '+//silmaril//dtd html pro v0r11 19970101//',\n    '-//as//dtd html 3.0 aswedit + extensions//',\n    '-//advasoft ltd//dtd html 3.0 aswedit + extensions//',\n    '-//ietf//dtd html 2.0 level 1//',\n    '-//ietf//dtd html 2.0 level 2//',\n    '-//ietf//dtd html 2.0 strict level 1//',\n    '-//ietf//dtd html 2.0 strict level 2//',\n    '-//ietf//dtd html 2.0 strict//',\n    '-//ietf//dtd html 2.0//',\n    '-//ietf//dtd html 2.1e//',\n    '-//ietf//dtd html 3.0//',\n    '-//ietf//dtd html 3.2 final//',\n    '-//ietf//dtd html 3.2//',\n    '-//ietf//dtd html 3//',\n    '-//ietf//dtd html level 0//',\n    '-//ietf//dtd html level 1//',\n    '-//ietf//dtd html level 2//',\n    '-//ietf//dtd html level 3//',\n    '-//ietf//dtd html strict level 0//',\n    '-//ietf//dtd html strict level 1//',\n    '-//ietf//dtd html strict level 2//',\n    '-//ietf//dtd html strict level 3//',\n    '-//ietf//dtd html strict//',\n    '-//ietf//dtd html//',\n    '-//metrius//dtd metrius presentational//',\n    '-//microsoft//dtd internet explorer 2.0 html strict//',\n    '-//microsoft//dtd internet explorer 2.0 html//',\n    '-//microsoft//dtd internet explorer 2.0 tables//',\n    '-//microsoft//dtd internet explorer 3.0 html strict//',\n    '-//microsoft//dtd internet explorer 3.0 html//',\n    '-//microsoft//dtd internet explorer 3.0 tables//',\n    '-//netscape comm. corp.//dtd html//',\n    '-//netscape comm. corp.//dtd strict html//',\n    \"-//o'reilly and associates//dtd html 2.0//\",\n    \"-//o'reilly and associates//dtd html extended 1.0//\",\n    \"-//o'reilly and associates//dtd html extended relaxed 1.0//\",\n    '-//sq//dtd html 2.0 hotmetal + extensions//',\n    '-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//',\n    '-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//',\n    '-//spyglass//dtd html 2.0 extended//',\n    '-//sun microsystems corp.//dtd hotjava html//',\n    '-//sun microsystems corp.//dtd hotjava strict html//',\n    '-//w3c//dtd html 3 1995-03-24//',\n    '-//w3c//dtd html 3.2 draft//',\n    '-//w3c//dtd html 3.2 final//',\n    '-//w3c//dtd html 3.2//',\n    '-//w3c//dtd html 3.2s draft//',\n    '-//w3c//dtd html 4.0 frameset//',\n    '-//w3c//dtd html 4.0 transitional//',\n    '-//w3c//dtd html experimental 19960712//',\n    '-//w3c//dtd html experimental 970421//',\n    '-//w3c//dtd w3 html//',\n    '-//w3o//dtd w3 html 3.0//',\n    '-//webtechs//dtd mozilla html 2.0//',\n    '-//webtechs//dtd mozilla html//',\n];\nconst QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [\n    ...QUIRKS_MODE_PUBLIC_ID_PREFIXES,\n    '-//w3c//dtd html 4.01 frameset//',\n    '-//w3c//dtd html 4.01 transitional//',\n];\nconst QUIRKS_MODE_PUBLIC_IDS = new Set([\n    '-//w3o//dtd w3 html strict 3.0//en//',\n    '-/w3c/dtd html 4.0 transitional/en',\n    'html',\n]);\nconst LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ['-//w3c//dtd xhtml 1.0 frameset//', '-//w3c//dtd xhtml 1.0 transitional//'];\nconst LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = [\n    ...LIMITED_QUIRKS_PUBLIC_ID_PREFIXES,\n    '-//w3c//dtd html 4.01 frameset//',\n    '-//w3c//dtd html 4.01 transitional//',\n];\n//Utils\nfunction hasPrefix(publicId, prefixes) {\n    return prefixes.some((prefix) => publicId.startsWith(prefix));\n}\n//API\nexport function isConforming(token) {\n    return (token.name === VALID_DOCTYPE_NAME &&\n        token.publicId === null &&\n        (token.systemId === null || token.systemId === VALID_SYSTEM_ID));\n}\nexport function getDocumentMode(token) {\n    if (token.name !== VALID_DOCTYPE_NAME) {\n        return DOCUMENT_MODE.QUIRKS;\n    }\n    const { systemId } = token;\n    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {\n        return DOCUMENT_MODE.QUIRKS;\n    }\n    let { publicId } = token;\n    if (publicId !== null) {\n        publicId = publicId.toLowerCase();\n        if (QUIRKS_MODE_PUBLIC_IDS.has(publicId)) {\n            return DOCUMENT_MODE.QUIRKS;\n        }\n        let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;\n        if (hasPrefix(publicId, prefixes)) {\n            return DOCUMENT_MODE.QUIRKS;\n        }\n        prefixes =\n            systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;\n        if (hasPrefix(publicId, prefixes)) {\n            return DOCUMENT_MODE.LIMITED_QUIRKS;\n        }\n    }\n    return DOCUMENT_MODE.NO_QUIRKS;\n}\n//# sourceMappingURL=doctype.js.map","import { TAG_ID as $, NS, ATTRS, getTagID } from './html.js';\n//MIME types\nconst MIME_TYPES = {\n    TEXT_HTML: 'text/html',\n    APPLICATION_XML: 'application/xhtml+xml',\n};\n//Attributes\nconst DEFINITION_URL_ATTR = 'definitionurl';\nconst ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL';\nconst SVG_ATTRS_ADJUSTMENT_MAP = new Map([\n    'attributeName',\n    'attributeType',\n    'baseFrequency',\n    'baseProfile',\n    'calcMode',\n    'clipPathUnits',\n    'diffuseConstant',\n    'edgeMode',\n    'filterUnits',\n    'glyphRef',\n    'gradientTransform',\n    'gradientUnits',\n    'kernelMatrix',\n    'kernelUnitLength',\n    'keyPoints',\n    'keySplines',\n    'keyTimes',\n    'lengthAdjust',\n    'limitingConeAngle',\n    'markerHeight',\n    'markerUnits',\n    'markerWidth',\n    'maskContentUnits',\n    'maskUnits',\n    'numOctaves',\n    'pathLength',\n    'patternContentUnits',\n    'patternTransform',\n    'patternUnits',\n    'pointsAtX',\n    'pointsAtY',\n    'pointsAtZ',\n    'preserveAlpha',\n    'preserveAspectRatio',\n    'primitiveUnits',\n    'refX',\n    'refY',\n    'repeatCount',\n    'repeatDur',\n    'requiredExtensions',\n    'requiredFeatures',\n    'specularConstant',\n    'specularExponent',\n    'spreadMethod',\n    'startOffset',\n    'stdDeviation',\n    'stitchTiles',\n    'surfaceScale',\n    'systemLanguage',\n    'tableValues',\n    'targetX',\n    'targetY',\n    'textLength',\n    'viewBox',\n    'viewTarget',\n    'xChannelSelector',\n    'yChannelSelector',\n    'zoomAndPan',\n].map((attr) => [attr.toLowerCase(), attr]));\nconst XML_ATTRS_ADJUSTMENT_MAP = new Map([\n    ['xlink:actuate', { prefix: 'xlink', name: 'actuate', namespace: NS.XLINK }],\n    ['xlink:arcrole', { prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK }],\n    ['xlink:href', { prefix: 'xlink', name: 'href', namespace: NS.XLINK }],\n    ['xlink:role', { prefix: 'xlink', name: 'role', namespace: NS.XLINK }],\n    ['xlink:show', { prefix: 'xlink', name: 'show', namespace: NS.XLINK }],\n    ['xlink:title', { prefix: 'xlink', name: 'title', namespace: NS.XLINK }],\n    ['xlink:type', { prefix: 'xlink', name: 'type', namespace: NS.XLINK }],\n    ['xml:base', { prefix: 'xml', name: 'base', namespace: NS.XML }],\n    ['xml:lang', { prefix: 'xml', name: 'lang', namespace: NS.XML }],\n    ['xml:space', { prefix: 'xml', name: 'space', namespace: NS.XML }],\n    ['xmlns', { prefix: '', name: 'xmlns', namespace: NS.XMLNS }],\n    ['xmlns:xlink', { prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS }],\n]);\n//SVG tag names adjustment map\nexport const SVG_TAG_NAMES_ADJUSTMENT_MAP = new Map([\n    'altGlyph',\n    'altGlyphDef',\n    'altGlyphItem',\n    'animateColor',\n    'animateMotion',\n    'animateTransform',\n    'clipPath',\n    'feBlend',\n    'feColorMatrix',\n    'feComponentTransfer',\n    'feComposite',\n    'feConvolveMatrix',\n    'feDiffuseLighting',\n    'feDisplacementMap',\n    'feDistantLight',\n    'feFlood',\n    'feFuncA',\n    'feFuncB',\n    'feFuncG',\n    'feFuncR',\n    'feGaussianBlur',\n    'feImage',\n    'feMerge',\n    'feMergeNode',\n    'feMorphology',\n    'feOffset',\n    'fePointLight',\n    'feSpecularLighting',\n    'feSpotLight',\n    'feTile',\n    'feTurbulence',\n    'foreignObject',\n    'glyphRef',\n    'linearGradient',\n    'radialGradient',\n    'textPath',\n].map((tn) => [tn.toLowerCase(), tn]));\n//Tags that causes exit from foreign content\nconst EXITS_FOREIGN_CONTENT = new Set([\n    $.B,\n    $.BIG,\n    $.BLOCKQUOTE,\n    $.BODY,\n    $.BR,\n    $.CENTER,\n    $.CODE,\n    $.DD,\n    $.DIV,\n    $.DL,\n    $.DT,\n    $.EM,\n    $.EMBED,\n    $.H1,\n    $.H2,\n    $.H3,\n    $.H4,\n    $.H5,\n    $.H6,\n    $.HEAD,\n    $.HR,\n    $.I,\n    $.IMG,\n    $.LI,\n    $.LISTING,\n    $.MENU,\n    $.META,\n    $.NOBR,\n    $.OL,\n    $.P,\n    $.PRE,\n    $.RUBY,\n    $.S,\n    $.SMALL,\n    $.SPAN,\n    $.STRONG,\n    $.STRIKE,\n    $.SUB,\n    $.SUP,\n    $.TABLE,\n    $.TT,\n    $.U,\n    $.UL,\n    $.VAR,\n]);\n//Check exit from foreign content\nexport function causesExit(startTagToken) {\n    const tn = startTagToken.tagID;\n    const isFontWithAttrs = tn === $.FONT &&\n        startTagToken.attrs.some(({ name }) => name === ATTRS.COLOR || name === ATTRS.SIZE || name === ATTRS.FACE);\n    return isFontWithAttrs || EXITS_FOREIGN_CONTENT.has(tn);\n}\n//Token adjustments\nexport function adjustTokenMathMLAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        if (token.attrs[i].name === DEFINITION_URL_ATTR) {\n            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;\n            break;\n        }\n    }\n}\nexport function adjustTokenSVGAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrName != null) {\n            token.attrs[i].name = adjustedAttrName;\n        }\n    }\n}\nexport function adjustTokenXMLAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrEntry) {\n            token.attrs[i].prefix = adjustedAttrEntry.prefix;\n            token.attrs[i].name = adjustedAttrEntry.name;\n            token.attrs[i].namespace = adjustedAttrEntry.namespace;\n        }\n    }\n}\nexport function adjustTokenSVGTagName(token) {\n    const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);\n    if (adjustedTagName != null) {\n        token.tagName = adjustedTagName;\n        token.tagID = getTagID(token.tagName);\n    }\n}\n//Integration points\nfunction isMathMLTextIntegrationPoint(tn, ns) {\n    return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);\n}\nfunction isHtmlIntegrationPoint(tn, ns, attrs) {\n    if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {\n        for (let i = 0; i < attrs.length; i++) {\n            if (attrs[i].name === ATTRS.ENCODING) {\n                const value = attrs[i].value.toLowerCase();\n                return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;\n            }\n        }\n    }\n    return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);\n}\nexport function isIntegrationPoint(tn, ns, attrs, foreignNS) {\n    return (((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) ||\n        ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)));\n}\n//# sourceMappingURL=foreign-content.js.map","import { Tokenizer, TokenizerMode } from '../tokenizer/index.js';\nimport { OpenElementStack } from './open-element-stack.js';\nimport { FormattingElementList, EntryType } from './formatting-element-list.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\nimport * as doctype from '../common/doctype.js';\nimport * as foreignContent from '../common/foreign-content.js';\nimport { ERR } from '../common/error-codes.js';\nimport * as unicode from '../common/unicode.js';\nimport { TAG_ID as $, TAG_NAMES as TN, NS, ATTRS, SPECIAL_ELEMENTS, DOCUMENT_MODE, isNumberedHeader, getTagID, } from '../common/html.js';\nimport { TokenType, getTokenAttr, } from '../common/token.js';\n//Misc constants\nconst HIDDEN_INPUT_TYPE = 'hidden';\n//Adoption agency loops iteration count\nconst AA_OUTER_LOOP_ITER = 8;\nconst AA_INNER_LOOP_ITER = 3;\n//Insertion modes\nvar InsertionMode;\n(function (InsertionMode) {\n    InsertionMode[InsertionMode[\"INITIAL\"] = 0] = \"INITIAL\";\n    InsertionMode[InsertionMode[\"BEFORE_HTML\"] = 1] = \"BEFORE_HTML\";\n    InsertionMode[InsertionMode[\"BEFORE_HEAD\"] = 2] = \"BEFORE_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD\"] = 3] = \"IN_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD_NO_SCRIPT\"] = 4] = \"IN_HEAD_NO_SCRIPT\";\n    InsertionMode[InsertionMode[\"AFTER_HEAD\"] = 5] = \"AFTER_HEAD\";\n    InsertionMode[InsertionMode[\"IN_BODY\"] = 6] = \"IN_BODY\";\n    InsertionMode[InsertionMode[\"TEXT\"] = 7] = \"TEXT\";\n    InsertionMode[InsertionMode[\"IN_TABLE\"] = 8] = \"IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TABLE_TEXT\"] = 9] = \"IN_TABLE_TEXT\";\n    InsertionMode[InsertionMode[\"IN_CAPTION\"] = 10] = \"IN_CAPTION\";\n    InsertionMode[InsertionMode[\"IN_COLUMN_GROUP\"] = 11] = \"IN_COLUMN_GROUP\";\n    InsertionMode[InsertionMode[\"IN_TABLE_BODY\"] = 12] = \"IN_TABLE_BODY\";\n    InsertionMode[InsertionMode[\"IN_ROW\"] = 13] = \"IN_ROW\";\n    InsertionMode[InsertionMode[\"IN_CELL\"] = 14] = \"IN_CELL\";\n    InsertionMode[InsertionMode[\"IN_SELECT\"] = 15] = \"IN_SELECT\";\n    InsertionMode[InsertionMode[\"IN_SELECT_IN_TABLE\"] = 16] = \"IN_SELECT_IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TEMPLATE\"] = 17] = \"IN_TEMPLATE\";\n    InsertionMode[InsertionMode[\"AFTER_BODY\"] = 18] = \"AFTER_BODY\";\n    InsertionMode[InsertionMode[\"IN_FRAMESET\"] = 19] = \"IN_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_FRAMESET\"] = 20] = \"AFTER_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_BODY\"] = 21] = \"AFTER_AFTER_BODY\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_FRAMESET\"] = 22] = \"AFTER_AFTER_FRAMESET\";\n})(InsertionMode || (InsertionMode = {}));\nconst BASE_LOC = {\n    startLine: -1,\n    startCol: -1,\n    startOffset: -1,\n    endLine: -1,\n    endCol: -1,\n    endOffset: -1,\n};\nconst TABLE_STRUCTURE_TAGS = new Set([$.TABLE, $.TBODY, $.TFOOT, $.THEAD, $.TR]);\nconst defaultParserOptions = {\n    scriptingEnabled: true,\n    sourceCodeLocationInfo: false,\n    treeAdapter: defaultTreeAdapter,\n    onParseError: null,\n};\n//Parser\nexport class Parser {\n    constructor(options, document, fragmentContext = null, scriptHandler = null) {\n        this.fragmentContext = fragmentContext;\n        this.scriptHandler = scriptHandler;\n        this.currentToken = null;\n        this.stopped = false;\n        this.insertionMode = InsertionMode.INITIAL;\n        this.originalInsertionMode = InsertionMode.INITIAL;\n        this.headElement = null;\n        this.formElement = null;\n        /** Indicates that the current node is not an element in the HTML namespace */\n        this.currentNotInHTML = false;\n        /**\n         * The template insertion mode stack is maintained from the left.\n         * Ie. the topmost element will always have index 0.\n         */\n        this.tmplInsertionModeStack = [];\n        this.pendingCharacterTokens = [];\n        this.hasNonWhitespacePendingCharacterToken = false;\n        this.framesetOk = true;\n        this.skipNextNewLine = false;\n        this.fosterParentingEnabled = false;\n        this.options = {\n            ...defaultParserOptions,\n            ...options,\n        };\n        this.treeAdapter = this.options.treeAdapter;\n        this.onParseError = this.options.onParseError;\n        // Always enable location info if we report parse errors.\n        if (this.onParseError) {\n            this.options.sourceCodeLocationInfo = true;\n        }\n        this.document = document !== null && document !== void 0 ? document : this.treeAdapter.createDocument();\n        this.tokenizer = new Tokenizer(this.options, this);\n        this.activeFormattingElements = new FormattingElementList(this.treeAdapter);\n        this.fragmentContextID = fragmentContext ? getTagID(this.treeAdapter.getTagName(fragmentContext)) : $.UNKNOWN;\n        this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);\n        this.openElements = new OpenElementStack(this.document, this.treeAdapter, this);\n    }\n    // API\n    static parse(html, options) {\n        const parser = new this(options);\n        parser.tokenizer.write(html, true);\n        return parser.document;\n    }\n    static getFragmentParser(fragmentContext, options) {\n        const opts = {\n            ...defaultParserOptions,\n            ...options,\n        };\n        //NOTE: use a <template> element as the fragment context if no context element was provided,\n        //so we will parse in a \"forgiving\" manner\n        fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : (fragmentContext = opts.treeAdapter.createElement(TN.TEMPLATE, NS.HTML, []));\n        //NOTE: create a fake element which will be used as the `document` for fragment parsing.\n        //This is important for jsdom, where a new `document` cannot be created. This led to\n        //fragment parsing messing with the main `document`.\n        const documentMock = opts.treeAdapter.createElement('documentmock', NS.HTML, []);\n        const parser = new this(opts, documentMock, fragmentContext);\n        if (parser.fragmentContextID === $.TEMPLATE) {\n            parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n        }\n        parser._initTokenizerForFragmentParsing();\n        parser._insertFakeRootElement();\n        parser._resetInsertionMode();\n        parser._findFormInFragmentContext();\n        return parser;\n    }\n    getFragment() {\n        const rootElement = this.treeAdapter.getFirstChild(this.document);\n        const fragment = this.treeAdapter.createDocumentFragment();\n        this._adoptNodes(rootElement, fragment);\n        return fragment;\n    }\n    //Errors\n    _err(token, code, beforeToken) {\n        var _a;\n        if (!this.onParseError)\n            return;\n        const loc = (_a = token.location) !== null && _a !== void 0 ? _a : BASE_LOC;\n        const err = {\n            code,\n            startLine: loc.startLine,\n            startCol: loc.startCol,\n            startOffset: loc.startOffset,\n            endLine: beforeToken ? loc.startLine : loc.endLine,\n            endCol: beforeToken ? loc.startCol : loc.endCol,\n            endOffset: beforeToken ? loc.startOffset : loc.endOffset,\n        };\n        this.onParseError(err);\n    }\n    //Stack events\n    onItemPush(node, tid, isTop) {\n        var _a, _b;\n        (_b = (_a = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n        if (isTop && this.openElements.stackTop > 0)\n            this._setContextModes(node, tid);\n    }\n    onItemPop(node, isTop) {\n        var _a, _b;\n        if (this.options.sourceCodeLocationInfo) {\n            this._setEndLocation(node, this.currentToken);\n        }\n        (_b = (_a = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a, node, this.openElements.current);\n        if (isTop) {\n            let current;\n            let currentTagId;\n            if (this.openElements.stackTop === 0 && this.fragmentContext) {\n                current = this.fragmentContext;\n                currentTagId = this.fragmentContextID;\n            }\n            else {\n                ({ current, currentTagId } = this.openElements);\n            }\n            this._setContextModes(current, currentTagId);\n        }\n    }\n    _setContextModes(current, tid) {\n        const isHTML = current === this.document || this.treeAdapter.getNamespaceURI(current) === NS.HTML;\n        this.currentNotInHTML = !isHTML;\n        this.tokenizer.inForeignNode = !isHTML && !this._isIntegrationPoint(tid, current);\n    }\n    _switchToTextParsing(currentToken, nextTokenizerState) {\n        this._insertElement(currentToken, NS.HTML);\n        this.tokenizer.state = nextTokenizerState;\n        this.originalInsertionMode = this.insertionMode;\n        this.insertionMode = InsertionMode.TEXT;\n    }\n    switchToPlaintextParsing() {\n        this.insertionMode = InsertionMode.TEXT;\n        this.originalInsertionMode = InsertionMode.IN_BODY;\n        this.tokenizer.state = TokenizerMode.PLAINTEXT;\n    }\n    //Fragment parsing\n    _getAdjustedCurrentElement() {\n        return this.openElements.stackTop === 0 && this.fragmentContext\n            ? this.fragmentContext\n            : this.openElements.current;\n    }\n    _findFormInFragmentContext() {\n        let node = this.fragmentContext;\n        while (node) {\n            if (this.treeAdapter.getTagName(node) === TN.FORM) {\n                this.formElement = node;\n                break;\n            }\n            node = this.treeAdapter.getParentNode(node);\n        }\n    }\n    _initTokenizerForFragmentParsing() {\n        if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== NS.HTML) {\n            return;\n        }\n        switch (this.fragmentContextID) {\n            case $.TITLE:\n            case $.TEXTAREA: {\n                this.tokenizer.state = TokenizerMode.RCDATA;\n                break;\n            }\n            case $.STYLE:\n            case $.XMP:\n            case $.IFRAME:\n            case $.NOEMBED:\n            case $.NOFRAMES:\n            case $.NOSCRIPT: {\n                this.tokenizer.state = TokenizerMode.RAWTEXT;\n                break;\n            }\n            case $.SCRIPT: {\n                this.tokenizer.state = TokenizerMode.SCRIPT_DATA;\n                break;\n            }\n            case $.PLAINTEXT: {\n                this.tokenizer.state = TokenizerMode.PLAINTEXT;\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    //Tree mutation\n    _setDocumentType(token) {\n        const name = token.name || '';\n        const publicId = token.publicId || '';\n        const systemId = token.systemId || '';\n        this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);\n        if (token.location) {\n            const documentChildren = this.treeAdapter.getChildNodes(this.document);\n            const docTypeNode = documentChildren.find((node) => this.treeAdapter.isDocumentTypeNode(node));\n            if (docTypeNode) {\n                this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);\n            }\n        }\n    }\n    _attachElementToTree(element, location) {\n        if (this.options.sourceCodeLocationInfo) {\n            const loc = location && {\n                ...location,\n                startTag: location,\n            };\n            this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n        }\n        if (this._shouldFosterParentOnInsertion()) {\n            this._fosterParentElement(element);\n        }\n        else {\n            const parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.appendChild(parent, element);\n        }\n    }\n    _appendElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n    }\n    _insertElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n        this.openElements.push(element, token.tagID);\n    }\n    _insertFakeElement(tagName, tagID) {\n        const element = this.treeAdapter.createElement(tagName, NS.HTML, []);\n        this._attachElementToTree(element, null);\n        this.openElements.push(element, tagID);\n    }\n    _insertTemplate(token) {\n        const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);\n        const content = this.treeAdapter.createDocumentFragment();\n        this.treeAdapter.setTemplateContent(tmpl, content);\n        this._attachElementToTree(tmpl, token.location);\n        this.openElements.push(tmpl, token.tagID);\n        if (this.options.sourceCodeLocationInfo)\n            this.treeAdapter.setNodeSourceCodeLocation(content, null);\n    }\n    _insertFakeRootElement() {\n        const element = this.treeAdapter.createElement(TN.HTML, NS.HTML, []);\n        if (this.options.sourceCodeLocationInfo)\n            this.treeAdapter.setNodeSourceCodeLocation(element, null);\n        this.treeAdapter.appendChild(this.openElements.current, element);\n        this.openElements.push(element, $.HTML);\n    }\n    _appendCommentNode(token, parent) {\n        const commentNode = this.treeAdapter.createCommentNode(token.data);\n        this.treeAdapter.appendChild(parent, commentNode);\n        if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n        }\n    }\n    _insertCharacters(token) {\n        let parent;\n        let beforeElement;\n        if (this._shouldFosterParentOnInsertion()) {\n            ({ parent, beforeElement } = this._findFosterParentingLocation());\n            if (beforeElement) {\n                this.treeAdapter.insertTextBefore(parent, token.chars, beforeElement);\n            }\n            else {\n                this.treeAdapter.insertText(parent, token.chars);\n            }\n        }\n        else {\n            parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.insertText(parent, token.chars);\n        }\n        if (!token.location)\n            return;\n        const siblings = this.treeAdapter.getChildNodes(parent);\n        const textNodeIdx = beforeElement ? siblings.lastIndexOf(beforeElement) : siblings.length;\n        const textNode = siblings[textNodeIdx - 1];\n        //NOTE: if we have a location assigned by another token, then just update the end position\n        const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n        if (tnLoc) {\n            const { endLine, endCol, endOffset } = token.location;\n            this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });\n        }\n        else if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n        }\n    }\n    _adoptNodes(donor, recipient) {\n        for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {\n            this.treeAdapter.detachNode(child);\n            this.treeAdapter.appendChild(recipient, child);\n        }\n    }\n    _setEndLocation(element, closingToken) {\n        if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {\n            const ctLoc = closingToken.location;\n            const tn = this.treeAdapter.getTagName(element);\n            const endLoc = \n            // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n            // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n            closingToken.type === TokenType.END_TAG && tn === closingToken.tagName\n                ? {\n                    endTag: { ...ctLoc },\n                    endLine: ctLoc.endLine,\n                    endCol: ctLoc.endCol,\n                    endOffset: ctLoc.endOffset,\n                }\n                : {\n                    endLine: ctLoc.startLine,\n                    endCol: ctLoc.startCol,\n                    endOffset: ctLoc.startOffset,\n                };\n            this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\n        }\n    }\n    //Token processing\n    shouldProcessStartTagTokenInForeignContent(token) {\n        // Check that neither current === document, or ns === NS.HTML\n        if (!this.currentNotInHTML)\n            return false;\n        let current;\n        let currentTagId;\n        if (this.openElements.stackTop === 0 && this.fragmentContext) {\n            current = this.fragmentContext;\n            currentTagId = this.fragmentContextID;\n        }\n        else {\n            ({ current, currentTagId } = this.openElements);\n        }\n        if (token.tagID === $.SVG &&\n            this.treeAdapter.getTagName(current) === TN.ANNOTATION_XML &&\n            this.treeAdapter.getNamespaceURI(current) === NS.MATHML) {\n            return false;\n        }\n        return (\n        // Check that `current` is not an integration point for HTML or MathML elements.\n        this.tokenizer.inForeignNode ||\n            // If it _is_ an integration point, then we might have to check that it is not an HTML\n            // integration point.\n            ((token.tagID === $.MGLYPH || token.tagID === $.MALIGNMARK) &&\n                !this._isIntegrationPoint(currentTagId, current, NS.HTML)));\n    }\n    _processToken(token) {\n        switch (token.type) {\n            case TokenType.CHARACTER: {\n                this.onCharacter(token);\n                break;\n            }\n            case TokenType.NULL_CHARACTER: {\n                this.onNullCharacter(token);\n                break;\n            }\n            case TokenType.COMMENT: {\n                this.onComment(token);\n                break;\n            }\n            case TokenType.DOCTYPE: {\n                this.onDoctype(token);\n                break;\n            }\n            case TokenType.START_TAG: {\n                this._processStartTag(token);\n                break;\n            }\n            case TokenType.END_TAG: {\n                this.onEndTag(token);\n                break;\n            }\n            case TokenType.EOF: {\n                this.onEof(token);\n                break;\n            }\n            case TokenType.WHITESPACE_CHARACTER: {\n                this.onWhitespaceCharacter(token);\n                break;\n            }\n        }\n    }\n    //Integration points\n    _isIntegrationPoint(tid, element, foreignNS) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        const attrs = this.treeAdapter.getAttrList(element);\n        return foreignContent.isIntegrationPoint(tid, ns, attrs, foreignNS);\n    }\n    //Active formatting elements reconstruction\n    _reconstructActiveFormattingElements() {\n        const listLength = this.activeFormattingElements.entries.length;\n        if (listLength) {\n            const endIndex = this.activeFormattingElements.entries.findIndex((entry) => entry.type === EntryType.Marker || this.openElements.contains(entry.element));\n            const unopenIdx = endIndex < 0 ? listLength - 1 : endIndex - 1;\n            for (let i = unopenIdx; i >= 0; i--) {\n                const entry = this.activeFormattingElements.entries[i];\n                this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));\n                entry.element = this.openElements.current;\n            }\n        }\n    }\n    //Close elements\n    _closeTableCell() {\n        this.openElements.generateImpliedEndTags();\n        this.openElements.popUntilTableCellPopped();\n        this.activeFormattingElements.clearToLastMarker();\n        this.insertionMode = InsertionMode.IN_ROW;\n    }\n    _closePElement() {\n        this.openElements.generateImpliedEndTagsWithExclusion($.P);\n        this.openElements.popUntilTagNamePopped($.P);\n    }\n    //Insertion modes\n    _resetInsertionMode() {\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n            //Insertion mode reset map\n            switch (i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]) {\n                case $.TR: {\n                    this.insertionMode = InsertionMode.IN_ROW;\n                    return;\n                }\n                case $.TBODY:\n                case $.THEAD:\n                case $.TFOOT: {\n                    this.insertionMode = InsertionMode.IN_TABLE_BODY;\n                    return;\n                }\n                case $.CAPTION: {\n                    this.insertionMode = InsertionMode.IN_CAPTION;\n                    return;\n                }\n                case $.COLGROUP: {\n                    this.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n                    return;\n                }\n                case $.TABLE: {\n                    this.insertionMode = InsertionMode.IN_TABLE;\n                    return;\n                }\n                case $.BODY: {\n                    this.insertionMode = InsertionMode.IN_BODY;\n                    return;\n                }\n                case $.FRAMESET: {\n                    this.insertionMode = InsertionMode.IN_FRAMESET;\n                    return;\n                }\n                case $.SELECT: {\n                    this._resetInsertionModeForSelect(i);\n                    return;\n                }\n                case $.TEMPLATE: {\n                    this.insertionMode = this.tmplInsertionModeStack[0];\n                    return;\n                }\n                case $.HTML: {\n                    this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;\n                    return;\n                }\n                case $.TD:\n                case $.TH: {\n                    if (i > 0) {\n                        this.insertionMode = InsertionMode.IN_CELL;\n                        return;\n                    }\n                    break;\n                }\n                case $.HEAD: {\n                    if (i > 0) {\n                        this.insertionMode = InsertionMode.IN_HEAD;\n                        return;\n                    }\n                    break;\n                }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_BODY;\n    }\n    _resetInsertionModeForSelect(selectIdx) {\n        if (selectIdx > 0) {\n            for (let i = selectIdx - 1; i > 0; i--) {\n                const tn = this.openElements.tagIDs[i];\n                if (tn === $.TEMPLATE) {\n                    break;\n                }\n                else if (tn === $.TABLE) {\n                    this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;\n                    return;\n                }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_SELECT;\n    }\n    //Foster parenting\n    _isElementCausesFosterParenting(tn) {\n        return TABLE_STRUCTURE_TAGS.has(tn);\n    }\n    _shouldFosterParentOnInsertion() {\n        return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.currentTagId);\n    }\n    _findFosterParentingLocation() {\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n            const openElement = this.openElements.items[i];\n            switch (this.openElements.tagIDs[i]) {\n                case $.TEMPLATE: {\n                    if (this.treeAdapter.getNamespaceURI(openElement) === NS.HTML) {\n                        return { parent: this.treeAdapter.getTemplateContent(openElement), beforeElement: null };\n                    }\n                    break;\n                }\n                case $.TABLE: {\n                    const parent = this.treeAdapter.getParentNode(openElement);\n                    if (parent) {\n                        return { parent, beforeElement: openElement };\n                    }\n                    return { parent: this.openElements.items[i - 1], beforeElement: null };\n                }\n                default:\n                // Do nothing\n            }\n        }\n        return { parent: this.openElements.items[0], beforeElement: null };\n    }\n    _fosterParentElement(element) {\n        const location = this._findFosterParentingLocation();\n        if (location.beforeElement) {\n            this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);\n        }\n        else {\n            this.treeAdapter.appendChild(location.parent, element);\n        }\n    }\n    //Special elements\n    _isSpecialElement(element, id) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        return SPECIAL_ELEMENTS[ns].has(id);\n    }\n    onCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            characterInForeignContent(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE: {\n                characterInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                characterInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                tokenInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                tokenAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    onNullCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            nullCharacterInForeignContent(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                tokenInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                tokenAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    onComment(token) {\n        this.skipNextNewLine = false;\n        if (this.currentNotInHTML) {\n            appendComment(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL:\n            case InsertionMode.BEFORE_HTML:\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET: {\n                appendComment(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                appendCommentToRootHtmlElement(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                appendCommentToDocument(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    onDoctype(token) {\n        this.skipNextNewLine = false;\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                doctypeInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD: {\n                this._err(token, ERR.misplacedDoctype);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    onStartTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        this._processStartTag(token);\n        if (token.selfClosing && !token.ackSelfClosing) {\n            this._err(token, ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);\n        }\n    }\n    /**\n     * Processes a given start tag.\n     *\n     * `onStartTag` checks if a self-closing tag was recognized. When a token\n     * is moved inbetween multiple insertion modes, this check for self-closing\n     * could lead to false positives. To avoid this, `_processStartTag` is used\n     * for nested calls.\n     *\n     * @param token The token to process.\n     */\n    _processStartTag(token) {\n        if (this.shouldProcessStartTagTokenInForeignContent(token)) {\n            startTagInForeignContent(this, token);\n        }\n        else {\n            this._startTagOutsideForeignContent(token);\n        }\n    }\n    _startTagOutsideForeignContent(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                startTagBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                startTagBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                startTagInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                startTagInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                startTagAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY: {\n                startTagInBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE: {\n                startTagInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_CAPTION: {\n                startTagInCaption(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                startTagInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_BODY: {\n                startTagInTableBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_ROW: {\n                startTagInRow(this, token);\n                break;\n            }\n            case InsertionMode.IN_CELL: {\n                startTagInCell(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT: {\n                startTagInSelect(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                startTagInSelectInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                startTagInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                startTagAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_FRAMESET: {\n                startTagInFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_FRAMESET: {\n                startTagAfterFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                startTagAfterAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                startTagAfterAfterFrameset(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    onEndTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        if (this.currentNotInHTML) {\n            endTagInForeignContent(this, token);\n        }\n        else {\n            this._endTagOutsideForeignContent(token);\n        }\n    }\n    _endTagOutsideForeignContent(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                endTagBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                endTagBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                endTagInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                endTagInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                endTagAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY: {\n                endTagInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                endTagInText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE: {\n                endTagInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_CAPTION: {\n                endTagInCaption(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                endTagInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_BODY: {\n                endTagInTableBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_ROW: {\n                endTagInRow(this, token);\n                break;\n            }\n            case InsertionMode.IN_CELL: {\n                endTagInCell(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT: {\n                endTagInSelect(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                endTagInSelectInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                endTagInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                endTagAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_FRAMESET: {\n                endTagInFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_FRAMESET: {\n                endTagAfterFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    onEof(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                eofInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                eofInText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                eofInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                stopParsing(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    onWhitespaceCharacter(token) {\n        if (this.skipNextNewLine) {\n            this.skipNextNewLine = false;\n            if (token.chars.charCodeAt(0) === unicode.CODE_POINTS.LINE_FEED) {\n                if (token.chars.length === 1) {\n                    return;\n                }\n                token.chars = token.chars.substr(1);\n            }\n        }\n        if (this.tokenizer.inForeignNode) {\n            this._insertCharacters(token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                whitespaceCharacterInBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                whitespaceCharacterInTableText(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n}\n//Adoption agency algorithm\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)\n//------------------------------------------------------------------\n//Steps 5-8 of the algorithm\nfunction aaObtainFormattingElementEntry(p, token) {\n    let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);\n    if (formattingElementEntry) {\n        if (!p.openElements.contains(formattingElementEntry.element)) {\n            p.activeFormattingElements.removeEntry(formattingElementEntry);\n            formattingElementEntry = null;\n        }\n        else if (!p.openElements.hasInScope(token.tagID)) {\n            formattingElementEntry = null;\n        }\n    }\n    else {\n        genericEndTagInBody(p, token);\n    }\n    return formattingElementEntry;\n}\n//Steps 9 and 10 of the algorithm\nfunction aaObtainFurthestBlock(p, formattingElementEntry) {\n    let furthestBlock = null;\n    let idx = p.openElements.stackTop;\n    for (; idx >= 0; idx--) {\n        const element = p.openElements.items[idx];\n        if (element === formattingElementEntry.element) {\n            break;\n        }\n        if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {\n            furthestBlock = element;\n        }\n    }\n    if (!furthestBlock) {\n        p.openElements.shortenToLength(idx < 0 ? 0 : idx);\n        p.activeFormattingElements.removeEntry(formattingElementEntry);\n    }\n    return furthestBlock;\n}\n//Step 13 of the algorithm\nfunction aaInnerLoop(p, furthestBlock, formattingElement) {\n    let lastElement = furthestBlock;\n    let nextElement = p.openElements.getCommonAncestor(furthestBlock);\n    for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {\n        //NOTE: store the next element for the next loop iteration (it may be deleted from the stack by step 9.5)\n        nextElement = p.openElements.getCommonAncestor(element);\n        const elementEntry = p.activeFormattingElements.getElementEntry(element);\n        const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;\n        const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;\n        if (shouldRemoveFromOpenElements) {\n            if (counterOverflow) {\n                p.activeFormattingElements.removeEntry(elementEntry);\n            }\n            p.openElements.remove(element);\n        }\n        else {\n            element = aaRecreateElementFromEntry(p, elementEntry);\n            if (lastElement === furthestBlock) {\n                p.activeFormattingElements.bookmark = elementEntry;\n            }\n            p.treeAdapter.detachNode(lastElement);\n            p.treeAdapter.appendChild(element, lastElement);\n            lastElement = element;\n        }\n    }\n    return lastElement;\n}\n//Step 13.7 of the algorithm\nfunction aaRecreateElementFromEntry(p, elementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);\n    const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);\n    p.openElements.replace(elementEntry.element, newElement);\n    elementEntry.element = newElement;\n    return newElement;\n}\n//Step 14 of the algorithm\nfunction aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {\n    const tn = p.treeAdapter.getTagName(commonAncestor);\n    const tid = getTagID(tn);\n    if (p._isElementCausesFosterParenting(tid)) {\n        p._fosterParentElement(lastElement);\n    }\n    else {\n        const ns = p.treeAdapter.getNamespaceURI(commonAncestor);\n        if (tid === $.TEMPLATE && ns === NS.HTML) {\n            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);\n        }\n        p.treeAdapter.appendChild(commonAncestor, lastElement);\n    }\n}\n//Steps 15-19 of the algorithm\nfunction aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);\n    const { token } = formattingElementEntry;\n    const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);\n    p._adoptNodes(furthestBlock, newElement);\n    p.treeAdapter.appendChild(furthestBlock, newElement);\n    p.activeFormattingElements.insertElementAfterBookmark(newElement, token);\n    p.activeFormattingElements.removeEntry(formattingElementEntry);\n    p.openElements.remove(formattingElementEntry.element);\n    p.openElements.insertAfter(furthestBlock, newElement, token.tagID);\n}\n//Algorithm entry point\nfunction callAdoptionAgency(p, token) {\n    for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {\n        const formattingElementEntry = aaObtainFormattingElementEntry(p, token);\n        if (!formattingElementEntry) {\n            break;\n        }\n        const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);\n        if (!furthestBlock) {\n            break;\n        }\n        p.activeFormattingElements.bookmark = formattingElementEntry;\n        const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);\n        const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);\n        p.treeAdapter.detachNode(lastElement);\n        if (commonAncestor)\n            aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);\n        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);\n    }\n}\n//Generic token handlers\n//------------------------------------------------------------------\nfunction appendComment(p, token) {\n    p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);\n}\nfunction appendCommentToRootHtmlElement(p, token) {\n    p._appendCommentNode(token, p.openElements.items[0]);\n}\nfunction appendCommentToDocument(p, token) {\n    p._appendCommentNode(token, p.document);\n}\nfunction stopParsing(p, token) {\n    p.stopped = true;\n    // NOTE: Set end locations for elements that remain on the open element stack.\n    if (token.location) {\n        // NOTE: If we are not in a fragment, `html` and `body` will stay on the stack.\n        // This is a problem, as we might overwrite their end position here.\n        const target = p.fragmentContext ? 0 : 2;\n        for (let i = p.openElements.stackTop; i >= target; i--) {\n            p._setEndLocation(p.openElements.items[i], token);\n        }\n        // Handle `html` and `body`\n        if (!p.fragmentContext && p.openElements.stackTop >= 0) {\n            const htmlElement = p.openElements.items[0];\n            const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);\n            if (htmlLocation && !htmlLocation.endTag) {\n                p._setEndLocation(htmlElement, token);\n                if (p.openElements.stackTop >= 1) {\n                    const bodyElement = p.openElements.items[1];\n                    const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);\n                    if (bodyLocation && !bodyLocation.endTag) {\n                        p._setEndLocation(bodyElement, token);\n                    }\n                }\n            }\n        }\n    }\n}\n// The \"initial\" insertion mode\n//------------------------------------------------------------------\nfunction doctypeInInitialMode(p, token) {\n    p._setDocumentType(token);\n    const mode = token.forceQuirks ? DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);\n    if (!doctype.isConforming(token)) {\n        p._err(token, ERR.nonConformingDoctype);\n    }\n    p.treeAdapter.setDocumentMode(p.document, mode);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n}\nfunction tokenInInitialMode(p, token) {\n    p._err(token, ERR.missingDoctype, true);\n    p.treeAdapter.setDocumentMode(p.document, DOCUMENT_MODE.QUIRKS);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n    p._processToken(token);\n}\n// The \"before html\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHtml(p, token) {\n    if (token.tagID === $.HTML) {\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = InsertionMode.BEFORE_HEAD;\n    }\n    else {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction endTagBeforeHtml(p, token) {\n    const tn = token.tagID;\n    if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction tokenBeforeHtml(p, token) {\n    p._insertFakeRootElement();\n    p.insertionMode = InsertionMode.BEFORE_HEAD;\n    p._processToken(token);\n}\n// The \"before head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.HEAD: {\n            p._insertElement(token, NS.HTML);\n            p.headElement = p.openElements.current;\n            p.insertionMode = InsertionMode.IN_HEAD;\n            break;\n        }\n        default: {\n            tokenBeforeHead(p, token);\n        }\n    }\n}\nfunction endTagBeforeHead(p, token) {\n    const tn = token.tagID;\n    if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {\n        tokenBeforeHead(p, token);\n    }\n    else {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenBeforeHead(p, token) {\n    p._insertFakeElement(TN.HEAD, $.HEAD);\n    p.headElement = p.openElements.current;\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"in head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.TITLE: {\n            p._switchToTextParsing(token, TokenizerMode.RCDATA);\n            break;\n        }\n        case $.NOSCRIPT: {\n            if (p.options.scriptingEnabled) {\n                p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n            }\n            else {\n                p._insertElement(token, NS.HTML);\n                p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;\n            }\n            break;\n        }\n        case $.NOFRAMES:\n        case $.STYLE: {\n            p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n            break;\n        }\n        case $.SCRIPT: {\n            p._switchToTextParsing(token, TokenizerMode.SCRIPT_DATA);\n            break;\n        }\n        case $.TEMPLATE: {\n            p._insertTemplate(token);\n            p.activeFormattingElements.insertMarker();\n            p.framesetOk = false;\n            p.insertionMode = InsertionMode.IN_TEMPLATE;\n            p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n            break;\n        }\n        case $.HEAD: {\n            p._err(token, ERR.misplacedStartTagForHeadElement);\n            break;\n        }\n        default: {\n            tokenInHead(p, token);\n        }\n    }\n}\nfunction endTagInHead(p, token) {\n    switch (token.tagID) {\n        case $.HEAD: {\n            p.openElements.pop();\n            p.insertionMode = InsertionMode.AFTER_HEAD;\n            break;\n        }\n        case $.BODY:\n        case $.BR:\n        case $.HTML: {\n            tokenInHead(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction templateEndTagInHead(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.generateImpliedEndTagsThoroughly();\n        if (p.openElements.currentTagId !== $.TEMPLATE) {\n            p._err(token, ERR.closingOfElementWithOpenChildElements);\n        }\n        p.openElements.popUntilTagNamePopped($.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n    }\n    else {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenInHead(p, token) {\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.AFTER_HEAD;\n    p._processToken(token);\n}\n// The \"in head no script\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHeadNoScript(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.HEAD:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.STYLE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.NOSCRIPT: {\n            p._err(token, ERR.nestedNoscriptInHead);\n            break;\n        }\n        default: {\n            tokenInHeadNoScript(p, token);\n        }\n    }\n}\nfunction endTagInHeadNoScript(p, token) {\n    switch (token.tagID) {\n        case $.NOSCRIPT: {\n            p.openElements.pop();\n            p.insertionMode = InsertionMode.IN_HEAD;\n            break;\n        }\n        case $.BR: {\n            tokenInHeadNoScript(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction tokenInHeadNoScript(p, token) {\n    const errCode = token.type === TokenType.EOF ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;\n    p._err(token, errCode);\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"after head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BODY: {\n            p._insertElement(token, NS.HTML);\n            p.framesetOk = false;\n            p.insertionMode = InsertionMode.IN_BODY;\n            break;\n        }\n        case $.FRAMESET: {\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_FRAMESET;\n            break;\n        }\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.SCRIPT:\n        case $.STYLE:\n        case $.TEMPLATE:\n        case $.TITLE: {\n            p._err(token, ERR.abandonedHeadElementChild);\n            p.openElements.push(p.headElement, $.HEAD);\n            startTagInHead(p, token);\n            p.openElements.remove(p.headElement);\n            break;\n        }\n        case $.HEAD: {\n            p._err(token, ERR.misplacedStartTagForHeadElement);\n            break;\n        }\n        default: {\n            tokenAfterHead(p, token);\n        }\n    }\n}\nfunction endTagAfterHead(p, token) {\n    switch (token.tagID) {\n        case $.BODY:\n        case $.HTML:\n        case $.BR: {\n            tokenAfterHead(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction tokenAfterHead(p, token) {\n    p._insertFakeElement(TN.BODY, $.BODY);\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in body\" insertion mode\n//------------------------------------------------------------------\nfunction modeInBody(p, token) {\n    switch (token.type) {\n        case TokenType.CHARACTER: {\n            characterInBody(p, token);\n            break;\n        }\n        case TokenType.WHITESPACE_CHARACTER: {\n            whitespaceCharacterInBody(p, token);\n            break;\n        }\n        case TokenType.COMMENT: {\n            appendComment(p, token);\n            break;\n        }\n        case TokenType.START_TAG: {\n            startTagInBody(p, token);\n            break;\n        }\n        case TokenType.END_TAG: {\n            endTagInBody(p, token);\n            break;\n        }\n        case TokenType.EOF: {\n            eofInBody(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction whitespaceCharacterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n}\nfunction characterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction htmlStartTagInBody(p, token) {\n    if (p.openElements.tmplCount === 0) {\n        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);\n    }\n}\nfunction bodyStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (bodyElement && p.openElements.tmplCount === 0) {\n        p.framesetOk = false;\n        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);\n    }\n}\nfunction framesetStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (p.framesetOk && bodyElement) {\n        p.treeAdapter.detachNode(bodyElement);\n        p.openElements.popAllUpToHtmlElement();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = InsertionMode.IN_FRAMESET;\n    }\n}\nfunction addressStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction numberedHeaderStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    if (isNumberedHeader(p.openElements.currentTagId)) {\n        p.openElements.pop();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction preStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.framesetOk = false;\n}\nfunction formStartTagInBody(p, token) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    if (!p.formElement || inTemplate) {\n        if (p.openElements.hasInButtonScope($.P)) {\n            p._closePElement();\n        }\n        p._insertElement(token, NS.HTML);\n        if (!inTemplate) {\n            p.formElement = p.openElements.current;\n        }\n    }\n}\nfunction listItemStartTagInBody(p, token) {\n    p.framesetOk = false;\n    const tn = token.tagID;\n    for (let i = p.openElements.stackTop; i >= 0; i--) {\n        const elementId = p.openElements.tagIDs[i];\n        if ((tn === $.LI && elementId === $.LI) ||\n            ((tn === $.DD || tn === $.DT) && (elementId === $.DD || elementId === $.DT))) {\n            p.openElements.generateImpliedEndTagsWithExclusion(elementId);\n            p.openElements.popUntilTagNamePopped(elementId);\n            break;\n        }\n        if (elementId !== $.ADDRESS &&\n            elementId !== $.DIV &&\n            elementId !== $.P &&\n            p._isSpecialElement(p.openElements.items[i], elementId)) {\n            break;\n        }\n    }\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction plaintextStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    p.tokenizer.state = TokenizerMode.PLAINTEXT;\n}\nfunction buttonStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BUTTON)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped($.BUTTON);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n}\nfunction aStartTagInBody(p, token) {\n    const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(TN.A);\n    if (activeElementEntry) {\n        callAdoptionAgency(p, token);\n        p.openElements.remove(activeElementEntry.element);\n        p.activeFormattingElements.removeEntry(activeElementEntry);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction bStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction nobrStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    if (p.openElements.hasInScope($.NOBR)) {\n        callAdoptionAgency(p, token);\n        p._reconstructActiveFormattingElements();\n    }\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction appletStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.insertMarker();\n    p.framesetOk = false;\n}\nfunction tableStartTagInBody(p, token) {\n    if (p.treeAdapter.getDocumentMode(p.document) !== DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.IN_TABLE;\n}\nfunction areaStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction isHiddenInput(token) {\n    const inputType = getTokenAttr(token, ATTRS.TYPE);\n    return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;\n}\nfunction inputStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n    if (!isHiddenInput(token)) {\n        p.framesetOk = false;\n    }\n    token.ackSelfClosing = true;\n}\nfunction paramStartTagInBody(p, token) {\n    p._appendElement(token, NS.HTML);\n    token.ackSelfClosing = true;\n}\nfunction hrStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction imageStartTagInBody(p, token) {\n    token.tagName = TN.IMG;\n    token.tagID = $.IMG;\n    areaStartTagInBody(p, token);\n}\nfunction textareaStartTagInBody(p, token) {\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.tokenizer.state = TokenizerMode.RCDATA;\n    p.originalInsertionMode = p.insertionMode;\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.TEXT;\n}\nfunction xmpStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._reconstructActiveFormattingElements();\n    p.framesetOk = false;\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\nfunction iframeStartTagInBody(p, token) {\n    p.framesetOk = false;\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\n//NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse\n//<noembed> as rawtext.\nfunction noembedStartTagInBody(p, token) {\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\nfunction selectStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode =\n        p.insertionMode === InsertionMode.IN_TABLE ||\n            p.insertionMode === InsertionMode.IN_CAPTION ||\n            p.insertionMode === InsertionMode.IN_TABLE_BODY ||\n            p.insertionMode === InsertionMode.IN_ROW ||\n            p.insertionMode === InsertionMode.IN_CELL\n            ? InsertionMode.IN_SELECT_IN_TABLE\n            : InsertionMode.IN_SELECT;\n}\nfunction optgroupStartTagInBody(p, token) {\n    if (p.openElements.currentTagId === $.OPTION) {\n        p.openElements.pop();\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\nfunction rbStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTags();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction rtStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.RTC);\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction mathStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenMathMLAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, NS.MATHML);\n    }\n    else {\n        p._insertElement(token, NS.MATHML);\n    }\n    token.ackSelfClosing = true;\n}\nfunction svgStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenSVGAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, NS.SVG);\n    }\n    else {\n        p._insertElement(token, NS.SVG);\n    }\n    token.ackSelfClosing = true;\n}\nfunction genericStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\nfunction startTagInBody(p, token) {\n    switch (token.tagID) {\n        case $.I:\n        case $.S:\n        case $.B:\n        case $.U:\n        case $.EM:\n        case $.TT:\n        case $.BIG:\n        case $.CODE:\n        case $.FONT:\n        case $.SMALL:\n        case $.STRIKE:\n        case $.STRONG: {\n            bStartTagInBody(p, token);\n            break;\n        }\n        case $.A: {\n            aStartTagInBody(p, token);\n            break;\n        }\n        case $.H1:\n        case $.H2:\n        case $.H3:\n        case $.H4:\n        case $.H5:\n        case $.H6: {\n            numberedHeaderStartTagInBody(p, token);\n            break;\n        }\n        case $.P:\n        case $.DL:\n        case $.OL:\n        case $.UL:\n        case $.DIV:\n        case $.DIR:\n        case $.NAV:\n        case $.MAIN:\n        case $.MENU:\n        case $.ASIDE:\n        case $.CENTER:\n        case $.FIGURE:\n        case $.FOOTER:\n        case $.HEADER:\n        case $.HGROUP:\n        case $.DIALOG:\n        case $.DETAILS:\n        case $.ADDRESS:\n        case $.ARTICLE:\n        case $.SECTION:\n        case $.SUMMARY:\n        case $.FIELDSET:\n        case $.BLOCKQUOTE:\n        case $.FIGCAPTION: {\n            addressStartTagInBody(p, token);\n            break;\n        }\n        case $.LI:\n        case $.DD:\n        case $.DT: {\n            listItemStartTagInBody(p, token);\n            break;\n        }\n        case $.BR:\n        case $.IMG:\n        case $.WBR:\n        case $.AREA:\n        case $.EMBED:\n        case $.KEYGEN: {\n            areaStartTagInBody(p, token);\n            break;\n        }\n        case $.HR: {\n            hrStartTagInBody(p, token);\n            break;\n        }\n        case $.RB:\n        case $.RTC: {\n            rbStartTagInBody(p, token);\n            break;\n        }\n        case $.RT:\n        case $.RP: {\n            rtStartTagInBody(p, token);\n            break;\n        }\n        case $.PRE:\n        case $.LISTING: {\n            preStartTagInBody(p, token);\n            break;\n        }\n        case $.XMP: {\n            xmpStartTagInBody(p, token);\n            break;\n        }\n        case $.SVG: {\n            svgStartTagInBody(p, token);\n            break;\n        }\n        case $.HTML: {\n            htmlStartTagInBody(p, token);\n            break;\n        }\n        case $.BASE:\n        case $.LINK:\n        case $.META:\n        case $.STYLE:\n        case $.TITLE:\n        case $.SCRIPT:\n        case $.BGSOUND:\n        case $.BASEFONT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.BODY: {\n            bodyStartTagInBody(p, token);\n            break;\n        }\n        case $.FORM: {\n            formStartTagInBody(p, token);\n            break;\n        }\n        case $.NOBR: {\n            nobrStartTagInBody(p, token);\n            break;\n        }\n        case $.MATH: {\n            mathStartTagInBody(p, token);\n            break;\n        }\n        case $.TABLE: {\n            tableStartTagInBody(p, token);\n            break;\n        }\n        case $.INPUT: {\n            inputStartTagInBody(p, token);\n            break;\n        }\n        case $.PARAM:\n        case $.TRACK:\n        case $.SOURCE: {\n            paramStartTagInBody(p, token);\n            break;\n        }\n        case $.IMAGE: {\n            imageStartTagInBody(p, token);\n            break;\n        }\n        case $.BUTTON: {\n            buttonStartTagInBody(p, token);\n            break;\n        }\n        case $.APPLET:\n        case $.OBJECT:\n        case $.MARQUEE: {\n            appletStartTagInBody(p, token);\n            break;\n        }\n        case $.IFRAME: {\n            iframeStartTagInBody(p, token);\n            break;\n        }\n        case $.SELECT: {\n            selectStartTagInBody(p, token);\n            break;\n        }\n        case $.OPTION:\n        case $.OPTGROUP: {\n            optgroupStartTagInBody(p, token);\n            break;\n        }\n        case $.NOEMBED: {\n            noembedStartTagInBody(p, token);\n            break;\n        }\n        case $.FRAMESET: {\n            framesetStartTagInBody(p, token);\n            break;\n        }\n        case $.TEXTAREA: {\n            textareaStartTagInBody(p, token);\n            break;\n        }\n        case $.NOSCRIPT: {\n            if (p.options.scriptingEnabled) {\n                noembedStartTagInBody(p, token);\n            }\n            else {\n                genericStartTagInBody(p, token);\n            }\n            break;\n        }\n        case $.PLAINTEXT: {\n            plaintextStartTagInBody(p, token);\n            break;\n        }\n        case $.COL:\n        case $.TH:\n        case $.TD:\n        case $.TR:\n        case $.HEAD:\n        case $.FRAME:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.CAPTION:\n        case $.COLGROUP: {\n            // Ignore token\n            break;\n        }\n        default: {\n            genericStartTagInBody(p, token);\n        }\n    }\n}\nfunction bodyEndTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        //NOTE: <body> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo) {\n            const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n            if (bodyElement) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    }\n}\nfunction htmlEndTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        endTagAfterBody(p, token);\n    }\n}\nfunction addressEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction formEndTagInBody(p) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    const { formElement } = p;\n    if (!inTemplate) {\n        p.formElement = null;\n    }\n    if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {\n        p.openElements.generateImpliedEndTags();\n        if (inTemplate) {\n            p.openElements.popUntilTagNamePopped($.FORM);\n        }\n        else if (formElement) {\n            p.openElements.remove(formElement);\n        }\n    }\n}\nfunction pEndTagInBody(p) {\n    if (!p.openElements.hasInButtonScope($.P)) {\n        p._insertFakeElement(TN.P, $.P);\n    }\n    p._closePElement();\n}\nfunction liEndTagInBody(p) {\n    if (p.openElements.hasInListItemScope($.LI)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.LI);\n        p.openElements.popUntilTagNamePopped($.LI);\n    }\n}\nfunction ddEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTagsWithExclusion(tn);\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction numberedHeaderEndTagInBody(p) {\n    if (p.openElements.hasNumberedHeaderInScope()) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilNumberedHeaderPopped();\n    }\n}\nfunction appletEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n        p.activeFormattingElements.clearToLastMarker();\n    }\n}\nfunction brEndTagInBody(p) {\n    p._reconstructActiveFormattingElements();\n    p._insertFakeElement(TN.BR, $.BR);\n    p.openElements.pop();\n    p.framesetOk = false;\n}\nfunction genericEndTagInBody(p, token) {\n    const tn = token.tagName;\n    const tid = token.tagID;\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n        const elementId = p.openElements.tagIDs[i];\n        // Compare the tag name here, as the tag might not be a known tag with an ID.\n        if (tid === elementId && (tid !== $.UNKNOWN || p.treeAdapter.getTagName(element) === tn)) {\n            p.openElements.generateImpliedEndTagsWithExclusion(tid);\n            if (p.openElements.stackTop >= i)\n                p.openElements.shortenToLength(i);\n            break;\n        }\n        if (p._isSpecialElement(element, elementId)) {\n            break;\n        }\n    }\n}\nfunction endTagInBody(p, token) {\n    switch (token.tagID) {\n        case $.A:\n        case $.B:\n        case $.I:\n        case $.S:\n        case $.U:\n        case $.EM:\n        case $.TT:\n        case $.BIG:\n        case $.CODE:\n        case $.FONT:\n        case $.NOBR:\n        case $.SMALL:\n        case $.STRIKE:\n        case $.STRONG: {\n            callAdoptionAgency(p, token);\n            break;\n        }\n        case $.P: {\n            pEndTagInBody(p);\n            break;\n        }\n        case $.DL:\n        case $.UL:\n        case $.OL:\n        case $.DIR:\n        case $.DIV:\n        case $.NAV:\n        case $.PRE:\n        case $.MAIN:\n        case $.MENU:\n        case $.ASIDE:\n        case $.BUTTON:\n        case $.CENTER:\n        case $.FIGURE:\n        case $.FOOTER:\n        case $.HEADER:\n        case $.HGROUP:\n        case $.DIALOG:\n        case $.ADDRESS:\n        case $.ARTICLE:\n        case $.DETAILS:\n        case $.SECTION:\n        case $.SUMMARY:\n        case $.LISTING:\n        case $.FIELDSET:\n        case $.BLOCKQUOTE:\n        case $.FIGCAPTION: {\n            addressEndTagInBody(p, token);\n            break;\n        }\n        case $.LI: {\n            liEndTagInBody(p);\n            break;\n        }\n        case $.DD:\n        case $.DT: {\n            ddEndTagInBody(p, token);\n            break;\n        }\n        case $.H1:\n        case $.H2:\n        case $.H3:\n        case $.H4:\n        case $.H5:\n        case $.H6: {\n            numberedHeaderEndTagInBody(p);\n            break;\n        }\n        case $.BR: {\n            brEndTagInBody(p);\n            break;\n        }\n        case $.BODY: {\n            bodyEndTagInBody(p, token);\n            break;\n        }\n        case $.HTML: {\n            htmlEndTagInBody(p, token);\n            break;\n        }\n        case $.FORM: {\n            formEndTagInBody(p);\n            break;\n        }\n        case $.APPLET:\n        case $.OBJECT:\n        case $.MARQUEE: {\n            appletEndTagInBody(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            genericEndTagInBody(p, token);\n        }\n    }\n}\nfunction eofInBody(p, token) {\n    if (p.tmplInsertionModeStack.length > 0) {\n        eofInTemplate(p, token);\n    }\n    else {\n        stopParsing(p, token);\n    }\n}\n// The \"text\" insertion mode\n//------------------------------------------------------------------\nfunction endTagInText(p, token) {\n    var _a;\n    if (token.tagID === $.SCRIPT) {\n        (_a = p.scriptHandler) === null || _a === void 0 ? void 0 : _a.call(p, p.openElements.current);\n    }\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n}\nfunction eofInText(p, token) {\n    p._err(token, ERR.eofInElementThatCanContainOnlyText);\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n    p.onEof(token);\n}\n// The \"in table\" insertion mode\n//------------------------------------------------------------------\nfunction characterInTable(p, token) {\n    if (TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {\n        p.pendingCharacterTokens.length = 0;\n        p.hasNonWhitespacePendingCharacterToken = false;\n        p.originalInsertionMode = p.insertionMode;\n        p.insertionMode = InsertionMode.IN_TABLE_TEXT;\n        switch (token.type) {\n            case TokenType.CHARACTER: {\n                characterInTableText(p, token);\n                break;\n            }\n            case TokenType.WHITESPACE_CHARACTER: {\n                whitespaceCharacterInTableText(p, token);\n                break;\n            }\n            // Ignore null\n        }\n    }\n    else {\n        tokenInTable(p, token);\n    }\n}\nfunction captionStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p.activeFormattingElements.insertMarker();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_CAPTION;\n}\nfunction colgroupStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n}\nfunction colStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(TN.COLGROUP, $.COLGROUP);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n    startTagInColumnGroup(p, token);\n}\nfunction tbodyStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n}\nfunction tdStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(TN.TBODY, $.TBODY);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n    startTagInTableBody(p, token);\n}\nfunction tableStartTagInTable(p, token) {\n    if (p.openElements.hasInTableScope($.TABLE)) {\n        p.openElements.popUntilTagNamePopped($.TABLE);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    }\n}\nfunction inputStartTagInTable(p, token) {\n    if (isHiddenInput(token)) {\n        p._appendElement(token, NS.HTML);\n    }\n    else {\n        tokenInTable(p, token);\n    }\n    token.ackSelfClosing = true;\n}\nfunction formStartTagInTable(p, token) {\n    if (!p.formElement && p.openElements.tmplCount === 0) {\n        p._insertElement(token, NS.HTML);\n        p.formElement = p.openElements.current;\n        p.openElements.pop();\n    }\n}\nfunction startTagInTable(p, token) {\n    switch (token.tagID) {\n        case $.TD:\n        case $.TH:\n        case $.TR: {\n            tdStartTagInTable(p, token);\n            break;\n        }\n        case $.STYLE:\n        case $.SCRIPT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.COL: {\n            colStartTagInTable(p, token);\n            break;\n        }\n        case $.FORM: {\n            formStartTagInTable(p, token);\n            break;\n        }\n        case $.TABLE: {\n            tableStartTagInTable(p, token);\n            break;\n        }\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            tbodyStartTagInTable(p, token);\n            break;\n        }\n        case $.INPUT: {\n            inputStartTagInTable(p, token);\n            break;\n        }\n        case $.CAPTION: {\n            captionStartTagInTable(p, token);\n            break;\n        }\n        case $.COLGROUP: {\n            colgroupStartTagInTable(p, token);\n            break;\n        }\n        default: {\n            tokenInTable(p, token);\n        }\n    }\n}\nfunction endTagInTable(p, token) {\n    switch (token.tagID) {\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.TABLE)) {\n                p.openElements.popUntilTagNamePopped($.TABLE);\n                p._resetInsertionMode();\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TBODY:\n        case $.TD:\n        case $.TFOOT:\n        case $.TH:\n        case $.THEAD:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            tokenInTable(p, token);\n        }\n    }\n}\nfunction tokenInTable(p, token) {\n    const savedFosterParentingState = p.fosterParentingEnabled;\n    p.fosterParentingEnabled = true;\n    // Process token in `In Body` mode\n    modeInBody(p, token);\n    p.fosterParentingEnabled = savedFosterParentingState;\n}\n// The \"in table text\" insertion mode\n//------------------------------------------------------------------\nfunction whitespaceCharacterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n}\nfunction characterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n    p.hasNonWhitespacePendingCharacterToken = true;\n}\nfunction tokenInTableText(p, token) {\n    let i = 0;\n    if (p.hasNonWhitespacePendingCharacterToken) {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            tokenInTable(p, p.pendingCharacterTokens[i]);\n        }\n    }\n    else {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            p._insertCharacters(p.pendingCharacterTokens[i]);\n        }\n    }\n    p.insertionMode = p.originalInsertionMode;\n    p._processToken(token);\n}\n// The \"in caption\" insertion mode\n//------------------------------------------------------------------\nconst TABLE_VOID_ELEMENTS = new Set([$.CAPTION, $.COL, $.COLGROUP, $.TBODY, $.TD, $.TFOOT, $.TH, $.THEAD, $.TR]);\nfunction startTagInCaption(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope($.CAPTION)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped($.CAPTION);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = InsertionMode.IN_TABLE;\n            startTagInTable(p, token);\n        }\n    }\n    else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCaption(p, token) {\n    const tn = token.tagID;\n    switch (tn) {\n        case $.CAPTION:\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.CAPTION)) {\n                p.openElements.generateImpliedEndTags();\n                p.openElements.popUntilTagNamePopped($.CAPTION);\n                p.activeFormattingElements.clearToLastMarker();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                if (tn === $.TABLE) {\n                    endTagInTable(p, token);\n                }\n            }\n            break;\n        }\n        case $.BODY:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TBODY:\n        case $.TD:\n        case $.TFOOT:\n        case $.TH:\n        case $.THEAD:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInBody(p, token);\n        }\n    }\n}\n// The \"in column group\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInColumnGroup(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.COL: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        default: {\n            tokenInColumnGroup(p, token);\n        }\n    }\n}\nfunction endTagInColumnGroup(p, token) {\n    switch (token.tagID) {\n        case $.COLGROUP: {\n            if (p.openElements.currentTagId === $.COLGROUP) {\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        case $.COL: {\n            // Ignore token\n            break;\n        }\n        default: {\n            tokenInColumnGroup(p, token);\n        }\n    }\n}\nfunction tokenInColumnGroup(p, token) {\n    if (p.openElements.currentTagId === $.COLGROUP) {\n        p.openElements.pop();\n        p.insertionMode = InsertionMode.IN_TABLE;\n        p._processToken(token);\n    }\n}\n// The \"in table body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTableBody(p, token) {\n    switch (token.tagID) {\n        case $.TR: {\n            p.openElements.clearBackToTableBodyContext();\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_ROW;\n            break;\n        }\n        case $.TH:\n        case $.TD: {\n            p.openElements.clearBackToTableBodyContext();\n            p._insertFakeElement(TN.TR, $.TR);\n            p.insertionMode = InsertionMode.IN_ROW;\n            startTagInRow(p, token);\n            break;\n        }\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasTableBodyContextInTableScope()) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                startTagInTable(p, token);\n            }\n            break;\n        }\n        default: {\n            startTagInTable(p, token);\n        }\n    }\n}\nfunction endTagInTableBody(p, token) {\n    const tn = token.tagID;\n    switch (token.tagID) {\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n            }\n            break;\n        }\n        case $.TABLE: {\n            if (p.openElements.hasTableBodyContextInTableScope()) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                endTagInTable(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TD:\n        case $.TH:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInTable(p, token);\n        }\n    }\n}\n// The \"in row\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInRow(p, token) {\n    switch (token.tagID) {\n        case $.TH:\n        case $.TD: {\n            p.openElements.clearBackToTableRowContext();\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_CELL;\n            p.activeFormattingElements.insertMarker();\n            break;\n        }\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.TR: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                startTagInTableBody(p, token);\n            }\n            break;\n        }\n        default: {\n            startTagInTable(p, token);\n        }\n    }\n}\nfunction endTagInRow(p, token) {\n    switch (token.tagID) {\n        case $.TR: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n            }\n            break;\n        }\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                endTagInTableBody(p, token);\n            }\n            break;\n        }\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                endTagInTableBody(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TD:\n        case $.TH: {\n            // Ignore end tag\n            break;\n        }\n        default: {\n            endTagInTable(p, token);\n        }\n    }\n}\n// The \"in cell\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInCell(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {\n            p._closeTableCell();\n            startTagInRow(p, token);\n        }\n    }\n    else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCell(p, token) {\n    const tn = token.tagID;\n    switch (tn) {\n        case $.TD:\n        case $.TH: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p.openElements.generateImpliedEndTags();\n                p.openElements.popUntilTagNamePopped(tn);\n                p.activeFormattingElements.clearToLastMarker();\n                p.insertionMode = InsertionMode.IN_ROW;\n            }\n            break;\n        }\n        case $.TABLE:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.TR: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p._closeTableCell();\n                endTagInRow(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInBody(p, token);\n        }\n    }\n}\n// The \"in select\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelect(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.OPTION: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.OPTGROUP: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.INPUT:\n        case $.KEYGEN:\n        case $.TEXTAREA:\n        case $.SELECT: {\n            if (p.openElements.hasInSelectScope($.SELECT)) {\n                p.openElements.popUntilTagNamePopped($.SELECT);\n                p._resetInsertionMode();\n                if (token.tagID !== $.SELECT) {\n                    p._processStartTag(token);\n                }\n            }\n            break;\n        }\n        case $.SCRIPT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagInSelect(p, token) {\n    switch (token.tagID) {\n        case $.OPTGROUP: {\n            if (p.openElements.stackTop > 0 &&\n                p.openElements.currentTagId === $.OPTION &&\n                p.openElements.tagIDs[p.openElements.stackTop - 1] === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            break;\n        }\n        case $.OPTION: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            break;\n        }\n        case $.SELECT: {\n            if (p.openElements.hasInSelectScope($.SELECT)) {\n                p.openElements.popUntilTagNamePopped($.SELECT);\n                p._resetInsertionMode();\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\n// The \"in select in table\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH) {\n        p.openElements.popUntilTagNamePopped($.SELECT);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    }\n    else {\n        startTagInSelect(p, token);\n    }\n}\nfunction endTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.popUntilTagNamePopped($.SELECT);\n            p._resetInsertionMode();\n            p.onEndTag(token);\n        }\n    }\n    else {\n        endTagInSelect(p, token);\n    }\n}\n// The \"in template\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTemplate(p, token) {\n    switch (token.tagID) {\n        // First, handle tags that can start without a mode change\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.SCRIPT:\n        case $.STYLE:\n        case $.TEMPLATE:\n        case $.TITLE: {\n            startTagInHead(p, token);\n            break;\n        }\n        // Re-process the token in the appropriate mode\n        case $.CAPTION:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;\n            p.insertionMode = InsertionMode.IN_TABLE;\n            startTagInTable(p, token);\n            break;\n        }\n        case $.COL: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;\n            p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n            startTagInColumnGroup(p, token);\n            break;\n        }\n        case $.TR: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;\n            p.insertionMode = InsertionMode.IN_TABLE_BODY;\n            startTagInTableBody(p, token);\n            break;\n        }\n        case $.TD:\n        case $.TH: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;\n            p.insertionMode = InsertionMode.IN_ROW;\n            startTagInRow(p, token);\n            break;\n        }\n        default: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;\n            p.insertionMode = InsertionMode.IN_BODY;\n            startTagInBody(p, token);\n        }\n    }\n}\nfunction endTagInTemplate(p, token) {\n    if (token.tagID === $.TEMPLATE) {\n        templateEndTagInHead(p, token);\n    }\n}\nfunction eofInTemplate(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.popUntilTagNamePopped($.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n        p.onEof(token);\n    }\n    else {\n        stopParsing(p, token);\n    }\n}\n// The \"after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterBody(p, token) {\n    if (token.tagID === $.HTML) {\n        startTagInBody(p, token);\n    }\n    else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction endTagAfterBody(p, token) {\n    var _a;\n    if (token.tagID === $.HTML) {\n        if (!p.fragmentContext) {\n            p.insertionMode = InsertionMode.AFTER_AFTER_BODY;\n        }\n        //NOTE: <html> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === $.HTML) {\n            p._setEndLocation(p.openElements.items[0], token);\n            // Update the body element, if it doesn't have an end tag\n            const bodyElement = p.openElements.items[1];\n            if (bodyElement && !((_a = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a === void 0 ? void 0 : _a.endTag)) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    }\n    else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction tokenAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.FRAMESET: {\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.FRAME: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagInFrameset(p, token) {\n    if (token.tagID === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {\n        p.openElements.pop();\n        if (!p.fragmentContext && p.openElements.currentTagId !== $.FRAMESET) {\n            p.insertionMode = InsertionMode.AFTER_FRAMESET;\n        }\n    }\n}\n// The \"after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagAfterFrameset(p, token) {\n    if (token.tagID === $.HTML) {\n        p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;\n    }\n}\n// The \"after after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterBody(p, token) {\n    if (token.tagID === $.HTML) {\n        startTagInBody(p, token);\n    }\n    else {\n        tokenAfterAfterBody(p, token);\n    }\n}\nfunction tokenAfterAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"after after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\n// The rules for parsing tokens in foreign content\n//------------------------------------------------------------------\nfunction nullCharacterInForeignContent(p, token) {\n    token.chars = unicode.REPLACEMENT_CHARACTER;\n    p._insertCharacters(token);\n}\nfunction characterInForeignContent(p, token) {\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction popUntilHtmlOrIntegrationPoint(p) {\n    while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&\n        !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)) {\n        p.openElements.pop();\n    }\n}\nfunction startTagInForeignContent(p, token) {\n    if (foreignContent.causesExit(token)) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._startTagOutsideForeignContent(token);\n    }\n    else {\n        const current = p._getAdjustedCurrentElement();\n        const currentNs = p.treeAdapter.getNamespaceURI(current);\n        if (currentNs === NS.MATHML) {\n            foreignContent.adjustTokenMathMLAttrs(token);\n        }\n        else if (currentNs === NS.SVG) {\n            foreignContent.adjustTokenSVGTagName(token);\n            foreignContent.adjustTokenSVGAttrs(token);\n        }\n        foreignContent.adjustTokenXMLAttrs(token);\n        if (token.selfClosing) {\n            p._appendElement(token, currentNs);\n        }\n        else {\n            p._insertElement(token, currentNs);\n        }\n        token.ackSelfClosing = true;\n    }\n}\nfunction endTagInForeignContent(p, token) {\n    if (token.tagID === $.P || token.tagID === $.BR) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._endTagOutsideForeignContent(token);\n        return;\n    }\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n        if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {\n            p._endTagOutsideForeignContent(token);\n            break;\n        }\n        const tagName = p.treeAdapter.getTagName(element);\n        if (tagName.toLowerCase() === token.tagName) {\n            //NOTE: update the token tag name for `_setEndLocation`.\n            token.tagName = tagName;\n            p.openElements.shortenToLength(i);\n            break;\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","export const xmlReplacer = /[\"&'<>$\\x80-\\uFFFF]/g;\nconst xmlCodeMap = new Map([\n    [34, \"&quot;\"],\n    [38, \"&amp;\"],\n    [39, \"&apos;\"],\n    [60, \"&lt;\"],\n    [62, \"&gt;\"],\n]);\n// For compatibility with node < 4, we wrap `codePointAt`\nexport const getCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt != null\n    ? (str, index) => str.codePointAt(index)\n    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        (c, index) => (c.charCodeAt(index) & 0xfc00) === 0xd800\n            ? (c.charCodeAt(index) - 0xd800) * 0x400 +\n                c.charCodeAt(index + 1) -\n                0xdc00 +\n                0x10000\n            : c.charCodeAt(index);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using XML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexport function encodeXML(str) {\n    let ret = \"\";\n    let lastIdx = 0;\n    let match;\n    while ((match = xmlReplacer.exec(str)) !== null) {\n        const i = match.index;\n        const char = str.charCodeAt(i);\n        const next = xmlCodeMap.get(char);\n        if (next !== undefined) {\n            ret += str.substring(lastIdx, i) + next;\n            lastIdx = i + 1;\n        }\n        else {\n            ret += `${str.substring(lastIdx, i)}&#x${getCodePoint(str, i).toString(16)};`;\n            // Increase by 1 if we have a surrogate pair\n            lastIdx = xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);\n        }\n    }\n    return ret + str.substr(lastIdx);\n}\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n *\n * Have a look at `escapeUTF8` if you want a more concise output at the expense\n * of reduced transportability.\n *\n * @param data String to escape.\n */\nexport const escape = encodeXML;\n/**\n * Creates a function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n *\n * @param regex Regular expression to match characters to escape.\n * @param map Map of characters to escape to their entities.\n *\n * @returns Function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n */\nfunction getEscaper(regex, map) {\n    return function escape(data) {\n        let match;\n        let lastIdx = 0;\n        let result = \"\";\n        while ((match = regex.exec(data))) {\n            if (lastIdx !== match.index) {\n                result += data.substring(lastIdx, match.index);\n            }\n            // We know that this character will be in the map.\n            result += map.get(match[0].charCodeAt(0));\n            // Every match will be of length 1\n            lastIdx = match.index + 1;\n        }\n        return result + data.substring(lastIdx);\n    };\n}\n/**\n * Encodes all characters not valid in XML documents using XML entities.\n *\n * Note that the output will be character-set dependent.\n *\n * @param data String to escape.\n */\nexport const escapeUTF8 = getEscaper(/[&<>'\"]/g, xmlCodeMap);\n/**\n * Encodes all characters that have to be escaped in HTML attributes,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\nexport const escapeAttribute = getEscaper(/[\"&\\u00A0]/g, new Map([\n    [34, \"&quot;\"],\n    [38, \"&amp;\"],\n    [160, \"&nbsp;\"],\n]));\n/**\n * Encodes all characters that have to be escaped in HTML text,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\nexport const escapeText = getEscaper(/[&<>\\u00A0]/g, new Map([\n    [38, \"&amp;\"],\n    [60, \"&lt;\"],\n    [62, \"&gt;\"],\n    [160, \"&nbsp;\"],\n]));\n//# sourceMappingURL=escape.js.map","import { TAG_NAMES as $, NS, hasUnescapedText } from '../common/html.js';\nimport { escapeText, escapeAttribute } from 'entities/lib/escape.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\n// Sets\nconst VOID_ELEMENTS = new Set([\n    $.AREA,\n    $.BASE,\n    $.BASEFONT,\n    $.BGSOUND,\n    $.BR,\n    $.COL,\n    $.EMBED,\n    $.FRAME,\n    $.HR,\n    $.IMG,\n    $.INPUT,\n    $.KEYGEN,\n    $.LINK,\n    $.META,\n    $.PARAM,\n    $.SOURCE,\n    $.TRACK,\n    $.WBR,\n]);\nfunction isVoidElement(node, options) {\n    return (options.treeAdapter.isElementNode(node) &&\n        options.treeAdapter.getNamespaceURI(node) === NS.HTML &&\n        VOID_ELEMENTS.has(options.treeAdapter.getTagName(node)));\n}\nconst defaultOpts = { treeAdapter: defaultTreeAdapter, scriptingEnabled: true };\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serialize(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    if (isVoidElement(node, opts)) {\n        return '';\n    }\n    return serializeChildNodes(node, opts);\n}\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const html = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serializeOuter(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    return serializeNode(node, opts);\n}\nfunction serializeChildNodes(parentNode, options) {\n    let html = '';\n    // Get container of the child nodes\n    const container = options.treeAdapter.isElementNode(parentNode) &&\n        options.treeAdapter.getTagName(parentNode) === $.TEMPLATE &&\n        options.treeAdapter.getNamespaceURI(parentNode) === NS.HTML\n        ? options.treeAdapter.getTemplateContent(parentNode)\n        : parentNode;\n    const childNodes = options.treeAdapter.getChildNodes(container);\n    if (childNodes) {\n        for (const currentNode of childNodes) {\n            html += serializeNode(currentNode, options);\n        }\n    }\n    return html;\n}\nfunction serializeNode(node, options) {\n    if (options.treeAdapter.isElementNode(node)) {\n        return serializeElement(node, options);\n    }\n    if (options.treeAdapter.isTextNode(node)) {\n        return serializeTextNode(node, options);\n    }\n    if (options.treeAdapter.isCommentNode(node)) {\n        return serializeCommentNode(node, options);\n    }\n    if (options.treeAdapter.isDocumentTypeNode(node)) {\n        return serializeDocumentTypeNode(node, options);\n    }\n    // Return an empty string for unknown nodes\n    return '';\n}\nfunction serializeElement(node, options) {\n    const tn = options.treeAdapter.getTagName(node);\n    return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? '' : `${serializeChildNodes(node, options)}</${tn}>`}`;\n}\nfunction serializeAttributes(node, { treeAdapter }) {\n    let html = '';\n    for (const attr of treeAdapter.getAttrList(node)) {\n        html += ' ';\n        if (!attr.namespace) {\n            html += attr.name;\n        }\n        else\n            switch (attr.namespace) {\n                case NS.XML: {\n                    html += `xml:${attr.name}`;\n                    break;\n                }\n                case NS.XMLNS: {\n                    if (attr.name !== 'xmlns') {\n                        html += 'xmlns:';\n                    }\n                    html += attr.name;\n                    break;\n                }\n                case NS.XLINK: {\n                    html += `xlink:${attr.name}`;\n                    break;\n                }\n                default: {\n                    html += `${attr.prefix}:${attr.name}`;\n                }\n            }\n        html += `=\"${escapeAttribute(attr.value)}\"`;\n    }\n    return html;\n}\nfunction serializeTextNode(node, options) {\n    const { treeAdapter } = options;\n    const content = treeAdapter.getTextNodeContent(node);\n    const parent = treeAdapter.getParentNode(node);\n    const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n    return parentTn &&\n        treeAdapter.getNamespaceURI(parent) === NS.HTML &&\n        hasUnescapedText(parentTn, options.scriptingEnabled)\n        ? content\n        : escapeText(content);\n}\nfunction serializeCommentNode(node, { treeAdapter }) {\n    return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;\n}\nfunction serializeDocumentTypeNode(node, { treeAdapter }) {\n    return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;\n}\n//# sourceMappingURL=index.js.map","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Doctype} Doctype\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-to-hast').Raw} Raw\n *\n * @typedef {import('parse5').DefaultTreeAdapterMap} DefaultTreeAdapterMap\n * @typedef {import('parse5').ParserOptions<DefaultTreeAdapterMap>} ParserOptions\n * @typedef {import('parse5').Token.CharacterToken} CharacterToken\n * @typedef {import('parse5').Token.CommentToken} CommentToken\n * @typedef {import('parse5').Token.DoctypeToken} DoctypeToken\n * @typedef {import('parse5').Token.Location} Location\n * @typedef {import('parse5').Token.TagToken} TagToken\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {Array<Nodes['type']> | null | undefined} [passThrough]\n *   List of custom hast node types to pass through (as in, keep) (optional).\n *\n *   If the passed through nodes have children, those children are expected to\n *   be hast again and will be handled.\n *\n * @typedef State\n *   Info passed around about the current state.\n * @property {(node: Nodes) => undefined} handle\n *   Add a hast node to the parser.\n * @property {Options} options\n *   User configuration.\n * @property {Parser<DefaultTreeAdapterMap>} parser\n *   Current parser.\n * @property {boolean} stitches\n *   Whether there are stitches.\n *\n * @typedef {{type: 'comment', value: {stitch: Nodes}}} Stitch\n *   Custom comment-like value we pass through parse5, which contains a\n *   replacement node that we’ll swap back in afterwards.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {fromParse5} from 'hast-util-from-parse5'\nimport {toParse5} from 'hast-util-to-parse5'\nimport {htmlVoidElements} from 'html-void-elements'\nimport {Parser, Token, TokenizerMode, html} from 'parse5'\nimport {pointEnd, pointStart} from 'unist-util-position'\nimport {visit} from 'unist-util-visit'\nimport {webNamespaces} from 'web-namespaces'\nimport {zwitch} from 'zwitch'\n\n// Node types associated with MDX.\n// <https://github.com/mdx-js/mdx/blob/8a56312/packages/mdx/lib/node-types.js>\nconst knownMdxNames = new Set([\n  'mdxFlowExpression',\n  'mdxJsxFlowElement',\n  'mdxJsxTextElement',\n  'mdxTextExpression',\n  'mdxjsEsm'\n])\n\n/** @type {ParserOptions} */\nconst parseOptions = {sourceCodeLocationInfo: true, scriptingEnabled: false}\n\n/**\n * Pass a hast tree through an HTML parser, which will fix nesting, and turn\n * raw nodes into actual nodes.\n *\n * @param {Nodes} tree\n *   Original hast tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Nodes}\n *   Parsed again tree.\n */\nexport function raw(tree, options) {\n  const document = documentMode(tree)\n  /** @type {(node: Nodes, state: State) => undefined} */\n  const one = zwitch('type', {\n    handlers: {root, element, text, comment, doctype, raw: handleRaw},\n    unknown\n  })\n\n  /** @type {State} */\n  const state = {\n    parser: document\n      ? new Parser(parseOptions)\n      : Parser.getFragmentParser(undefined, parseOptions),\n    handle(node) {\n      one(node, state)\n    },\n    stitches: false,\n    options: options || {}\n  }\n\n  one(tree, state)\n  resetTokenizer(state, pointStart())\n\n  const p5 = document ? state.parser.document : state.parser.getFragment()\n  const result = fromParse5(p5, {\n    // To do: support `space`?\n    file: state.options.file\n  })\n\n  if (state.stitches) {\n    visit(result, 'comment', function (node, index, parent) {\n      const stitch = /** @type {Stitch} */ (/** @type {unknown} */ (node))\n      if (stitch.value.stitch && parent && index !== undefined) {\n        /** @type {Array<RootContent>} */\n        const siblings = parent.children\n        // @ts-expect-error: assume the stitch is allowed.\n        siblings[index] = stitch.value.stitch\n        return index\n      }\n    })\n  }\n\n  // Unpack if possible and when not given a `root`.\n  if (\n    result.type === 'root' &&\n    result.children.length === 1 &&\n    result.children[0].type === tree.type\n  ) {\n    return result.children[0]\n  }\n\n  return result\n}\n\n/**\n * Transform all nodes\n *\n * @param {Array<RootContent>} nodes\n *   hast content.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction all(nodes, state) {\n  let index = -1\n\n  /* istanbul ignore else - invalid nodes, see rehypejs/rehype-raw#7. */\n  if (nodes) {\n    while (++index < nodes.length) {\n      state.handle(nodes[index])\n    }\n  }\n}\n\n/**\n * Transform a root.\n *\n * @param {Root} node\n *   hast root node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction root(node, state) {\n  all(node.children, state)\n}\n\n/**\n * Transform an element.\n *\n * @param {Element} node\n *   hast element node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction element(node, state) {\n  startTag(node, state)\n\n  all(node.children, state)\n\n  endTag(node, state)\n}\n\n/**\n * Transform a text.\n *\n * @param {Text} node\n *   hast text node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction text(node, state) {\n  /** @type {CharacterToken} */\n  const token = {\n    type: Token.TokenType.CHARACTER,\n    chars: node.value,\n    location: createParse5Location(node)\n  }\n\n  resetTokenizer(state, pointStart(node))\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a doctype.\n *\n * @param {Doctype} node\n *   hast doctype node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction doctype(node, state) {\n  /** @type {DoctypeToken} */\n  const token = {\n    type: Token.TokenType.DOCTYPE,\n    name: 'html',\n    forceQuirks: false,\n    publicId: '',\n    systemId: '',\n    location: createParse5Location(node)\n  }\n\n  resetTokenizer(state, pointStart(node))\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a stitch.\n *\n * @param {Nodes} node\n *   unknown node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction stitch(node, state) {\n  // Mark that there are stitches, so we need to walk the tree and revert them.\n  state.stitches = true\n\n  /** @type {Nodes} */\n  const clone = cloneWithoutChildren(node)\n\n  // Recurse, because to somewhat handle `[<x>]</x>` (where `[]` denotes the\n  // passed through node).\n  if ('children' in node && 'children' in clone) {\n    // Root in root out.\n    const fakeRoot = /** @type {Root} */ (\n      raw({type: 'root', children: node.children}, state.options)\n    )\n    clone.children = fakeRoot.children\n  }\n\n  // Hack: `value` is supposed to be a string, but as none of the tools\n  // (`parse5` or `hast-util-from-parse5`) looks at it, we can pass nodes\n  // through.\n  comment({type: 'comment', value: {stitch: clone}}, state)\n}\n\n/**\n * Transform a comment (or stitch).\n *\n * @param {Comment | Stitch} node\n *   hast comment node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction comment(node, state) {\n  /** @type {string} */\n  // @ts-expect-error: we pass stitches through.\n  const data = node.value\n\n  /** @type {CommentToken} */\n  const token = {\n    type: Token.TokenType.COMMENT,\n    data,\n    location: createParse5Location(node)\n  }\n  resetTokenizer(state, pointStart(node))\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a raw node.\n *\n * @param {Raw} node\n *   hast raw node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction handleRaw(node, state) {\n  // Reset preprocessor:\n  // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/preprocessor.ts#L18-L31>.\n  state.parser.tokenizer.preprocessor.html = ''\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.pos = -1\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.lastGapPos = -2\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.gapStack = []\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.skipNextNewLine = false\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.lastChunkWritten = false\n  state.parser.tokenizer.preprocessor.endOfChunkHit = false\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.isEol = false\n\n  // Now pass `node.value`.\n  setPoint(state, pointStart(node))\n  state.parser.tokenizer.write(node.value, false)\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer._runParsingLoop()\n\n  // Character references hang, so if we ended there, we need to flush\n  // those too.\n  // We reset the preprocessor as if the document ends here.\n  // Then one single call to the relevant state does the trick, parse5\n  // consumes the whole token.\n\n  // Note: `State` is not exposed by `parse5`, so these numbers are fragile.\n  // See: <https://github.com/inikulin/parse5/blob/46cba43/packages/parse5/lib/tokenizer/index.ts#L58>\n  // Note: a change to `parse5`, which breaks this, was merged but not released.\n  // Investigate when it is.\n  if (\n    state.parser.tokenizer.state === 72 /* NAMED_CHARACTER_REFERENCE */ ||\n    state.parser.tokenizer.state === 78 /* NUMERIC_CHARACTER_REFERENCE_END */\n  ) {\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.tokenizer.preprocessor.lastChunkWritten = true\n    /** @type {number} */\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    const cp = state.parser.tokenizer._consume()\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.tokenizer._callState(cp)\n  }\n}\n\n/**\n * Crash on an unknown node.\n *\n * @param {unknown} node_\n *   unknown node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Never.\n */\nfunction unknown(node_, state) {\n  const node = /** @type {Nodes} */ (node_)\n\n  if (\n    state.options.passThrough &&\n    state.options.passThrough.includes(node.type)\n  ) {\n    stitch(node, state)\n  } else {\n    let extra = ''\n\n    if (knownMdxNames.has(node.type)) {\n      extra =\n        \". It looks like you are using MDX nodes with `hast-util-raw` (or `rehype-raw`). If you use this because you are using remark or rehype plugins that inject `'html'` nodes, then please raise an issue with that plugin, as its a bad and slow idea. If you use this because you are using markdown syntax, then you have to configure this utility (or plugin) to pass through these nodes (see `passThrough` in docs), but you can also migrate to use the MDX syntax\"\n    }\n\n    throw new Error('Cannot compile `' + node.type + '` node' + extra)\n  }\n}\n\n/**\n * Reset the tokenizer of a parser.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Point | undefined} point\n *   Point.\n * @returns {undefined}\n *   Nothing.\n */\nfunction resetTokenizer(state, point) {\n  setPoint(state, point)\n\n  // Process final characters if they’re still there after hibernating.\n  /** @type {CharacterToken} */\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  const token = state.parser.tokenizer.currentCharacterToken\n\n  if (token && token.location) {\n    token.location.endLine = state.parser.tokenizer.preprocessor.line\n    token.location.endCol = state.parser.tokenizer.preprocessor.col + 1\n    token.location.endOffset = state.parser.tokenizer.preprocessor.offset + 1\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.currentToken = token\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser._processToken(state.parser.currentToken)\n  }\n\n  // Reset tokenizer:\n  // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/index.ts#L187-L223>.\n  // Especially putting it back in the `data` state is useful: some elements,\n  // like textareas and iframes, change the state.\n  // See GH-7.\n  // But also if broken HTML is in `raw`, and then a correct element is given.\n  // See GH-11.\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.paused = false\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.inLoop = false\n\n  // Note: don’t reset `state`, `inForeignNode`, or `lastStartTagName`, we\n  // manually update those when needed.\n  state.parser.tokenizer.active = false\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.returnState = TokenizerMode.DATA\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.charRefCode = -1\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.consumedAfterSnapshot = -1\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.currentLocation = null\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.currentCharacterToken = null\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.currentToken = null\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.currentAttr = {name: '', value: ''}\n}\n\n/**\n * Set current location.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Point | undefined} point\n *   Point.\n * @returns {undefined}\n *   Nothing.\n */\nfunction setPoint(state, point) {\n  if (point && point.offset !== undefined) {\n    /** @type {Location} */\n    const location = {\n      startLine: point.line,\n      startCol: point.column,\n      startOffset: point.offset,\n      endLine: -1,\n      endCol: -1,\n      endOffset: -1\n    }\n\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.tokenizer.preprocessor.lineStartPos = -point.column + 1 // Looks weird, but ensures we get correct positional info.\n    state.parser.tokenizer.preprocessor.droppedBufferSize = point.offset\n    state.parser.tokenizer.preprocessor.line = point.line\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.tokenizer.currentLocation = location\n  }\n}\n\n/**\n * Emit a start tag.\n *\n * @param {Element} node\n *   Element.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction startTag(node, state) {\n  // Ignore tags if we’re in plain text.\n  if (state.parser.tokenizer.state === TokenizerMode.PLAINTEXT) return\n\n  resetTokenizer(state, pointStart(node))\n\n  const current = state.parser.openElements.current\n  let ns = 'namespaceURI' in current ? current.namespaceURI : webNamespaces.html\n\n  if (ns === webNamespaces.html && node.tagName === 'svg') {\n    ns = webNamespaces.svg\n  }\n\n  const result = toParse5(\n    // Shallow clone to not delve into `children`: we only need the attributes.\n    {...node, children: []},\n    {space: ns === webNamespaces.svg ? 'svg' : 'html'}\n  )\n  // Always element.\n  /* c8 ignore next */\n  const attrs = 'attrs' in result ? result.attrs : []\n\n  /** @type {TagToken} */\n  const tag = {\n    type: Token.TokenType.START_TAG,\n    tagName: node.tagName,\n    tagID: html.getTagID(node.tagName),\n    // We always send start and end tags.\n    selfClosing: false,\n    ackSelfClosing: false,\n    attrs,\n    location: createParse5Location(node)\n  }\n\n  // The HTML parsing algorithm works by doing half of the state management in\n  // the tokenizer and half in the parser.\n  // We can’t use the tokenizer here, as we don’t have strings.\n  // So we act *as if* the tokenizer emits tokens:\n\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.currentToken = tag\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser._processToken(state.parser.currentToken)\n\n  // …but then we still need a bunch of work that the tokenizer would normally\n  // do, such as:\n\n  // Set a tag name, similar to how the tokenizer would do it.\n  state.parser.tokenizer.lastStartTagName = node.tagName\n\n  // `inForeignNode` is correctly set by the parser.\n}\n\n/**\n * Emit an end tag.\n *\n * @param {Element} node\n *   Element.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction endTag(node, state) {\n  // Do not emit closing tags for HTML void elements.\n  if (\n    !state.parser.tokenizer.inForeignNode &&\n    htmlVoidElements.includes(node.tagName)\n  ) {\n    return\n  }\n\n  // Ignore tags if we’re in plain text.\n  if (state.parser.tokenizer.state === TokenizerMode.PLAINTEXT) return\n\n  resetTokenizer(state, pointEnd(node))\n\n  /** @type {TagToken} */\n  const tag = {\n    type: Token.TokenType.END_TAG,\n    tagName: node.tagName,\n    tagID: html.getTagID(node.tagName),\n    selfClosing: false,\n    ackSelfClosing: false,\n    attrs: [],\n    location: createParse5Location(node)\n  }\n\n  // The HTML parsing algorithm works by doing half of the state management in\n  // the tokenizer and half in the parser.\n  // We can’t use the tokenizer here, as we don’t have strings.\n  // So we act *as if* the tokenizer emits tokens:\n\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.currentToken = tag\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser._processToken(state.parser.currentToken)\n\n  // …but then we still need a bunch of work that the tokenizer would normally\n  // do, such as:\n\n  // Switch back to the data state after alternative states that don’t accept\n  // tags:\n  if (\n    // Current element is closed.\n    tag.tagName === state.parser.tokenizer.lastStartTagName &&\n    // `<textarea>` and `<title>`\n    (state.parser.tokenizer.state === TokenizerMode.RCDATA ||\n      // `<iframe>`, `<noembed>`, `<style>`, `<xmp>`\n      state.parser.tokenizer.state === TokenizerMode.RAWTEXT ||\n      // `<script>`\n      state.parser.tokenizer.state === TokenizerMode.SCRIPT_DATA)\n  ) {\n    state.parser.tokenizer.state = TokenizerMode.DATA\n  }\n}\n\n/**\n * Check if `node` represents a whole document or a fragment.\n *\n * @param {Nodes} node\n *   hast node.\n * @returns {boolean}\n *   Whether this represents a whole document or a fragment.\n */\nfunction documentMode(node) {\n  const head = node.type === 'root' ? node.children[0] : node\n  return Boolean(\n    head &&\n      (head.type === 'doctype' ||\n        (head.type === 'element' && head.tagName === 'html'))\n  )\n}\n\n/**\n * Get a `parse5` location from a node.\n *\n * @param {Nodes | Stitch} node\n *   hast node.\n * @returns {Location}\n *   `parse5` location.\n */\nfunction createParse5Location(node) {\n  const start = pointStart(node) || {\n    line: undefined,\n    column: undefined,\n    offset: undefined\n  }\n  const end = pointEnd(node) || {\n    line: undefined,\n    column: undefined,\n    offset: undefined\n  }\n\n  /** @type {Record<keyof Location, number | undefined>} */\n  const location = {\n    startLine: start.line,\n    startCol: start.column,\n    startOffset: start.offset,\n    endLine: end.line,\n    endCol: end.column,\n    endOffset: end.offset\n  }\n\n  // @ts-expect-error: unist point values can be `undefined` in hast, which\n  // `parse5` types don’t want.\n  return location\n}\n\n/**\n * @template {Nodes} NodeType\n *   Node type.\n * @param {NodeType} node\n *   Node to clone.\n * @returns {NodeType}\n *   Cloned node, without children.\n */\nfunction cloneWithoutChildren(node) {\n  return 'children' in node\n    ? structuredClone({...node, children: []})\n    : structuredClone(node)\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-raw').Options} RawOptions\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<RawOptions, 'file'>} Options\n *   Configuration.\n */\n\nimport {raw} from 'hast-util-raw'\n\n/**\n * Parse the tree (and raw nodes) again, keeping positional info okay.\n *\n * @param {Options | null | undefined}  [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeRaw(options) {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {Root}\n   *   New tree.\n   */\n  return function (tree, file) {\n    // Assume root in -> root out.\n    const result = /** @type {Root} */ (raw(tree, {...options, file}))\n    return result\n  }\n}\n","import React from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport remarkBreaks from 'remark-breaks';\r\nimport rehypeRaw from \"rehype-raw\";\r\n\r\nfunction TextWithFormatting({ text }) {\r\n  const plugins = [remarkBreaks];\r\n\r\n  return (\r\n    <>\r\n      <ReactMarkdown remarkPlugins={plugins} rehypePlugins={[rehypeRaw]}>{text}</ReactMarkdown>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TextWithFormatting;","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","stringifyPosition","position","point","index","line","column","pos","start","end","VFileMessage","Error","reason","place","origin","parts","super","undefined","indexOf","slice","this","message","stack","fatal","source","ruleId","file","actual","expected","url","note","path","basename","ext","TypeError","assertPath","seenNonSlash","charCodeAt","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","code","join","segments","joined","absolute","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","lastIndexOf","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","error","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","buffer","data","messages","history","stored","map","prop","includes","assertNonEmpty","push","assertPart","stem","encoding","info","fail","part","bail","getPrototypeOf","Symbol","toStringTag","iterator","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","output","fn","middleware","called","wrapped","parameters","fnExpectsCallback","done","apply","Promise","then","wrap","use","middelware","unified","base","transformers","attachers","frozen","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","assign","add","plugin","plugins","entry","parse","doc","vfile","assertParser","newable","String","node","assertCompiler","assertNode","compile","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","keys","type","asyncName","Boolean","looksLikeAVFile","emptyOptions","one","includeImageAlt","includeHtml","alt","children","splice","list","remove","items","chunkStart","from","unshift","syntaxExtension","all","extension","hook","left","right","constructs","existing","before","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","test","fromCharCode","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","content","tokenize","contentStart","attempt","parser","contentInitial","lineStart","previous","token","contentType","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","document","disable","null","blankLine","after","partial","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","field","text","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","replace","toLowerCase","toUpperCase","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","extensions","combineExtensions","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","hex","fromMarkdown","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","title","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","match","endPosition","lastIndex","exec","Math","ceil","preprocess","d","combined","remarkParse","normalizeUri","skip","encodeURIComponent","convert","castFactory","typeFactory","tests","checks","any","anyFactory","propsFactory","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","concat","parent","pointStart","pointEnd","clean","footnoteReference","id","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","tab","space","trimLines","last","lines","trimLine","codePointAt","handlers","blockquote","break","className","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","results","loose","listLoose","disabled","child","root","table","rows","firstRow","tableContent","body","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","cache","definitions","augment","hName","hProperties","hChildren","ctx","generated","props","to","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","bridge","mutate","Schema","property","normal","merge","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","DefinedInfo","mask","mark","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","style","tabIndex","translate","typeMustMatch","useMap","width","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","whitespace","thing","valid","dash","cap","find","schema","Type","charAt","rest","camelcase","dashes","kebab","hastToReact","input","trim","split","tokens","padRight","padLeft","protocols","uriTransformer","uri","first","colon","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transformLinkUri","parentSchema","addProperty","listDepth","component","components","basic","linkTarget","inline","level","transformImageUri","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","v","styleReplacer","parseStyle","changelog","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehypeOptions","rehypePlugins","hastNode","propTypes","findAndReplace","RegExp","ignored","pairs","toExpression","toFunction","toPairs","pairIndex","grandparent","change","matchObject","global","newlineToBreak","remarkBreaks","env","globalThis","deserialize","serialized","$","out","set","unpair","get","Date","flags","Map","BigInt","deserializer","EMPTY","asString","shouldSkip","TYPE","serialize","json","lossy","strict","pair","valueOf","toJSON","entries","toISOString","serializer","structuredClone","buttonTypes","createH","defaultTagName","caseSensitive","createAdjustMap","selector","subvalue","parseSelector","isProperties","addChild","isNaN","parsePrimitive","finalResult","h","s","webNamespaces","mathml","proto","nodeName","quirksMode","childNodes","location","loc","indices","toPoint","toOffset","namespaceURI","attrs","sourceCodeLocation","startTag","endTag","verbose","opening","closing","createLocation","startLine","startCol","endLine","endCol","endOffset","zwitch","invalid","unknown","currentSchema","createProperty","parentNode","publicId","systemId","htmlVoidElements","UNDEFINED_CODE_POINTS","REPLACEMENT_CHARACTER","CODE_POINTS","SEQUENCES","isSurrogate","cp","isControlCodePoint","isUndefinedCodePoint","ERR","Preprocessor","lastGapPos","gapStack","skipNextNewLine","lastChunkWritten","endOfChunkHit","bufferWaterline","isEol","lineStartPos","droppedBufferSize","lastErrOffset","col","getError","_err","onParseError","_addGap","_processSurrogate","nextCp","isSurrogatePair","EOF","surrogateInInputStream","willDropParsedChunk","dropParsedChunk","substring","isLastChunk","insertHtmlAtCurrentPos","startsWith","peek","CARRIAGE_RETURN","LINE_FEED","advance","_checkForProblematicCharacters","controlCharacterInInputStream","noncharacterInInputStream","retreat","TokenType","getTokenAttr","attrName","_a","Uint16Array","c","decodeMap","fromCodePoint","codePoint","replaceCodePoint","CharCodes","BinTrieFlags","EntityDecoderState","DecodingMode","isNumber","ZERO","NINE","isHexadecimalCharacter","UPPER_A","UPPER_F","LOWER_A","LOWER_F","isEntityInAttributeInvalidEnd","EQUALS","UPPER_Z","LOWER_Z","isAsciiAlphaNumeric","EntityDecoder","decodeTree","emitCodePoint","errors","EntityStart","treeIndex","excess","decodeMode","Strict","startEntity","str","NUM","NumericStart","stateNumericStart","NamedEntity","stateNamedEntity","NumericDecimal","stateNumericDecimal","NumericHex","stateNumericHex","LOWER_X","addToNumericResult","digitCount","pow","substr","startIdx","emitNumericEntity","lastCp","expectedLength","absenceOfDigitsInNumericCharacterReference","SEMI","missingSemicolonAfterCharacterReference","validateNumericCharacterReference","valueLength","VALUE_LENGTH","determineBranch","Attribute","emitNotTerminatedNamedEntity","emitNamedEntityData","getDecoder","ret","decoder","len","nodeIdx","branchCount","BRANCH_LENGTH","jumpOffset","JUMP_TABLE","lo","hi","mid","midVal","ATTRS","DOCUMENT_MODE","TAG_NAMES","TAG_ID","NS","TAG_NAME_TO_ID","A","ADDRESS","ANNOTATION_XML","APPLET","AREA","ARTICLE","ASIDE","B","BASE","BASEFONT","BGSOUND","BIG","BLOCKQUOTE","BODY","BR","BUTTON","CAPTION","CENTER","CODE","COL","COLGROUP","DD","DESC","DETAILS","DIALOG","DIR","DIV","DL","DT","EM","EMBED","FIELDSET","FIGCAPTION","FIGURE","FONT","FOOTER","FOREIGN_OBJECT","FORM","FRAME","FRAMESET","H1","H2","H3","H4","H5","H6","HEAD","HEADER","HGROUP","HR","HTML","I","IMG","IMAGE","INPUT","IFRAME","KEYGEN","LABEL","LI","LINK","LISTING","MAIN","MALIGNMARK","MARQUEE","MATH","MENU","META","MGLYPH","MI","MO","MN","MS","MTEXT","NAV","NOBR","NOFRAMES","NOEMBED","NOSCRIPT","OBJECT","OL","OPTGROUP","OPTION","P","PARAM","PLAINTEXT","PRE","RB","RP","RT","RTC","RUBY","S","SCRIPT","SECTION","SELECT","SOURCE","SMALL","SPAN","STRIKE","STRONG","STYLE","SUB","SUMMARY","SUP","TABLE","TBODY","TEMPLATE","TEXTAREA","TFOOT","TD","TH","THEAD","TITLE","TR","TRACK","TT","U","UL","SVG","VAR","WBR","XMP","getTagID","UNKNOWN","SPECIAL_ELEMENTS","MATHML","XLINK","XML","XMLNS","isNumberedHeader","tn","C1_CONTROLS_REFERENCE_REPLACEMENTS","State","TokenizerMode","DATA","RCDATA","RAWTEXT","SCRIPT_DATA","CDATA_SECTION","isAsciiDigit","DIGIT_0","DIGIT_9","isAsciiUpper","LATIN_CAPITAL_A","LATIN_CAPITAL_Z","isAsciiLetter","LATIN_SMALL_A","LATIN_SMALL_Z","isAsciiLower","isAsciiUpperHexDigit","LATIN_CAPITAL_F","isAsciiLowerHexDigit","LATIN_SMALL_F","toAsciiLower","isWhitespace","SPACE","TABULATION","FORM_FEED","isScriptDataDoubleEscapeSequenceEnd","SOLIDUS","GREATER_THAN_SIGN","Tokenizer","paused","inLoop","inForeignNode","lastStartTagName","active","charRefCode","consumedAfterSnapshot","currentCharacterToken","currentToken","currentAttr","preprocessor","currentLocation","getCurrentLocation","_b","sourceCodeLocationInfo","_runParsingLoop","_consume","_ensureHibernation","_callState","pause","writeCallback","_unconsume","_reconsumeInState","_advanceBy","_consumeSequenceIfMatch","_createStartTagToken","START_TAG","tagID","selfClosing","ackSelfClosing","_createEndTagToken","END_TAG","_createCommentToken","COMMENT","_createDoctypeToken","initialName","DOCTYPE","forceQuirks","_createCharacterToken","chars","_createAttr","attrNameFirstCh","_leaveAttrName","_leaveAttrValue","duplicateAttribute","prepareToken","ct","_emitCurrentCharacterToken","emitCurrentTagToken","onStartTag","endTagWithAttributes","endTagWithTrailingSolidus","onEndTag","emitCurrentComment","onComment","emitCurrentDoctype","onDoctype","nextLocation","CHARACTER","onCharacter","NULL_CHARACTER","onNullCharacter","WHITESPACE_CHARACTER","onWhitespaceCharacter","_emitEOFToken","onEof","_appendCharToCurrentCharacterToken","ch","_emitCodePoint","NULL","_emitChars","_matchNamedCharacterReference","withoutSemicolon","masked","SEMICOLON","_isCharacterReferenceInAttribute","EQUALS_SIGN","AMPERSAND","ATTRIBUTE_VALUE_DOUBLE_QUOTED","ATTRIBUTE_VALUE_SINGLE_QUOTED","ATTRIBUTE_VALUE_UNQUOTED","_flushCodePointConsumedAsCharacterReference","_stateData","_stateRcdata","_stateRawtext","_stateScriptData","_statePlaintext","TAG_OPEN","_stateTagOpen","END_TAG_OPEN","_stateEndTagOpen","TAG_NAME","_stateTagName","RCDATA_LESS_THAN_SIGN","_stateRcdataLessThanSign","RCDATA_END_TAG_OPEN","_stateRcdataEndTagOpen","RCDATA_END_TAG_NAME","_stateRcdataEndTagName","RAWTEXT_LESS_THAN_SIGN","_stateRawtextLessThanSign","RAWTEXT_END_TAG_OPEN","_stateRawtextEndTagOpen","RAWTEXT_END_TAG_NAME","_stateRawtextEndTagName","SCRIPT_DATA_LESS_THAN_SIGN","_stateScriptDataLessThanSign","SCRIPT_DATA_END_TAG_OPEN","_stateScriptDataEndTagOpen","SCRIPT_DATA_END_TAG_NAME","_stateScriptDataEndTagName","SCRIPT_DATA_ESCAPE_START","_stateScriptDataEscapeStart","SCRIPT_DATA_ESCAPE_START_DASH","_stateScriptDataEscapeStartDash","SCRIPT_DATA_ESCAPED","_stateScriptDataEscaped","SCRIPT_DATA_ESCAPED_DASH","_stateScriptDataEscapedDash","SCRIPT_DATA_ESCAPED_DASH_DASH","_stateScriptDataEscapedDashDash","SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN","_stateScriptDataEscapedLessThanSign","SCRIPT_DATA_ESCAPED_END_TAG_OPEN","_stateScriptDataEscapedEndTagOpen","SCRIPT_DATA_ESCAPED_END_TAG_NAME","_stateScriptDataEscapedEndTagName","SCRIPT_DATA_DOUBLE_ESCAPE_START","_stateScriptDataDoubleEscapeStart","SCRIPT_DATA_DOUBLE_ESCAPED","_stateScriptDataDoubleEscaped","SCRIPT_DATA_DOUBLE_ESCAPED_DASH","_stateScriptDataDoubleEscapedDash","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH","_stateScriptDataDoubleEscapedDashDash","SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN","_stateScriptDataDoubleEscapedLessThanSign","SCRIPT_DATA_DOUBLE_ESCAPE_END","_stateScriptDataDoubleEscapeEnd","BEFORE_ATTRIBUTE_NAME","_stateBeforeAttributeName","ATTRIBUTE_NAME","_stateAttributeName","AFTER_ATTRIBUTE_NAME","_stateAfterAttributeName","BEFORE_ATTRIBUTE_VALUE","_stateBeforeAttributeValue","_stateAttributeValueDoubleQuoted","_stateAttributeValueSingleQuoted","_stateAttributeValueUnquoted","AFTER_ATTRIBUTE_VALUE_QUOTED","_stateAfterAttributeValueQuoted","SELF_CLOSING_START_TAG","_stateSelfClosingStartTag","BOGUS_COMMENT","_stateBogusComment","MARKUP_DECLARATION_OPEN","_stateMarkupDeclarationOpen","COMMENT_START","_stateCommentStart","COMMENT_START_DASH","_stateCommentStartDash","_stateComment","COMMENT_LESS_THAN_SIGN","_stateCommentLessThanSign","COMMENT_LESS_THAN_SIGN_BANG","_stateCommentLessThanSignBang","COMMENT_LESS_THAN_SIGN_BANG_DASH","_stateCommentLessThanSignBangDash","COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH","_stateCommentLessThanSignBangDashDash","COMMENT_END_DASH","_stateCommentEndDash","COMMENT_END","_stateCommentEnd","COMMENT_END_BANG","_stateCommentEndBang","_stateDoctype","BEFORE_DOCTYPE_NAME","_stateBeforeDoctypeName","DOCTYPE_NAME","_stateDoctypeName","AFTER_DOCTYPE_NAME","_stateAfterDoctypeName","AFTER_DOCTYPE_PUBLIC_KEYWORD","_stateAfterDoctypePublicKeyword","BEFORE_DOCTYPE_PUBLIC_IDENTIFIER","_stateBeforeDoctypePublicIdentifier","DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypePublicIdentifierDoubleQuoted","DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED","_stateDoctypePublicIdentifierSingleQuoted","AFTER_DOCTYPE_PUBLIC_IDENTIFIER","_stateAfterDoctypePublicIdentifier","BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS","_stateBetweenDoctypePublicAndSystemIdentifiers","AFTER_DOCTYPE_SYSTEM_KEYWORD","_stateAfterDoctypeSystemKeyword","BEFORE_DOCTYPE_SYSTEM_IDENTIFIER","_stateBeforeDoctypeSystemIdentifier","DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypeSystemIdentifierDoubleQuoted","DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED","_stateDoctypeSystemIdentifierSingleQuoted","AFTER_DOCTYPE_SYSTEM_IDENTIFIER","_stateAfterDoctypeSystemIdentifier","BOGUS_DOCTYPE","_stateBogusDoctype","_stateCdataSection","CDATA_SECTION_BRACKET","_stateCdataSectionBracket","CDATA_SECTION_END","_stateCdataSectionEnd","CHARACTER_REFERENCE","_stateCharacterReference","NAMED_CHARACTER_REFERENCE","_stateNamedCharacterReference","AMBIGUOUS_AMPERSAND","_stateAmbiguousAmpersand","NUMERIC_CHARACTER_REFERENCE","_stateNumericCharacterReference","HEXADEMICAL_CHARACTER_REFERENCE_START","_stateHexademicalCharacterReferenceStart","HEXADEMICAL_CHARACTER_REFERENCE","_stateHexademicalCharacterReference","DECIMAL_CHARACTER_REFERENCE","_stateDecimalCharacterReference","NUMERIC_CHARACTER_REFERENCE_END","_stateNumericCharacterReferenceEnd","LESS_THAN_SIGN","unexpectedNullCharacter","EXCLAMATION_MARK","QUESTION_MARK","unexpectedQuestionMarkInsteadOfTagName","eofBeforeTagName","invalidFirstCharacterOfTagName","missingEndTagName","eofInTag","handleSpecialEndTag","_cp","HYPHEN_MINUS","eofInScriptHtmlCommentLikeText","unexpectedEqualsSignBeforeAttributeName","QUOTATION_MARK","APOSTROPHE","unexpectedCharacterInAttributeName","missingAttributeValue","GRAVE_ACCENT","unexpectedCharacterInUnquotedAttributeValue","missingWhitespaceBetweenAttributes","unexpectedSolidusInTag","cdataInHtmlContent","incorrectlyOpenedComment","abruptClosingOfEmptyComment","eofInComment","nestedComment","incorrectlyClosedComment","eofInDoctype","missingWhitespaceBeforeDoctypeName","missingDoctypeName","invalidCharacterSequenceAfterDoctypeName","missingWhitespaceAfterDoctypePublicKeyword","missingDoctypePublicIdentifier","missingQuoteBeforeDoctypePublicIdentifier","abruptDoctypePublicIdentifier","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","missingQuoteBeforeDoctypeSystemIdentifier","missingWhitespaceAfterDoctypeSystemKeyword","missingDoctypeSystemIdentifier","abruptDoctypeSystemIdentifier","unexpectedCharacterAfterDoctypeSystemIdentifier","RIGHT_SQUARE_BRACKET","eofInCdata","NUMBER_SIGN","matchResult","unknownNamedCharacterReference","LATIN_SMALL_X","LATIN_CAPITAL_X","isAsciiHexDigit","nullCharacterReference","characterReferenceOutsideUnicodeRange","surrogateCharacterReference","noncharacterCharacterReference","controlCharacterReference","replacement","IMPLICIT_END_TAG_REQUIRED","IMPLICIT_END_TAG_REQUIRED_THOROUGHLY","SCOPING_ELEMENT_NS","NAMED_HEADERS","TABLE_ROW_CONTEXT","TABLE_BODY_CONTEXT","TABLE_CONTEXT","TABLE_CELLS","OpenElementStack","currentTmplContentOrNode","_isInTemplate","treeAdapter","getTemplateContent","tagIDs","stackTop","tmplCount","currentTagId","_indexOf","element","getNamespaceURI","_updateCurrentElement","onItemPush","popped","onItemPop","oldElement","newElement","idx","insertAfter","referenceElement","newElementID","insertionIdx","popUntilTagNamePopped","targetIdx","shortenToLength","popUntilElementPopped","popUntilPopped","tagNames","targetNS","_indexOfTagNames","popUntilNumberedHeaderPopped","popUntilTableCellPopped","popAllUpToHtmlElement","clearBackTo","clearBackToTableContext","clearBackToTableBodyContext","clearBackToTableRowContext","tryPeekProperlyNestedBodyElement","contains","getCommonAncestor","elementIdx","isRootHtmlElementCurrent","hasInScope","ns","hasNumberedHeaderInScope","hasInListItemScope","hasInButtonScope","hasInTableScope","hasTableBodyContextInTableScope","hasInSelectScope","generateImpliedEndTags","generateImpliedEndTagsThoroughly","generateImpliedEndTagsWithExclusion","exclusionId","EntryType","MARKER","Marker","FormattingElementList","bookmark","_getNoahArkConditionCandidates","neAttrs","candidates","neAttrsLength","neTagName","getTagName","neNamespaceURI","elementAttrs","getAttrList","_ensureNoahArkCondition","neAttrsMap","neAttr","validCandidates","candidate","every","cAttr","insertMarker","pushElement","Element","insertElementAfterBookmark","bookmarkIdx","removeEntry","entryIndex","clearToLastMarker","markerIdx","getElementEntryInScopeWithTagName","getElementEntry","createTextNode","defaultTreeAdapter","createDocument","NO_QUIRKS","createDocumentFragment","createCommentNode","appendChild","newNode","insertBefore","referenceNode","setTemplateContent","templateElement","contentElement","setDocumentType","doctypeNode","setDocumentMode","getDocumentMode","detachNode","insertText","prevNode","isTextNode","insertTextBefore","adoptAttributes","recipient","recipientAttrsMap","attr","j","getFirstChild","getChildNodes","getParentNode","getTextNodeContent","textNode","getCommentNodeContent","commentNode","getDocumentTypeNodeName","getDocumentTypeNodePublicId","getDocumentTypeNodeSystemId","isCommentNode","isDocumentTypeNode","isElementNode","setNodeSourceCodeLocation","getNodeSourceCodeLocation","updateNodeSourceCodeLocation","endLocation","VALID_DOCTYPE_NAME","VALID_SYSTEM_ID","QUIRKS_MODE_SYSTEM_ID","QUIRKS_MODE_PUBLIC_ID_PREFIXES","QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES","QUIRKS_MODE_PUBLIC_IDS","LIMITED_QUIRKS_PUBLIC_ID_PREFIXES","LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES","hasPrefix","prefixes","some","MIME_TYPES","TEXT_HTML","APPLICATION_XML","DEFINITION_URL_ATTR","ADJUSTED_DEFINITION_URL_ATTR","SVG_ATTRS_ADJUSTMENT_MAP","XML_ATTRS_ADJUSTMENT_MAP","SVG_TAG_NAMES_ADJUSTMENT_MAP","EXITS_FOREIGN_CONTENT","adjustTokenMathMLAttrs","adjustTokenSVGAttrs","adjustedAttrName","adjustTokenXMLAttrs","adjustedAttrEntry","isIntegrationPoint","foreignNS","ENCODING","isHtmlIntegrationPoint","isMathMLTextIntegrationPoint","HIDDEN_INPUT_TYPE","AA_OUTER_LOOP_ITER","AA_INNER_LOOP_ITER","InsertionMode","BASE_LOC","TABLE_STRUCTURE_TAGS","defaultParserOptions","scriptingEnabled","fragmentContext","scriptHandler","stopped","insertionMode","INITIAL","originalInsertionMode","headElement","formElement","currentNotInHTML","tmplInsertionModeStack","pendingCharacterTokens","hasNonWhitespacePendingCharacterToken","framesetOk","fosterParentingEnabled","activeFormattingElements","fragmentContextID","_setContextModes","openElements","getFragmentParser","opts","documentMock","IN_TEMPLATE","_initTokenizerForFragmentParsing","_insertFakeRootElement","_resetInsertionMode","_findFormInFragmentContext","getFragment","rootElement","_adoptNodes","beforeToken","err","tid","isTop","_setEndLocation","isHTML","_isIntegrationPoint","_switchToTextParsing","nextTokenizerState","_insertElement","TEXT","switchToPlaintextParsing","IN_BODY","_getAdjustedCurrentElement","_setDocumentType","docTypeNode","_attachElementToTree","_shouldFosterParentOnInsertion","_fosterParentElement","_appendElement","_insertFakeElement","_insertTemplate","tmpl","_appendCommentNode","_insertCharacters","beforeElement","_findFosterParentingLocation","textNodeIdx","donor","closingToken","ctLoc","endLoc","shouldProcessStartTagTokenInForeignContent","_processToken","_processStartTag","_reconstructActiveFormattingElements","listLength","findIndex","_closeTableCell","IN_ROW","_closePElement","IN_TABLE_BODY","IN_CAPTION","IN_COLUMN_GROUP","IN_TABLE","IN_FRAMESET","_resetInsertionModeForSelect","AFTER_HEAD","BEFORE_HEAD","IN_CELL","IN_HEAD","selectIdx","IN_SELECT_IN_TABLE","IN_SELECT","_isElementCausesFosterParenting","openElement","_isSpecialElement","p","characterInForeignContent","tokenInInitialMode","BEFORE_HTML","tokenBeforeHtml","tokenBeforeHead","tokenInHead","IN_HEAD_NO_SCRIPT","tokenInHeadNoScript","tokenAfterHead","characterInBody","characterInTable","IN_TABLE_TEXT","characterInTableText","tokenInColumnGroup","AFTER_BODY","tokenAfterBody","AFTER_AFTER_BODY","tokenAfterAfterBody","nullCharacterInForeignContent","appendComment","AFTER_FRAMESET","tokenInTableText","appendCommentToRootHtmlElement","AFTER_AFTER_FRAMESET","appendCommentToDocument","QUIRKS","LIMITED_QUIRKS","nonConformingDoctype","doctypeInInitialMode","misplacedDoctype","nonVoidHtmlElementStartTagWithTrailingSolidus","startTagToken","COLOR","SIZE","FACE","popUntilHtmlOrIntegrationPoint","_startTagOutsideForeignContent","currentNs","adjustedTagName","startTagInForeignContent","startTagBeforeHtml","startTagInBody","startTagBeforeHead","startTagInHead","nestedNoscriptInHead","startTagInHeadNoScript","abandonedHeadElementChild","misplacedStartTagForHeadElement","startTagAfterHead","startTagInTable","TABLE_VOID_ELEMENTS","startTagInCaption","startTagInColumnGroup","startTagInTableBody","startTagInRow","startTagInCell","startTagInSelect","startTagInSelectInTable","startTagInTemplate","startTagAfterBody","startTagInFrameset","startTagAfterFrameset","startTagAfterAfterBody","startTagAfterAfterFrameset","_endTagOutsideForeignContent","endTagInForeignContent","endTagBeforeHtml","endTagWithoutMatchingOpenElement","endTagBeforeHead","templateEndTagInHead","endTagInHead","endTagInHeadNoScript","endTagAfterHead","endTagInBody","endTagInText","endTagInTable","endTagInCaption","endTagInColumnGroup","endTagInTableBody","endTagInRow","endTagInCell","endTagInSelect","endTagInSelectInTable","endTagInTemplate","endTagAfterBody","endTagInFrameset","endTagAfterFrameset","eofInBody","eofInElementThatCanContainOnlyText","eofInText","eofInTemplate","stopParsing","whitespaceCharacterInBody","whitespaceCharacterInTableText","aaObtainFormattingElementEntry","formattingElementEntry","genericEndTagInBody","aaObtainFurthestBlock","furthestBlock","aaInnerLoop","formattingElement","lastElement","nextElement","elementEntry","counterOverflow","aaRecreateElementFromEntry","aaInsertLastNodeInCommonAncestor","commonAncestor","aaReplaceFormattingElement","callAdoptionAgency","htmlElement","htmlLocation","bodyElement","bodyLocation","missingDoctype","closingOfElementWithOpenChildElements","errCode","openElementsLeftAfterEof","disallowedContentInNoscriptInHead","modeInBody","areaStartTagInBody","isHiddenInput","inputType","noembedStartTagInBody","genericStartTagInBody","bStartTagInBody","activeElementEntry","aStartTagInBody","numberedHeaderStartTagInBody","addressStartTagInBody","elementId","listItemStartTagInBody","hrStartTagInBody","rbStartTagInBody","rtStartTagInBody","preStartTagInBody","xmpStartTagInBody","svgStartTagInBody","htmlStartTagInBody","bodyStartTagInBody","inTemplate","formStartTagInBody","nobrStartTagInBody","mathStartTagInBody","tableStartTagInBody","inputStartTagInBody","paramStartTagInBody","imageStartTagInBody","buttonStartTagInBody","appletStartTagInBody","iframeStartTagInBody","selectStartTagInBody","optgroupStartTagInBody","framesetStartTagInBody","textareaStartTagInBody","plaintextStartTagInBody","pEndTagInBody","addressEndTagInBody","liEndTagInBody","ddEndTagInBody","numberedHeaderEndTagInBody","brEndTagInBody","bodyEndTagInBody","htmlEndTagInBody","formEndTagInBody","appletEndTagInBody","tokenInTable","tdStartTagInTable","colStartTagInTable","formStartTagInTable","tableStartTagInTable","tbodyStartTagInTable","inputStartTagInTable","captionStartTagInTable","colgroupStartTagInTable","savedFosterParentingState","xmlCodeMap","getEscaper","lastIdx","checkAsRecord","nodeAsRecord","testFunction","looksLikeANode","empty","nodeAsParent","knownMdxNames","parseOptions","documentMode","handle","stitches","resetTokenizer","fromParse5","testOrVisitor","visitorOrReverse","maybeReverse","stitch","toParse5","tag","createParse5Location","cloneWithoutChildren","fakeRoot","handleRaw","setPoint","node_","extra","rehypeRaw","_ref","React","isBuffer","u","b","for","e","f","g","l","m","n","q","t","a","$$typeof","ContextConsumer","ContextProvider","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","SuspenseList","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isSuspenseList","isValidElementType","getModuleId","StyleToObject","declarations","hasIterator"],"sourceRoot":""}